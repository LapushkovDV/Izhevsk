/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#include Query.vih
#include objintpl.vin
#include runalg_fake.vih
#include ProtPlan_CF.vih

#component "M_MnPlan"
Interface runalg_fake 'Импорт плана';
create view
var _logFile : string = '';
_cMnPlan : comp;
   WorkLog : oiEvnLog;
   iprot   : oProtPlan_CF;
  _formPL : comp;

as select
 mnplan.nrec
from
   mnplan
 , formPL
 where ((
              _cMnPlan == MnPlan.nrec
           and _formPL == formpl.nrec
       ))

;

Procedure DoneInter;
{
 if (Not NullVipRef(WorkLog))
  FreeVipInterface(WorkLog);
 if (Not NullVipRef(iProt))
  FreeVipInterface(iProt);
}
Procedure RunProtocol;
{
  Var vr_ProtPlan: type$ProtPlan;
  Var i : longint;
  Var stItem : rELItem;

  if (WorkLog.fGetFirst <> tsOK)
    Exit;

  vr_ProtPlan.TypeOwn := Mnplan.TypePlan;
  vr_ProtPlan.cOwner  := Mnplan.Nrec;
  vr_ProtPlan.cFormPl := FormPl.Nrec;
  if (iProt.ProtPlan_Ins(vr_ProtPlan) <> tsOk)
  {
    Message('Ошибка создания протокола расчета', Error);
    exit;
  }

  vr_ProtPlan.StartDate := Cur_date;
  vr_ProtPlan.StartTime := Cur_time;
  iProt.ProtPlan_Upd(vr_ProtPlan);

  iProt.ProtPlan_AddStr(vr_ProtPlan.nRec, '');
  iProt.ProtPlan_AddStr(vr_ProtPlan.nRec, '                              ПРОТОКОЛ РАСЧЕТА');
  iProt.ProtPlan_AddStr(vr_ProtPlan.nRec, '');
  if (WorkLog.fGetFirst = tsOK)
  {
    StartNewVisual(vtRotateVisual, vfTimer + vfConfirm + vfBreak, 'Формирование протокола расчета',1);
    Do
    {
      if (not NextVisual)
        break;

      stItem := WorkLog.Item();
      for (i := 1 ; WorkLog.ItemLinesCount >= i ; i := i+1)
      {
       iProt.ProtPlan_AddStr(vr_ProtPlan.nRec, '  ' + WorkLog.ReadLine(i));
      }
    }  While (WorkLog.fGetNext = tsOK);
    StopVisual('',0);

    RunInterface('iProtPlan_RB', vr_ProtPlan.nRec, 0, '', 0, 0, 0, 0);
  }
}
Procedure StopDone; {
  if VisualizationActive then stopvisual;
  DoneInter;
}
Procedure writeProtocol(txt : string);
{
  WorkLog.itemInsert(1, etWarrning, 1);
  WorkLog.WriteLine(WorkLog.LineNom, txt);
}
procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'runalg_sql_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
  logstrtofile(_logFile,DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') +'| ' +_log);
  writeProtocol(DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') +'| ' +_log);
}


function Run_real(__cMnPlan : comp) : boolean; {
  result := False;
  set _cMnPlan := __cMnPlan;
  set _logFile := '';
  if (Not LoadVipRef (WorkLog, 'iEvnLog'))
  {
    Message('Системная ошибка! Не загружен интерфейс <iEvnLog>', Error);
    StopDone;
    exit;
  }
  WorkLog.ClearLog;

  if (Not LoadVipRef (iProt, 'iProtPlan_CF'))
  {
    Message('Системная ошибка! Не загружен интерфейс <iProtPlan_CF>', Error);
    StopDone;
    exit;
  }

 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Всем оставаться на месте! Работает СУБД 0_о' , 1);

 setvisualheader('Формирование заказов по условиям поставок');

   MyLog('Старт алгоритма "Формирование заказов по условиям поставок"');
  if getfirst mnplan <> tsOK then {
     mylog('if getfirst mnplan <> tsOK | EXIT');
      exit;
    }

   var _guid : string = olegenerateguid;
//  SqlExecStmt(stmt, 'aaa3()');

//  message(sql_str);
  MyLog('guid сессии расчета '+_guid);
  MyLog('формирование заказов');
  var _i : longint = 0;
  do {
    Delay(51);
    if not nextvisual {
      MyLog('Работа алгоритма прервана пользователем');
      exit;
    }
    if _i mod 37 = 0 { // 37*51/1000 = 1.8c обновляться будет визуализация
         SetVisualHeader('формирование заказов' +
          ''#13''+ 'Сформировано ' + string(_i));
       }
//    MyLog(' _i = ' + string(_i));
    _i++;
    if _i > 16428 then break;  // 15 минут работать будет
//    if _i > 16 then break;
  } while true

  MyLog('Сформировано '+string(_i)+' заказов');

  MyLog('Окончание. Очищение временных данных');
  MyLog('Конец. Успешно!');
  if VisualizationActive then stopvisual;
  result := true;
}
procedure Run(__cMnPlan : comp; __formPL : comp); {

  set _formPL := __formPL;
  if getfirst formpl <> tsOK {exit;}

  if run_real(__cMnPlan) {
      if VisualizationActive then stopvisual;
    Message('Выполнение алгоритма успешно');
  }
  else {
  if VisualizationActive then stopvisual;
    Message('При выполнении алгоритма возникли ошибки',error);
  }
  if VisualizationActive then stopvisual;
  //ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол');
  RunProtocol;
}
end.
