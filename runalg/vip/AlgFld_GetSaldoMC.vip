/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,2004 корпорация ГАЛАКТИКА                    ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Планирование                                              ║
 ║ Версия        : 7.11                                                      ║
 ║ Назначение    : Объектный "Системный интерфейс" N_01                      ║
 ║ Ответственный : Климович Виктор Леонидович (VICTOR)                       ║
 ║ Параметры     : нет                                                       ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
#define OBJINT_ALGORITM
#include OBJINTPL.VIN
#include oAlgFldSys.vih
#include oEdIzm.vih        // сервис работы с единицами измерения
//#include RestOnHandFunc.vih
#component "M_MnPlan"
VipInterface iAlgFld_GetSaldoMC Implements oAlgFld_Sys #Licensed_Free;
Interface iAlgFld_GetSaldoMC '' EscClose,doAccept;
//  show at (10, 2, 100, 22);

table struct CachePL
(
  cIzd       : comp,
  cPodr      : comp,
  NameFld    : string,
  vtime      : _datetime
)
with Index
(
 CachePL01 = cIzd + cPodr,
 CachePL02 = vtime
 );

create view
 var _logFile : string = '';

from
 FormPl,
 CachePl,
 SaldoMc
;
Var FormPlOwner    : comp;
Var stFormPlSetup  : TFormPl;
//Var MainCalcObject : ObjRestOnHandFunc;
Var wReservType : word;
/////////////////////////////////////////////////////////
// Кеширование
/////////////////////////////////////////////////////////
 var startDTCache : _datetime; // время и дата последнего обнуления
 var MaxRecCache  : comp;      // сколько записей максимум
 var MaxTime100   : comp;      // сколько милисекунд хранить



procedure MyLog(_log : string); {
exit;
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'mylog_iAlgFld_GetSaldoMC_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
  logstrtofile(_logFile,DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') +'| ' +_log);
}


Procedure DeleteCache;
  {
  delete all CachePL;
  startDTCache := _CurDateTime;

  }

Procedure CheckCache;
  {
  if ( _CompareDateTime (
       _SubSec100(_CurDateTime,MaxTime100),
       startDTCache)<> -1
       )
    {
    //Message('CheckCache' + startDTCache,Information);
    DeleteCache;
    }

  if ( RecordsInTable(#CachePL) > MaxRecCache )
    {
    //Message('RecordsInTable(#CachePL) ' + RecordsInTable(#CachePL),Information);
    DeleteCache;
    }

  }

Function GetCache( _cIzd, _cPodr : comp; var NameFld : string ) : Boolean;
  {
  CheckCache;

  GetCache := False;
  if ( getfirst CachePL
        where (( _cIzd  == CachePL.cIzd
             and _cPodr == CachePL.cPodr
        )) = tsOK )
    {
    NameFld  := CachePL.NameFld;
    GetCache := True;
    }
  }

Function SetCache( _cIzd, _cPodr : comp; NameFld : string  ) : Boolean;
  {
  SetCache := False;

  CheckCache;

  if ( getfirst CachePL
        where (( _cIzd  == CachePL.cIzd
             and _cPodr == CachePL.cPodr
        )) = tsOK )
    {
    CachePL.NameFld := NameFld;
    update current CachePL;
    }
  else
    {
      CachePL.cIzd    := _cIzd;
      CachePL.cPodr   := _cPodr;
      CachePL.NameFld := NameFld;
      CachePL.vtime   := _CurDateTime;
     insert current CachePL;
    }
  }

////////////////////////////////////////////////////////////


Function GetNameInter : string;
  {
  GetNameInter := 'iAlgFld_GetSaldoMC' ;
  }

Function GetNameInterPr : string;
  {
  GetNameInterPr := 'iAlgFld_GetSaldoMC_Setup' ;
  }

Function GetNum : word;
  {
  GetNum := 7901 ;
  }

Function GetName : string;
  {
  GetName := 'Текущее наличие на складе для заданной МЦ по подразделению' ;
  }

Function CheckEnableUseAlgFld ( Var FlagParam : LongInt; NameInterFace : string ) : boolean;
  {
  CheckEnableUseAlgFld := True;
//  if ( LoCase(NameInterFace) = 'iinterfsys_01' )
//    {
//    CheckEnableUseAlgFld := True;
//    }
//  else
//    {
//    Message('Данный алгоритм вычисляемого поля работает только в системном интерфейсе N5001',Warning);
//    CheckEnableUseAlgFld := False;
//    }
  }

Function GetNameColumn ( Var FlagParam : LongInt ) : string;
  {
  GetNameColumn :='Наличие';
  }


#declare getcPodr(npp)
  if FormPl.RESCOMP[1] = stSpMnPlan.cRoleAn#npp and stSpMnPlan.wKodGr#npp = 2 {
    Result := stSpMnPlan.cAnVal#npp;
    exit;
  }
#end
function GetCPOdr(stSpMnPlan : TSpMnPlan ) : comp; {
  result := 0h;
 #getcPodr(1)
 #getcPodr(2)
 #getcPodr(3)
 #getcPodr(4)

 #getcPodr(5)
/*
 #getcPodr(6)
 #getcPodr(7)
 #getcPodr(8)
 #getcPodr(9)
*/
}
Function GetNameFld ( stSpMnPlan : TSpMnPlan; stSpMnPl : TSpMnPl ) : string;
{
  GetNameFld := '0';
  Var bHs : boolean;
  Var dReserv : double;

  dReserv := 0;

  var _cPodr : comp = GetCPOdr(stSpMnPlan);
   if _cPodr = 0h {
     exit;
   }
  bHs := GetCache( stSpMnPlan.cIzd, _cPodr, GetNameFld );


  mylog('GetNameFld stSpMnPl.nrec='+string(stSpMnPl.nrec,0,0));
  mylog('GetNameFld bHs=' +string(bHs));
  mylog('GetNameFld _cPodr=' +string(_cPodr,0,0));

  if ( not bHs )
  {

      var varData : date;
      var varNal : Double;

      varData := Cur_Date();
//      ReInitMcInfo(varData);
//      if (FormPl.ResWord[2] = 1)
//        SkladProizv(0);
//      else
//        SkladProizv(1);
//      varNal := NalT(varData, stSpMnPlan.cIzd, 0, 0, 0);
    mylog('GetNameFld FormPl.ResWord[2]=' +string(FormPl.ResWord[2]));
    case FormPl.ResWord[2] of
     0:
    {
        if ( GetLast SaldoMC where (( cgVidUchO_Sklad  ==  SaldoMC.SP          and
                                       stSpMnPlan.cIzd ==  SaldoMC.cMC         and
//                                       0               ==  SaldoMC.cMol        and
                                       _cPodr               ==  SaldoMC.cPodr       and
//                                       0               ==  SaldoMC.cParty      and
                                       ZeroDate        <<= SaldoMC.dSaldo (noindex)      and
                                       varData         >>= SaldoMC.dSaldo (noindex))) = tsOk )
        varNal := SaldoMC.Kol;
        if ( GetLast SaldoMC where (( cgVidUchO_UPL    ==  SaldoMC.SP          and
                                       stSpMnPlan.cIzd ==  SaldoMC.cMC         and
//                                       0               ==  SaldoMC.cMol        and
                                       _cPodr               ==  SaldoMC.cPodr       and
//                                       0               ==  SaldoMC.cParty      and
                                       ZeroDate        <<= SaldoMC.dSaldo (noindex)     and
                                       varData         >>= SaldoMC.dSaldo (noindex) )) = tsOk )
        varNal := varNal + SaldoMC.Kol;
    }
    1:
    {
        if ( GetLast SaldoMC where (( cgVidUchO_Sklad  ==  SaldoMC.SP          and
                                       stSpMnPlan.cIzd ==  SaldoMC.cMC         and
//                                       0               ==  SaldoMC.cMol        and
                                       _cPodr               ==  SaldoMC.cPodr       and
//                                       0               ==  SaldoMC.cParty      and
                                       ZeroDate        <<= SaldoMC.dSaldo (noindex)     and
                                       varData         >>= SaldoMC.dSaldo (noindex) )) = tsOk )
        varNal := SaldoMC.Kol;
        else
        varNal := 0;
    }
    2:
    {
        if ( GetLast SaldoMC where (( cgVidUchO_UPL    ==  SaldoMC.SP          and
                                       stSpMnPlan.cIzd ==  SaldoMC.cMC         and
//                                       0               ==  SaldoMC.cMol        and
                                       _cPodr               ==  SaldoMC.cPodr       and
//                                       0               ==  SaldoMC.cParty      and
                                       ZeroDate        <<= SaldoMC.dSaldo (noindex)     and
                                       varData         >>= SaldoMC.dSaldo (noindex) )) = tsOk )
        varNal := SaldoMC.Kol;
        else
        varNal := 0;
    }

    end; // case
//      MainCalcObject.ModeRestMcOnHand(FormPl.ResWord[2]*3, 0);
//      MainCalcObject.GetRestMcOnHand(Cur_Date(), stSpMnPlan.cIzd, 0, 0, 0);

//      if (FormPl.ResWord[1] = 1)
      GetNameFld := string(fEdIzm.ConvertToSecondEd( varNal, 0, stSpMnPlan.cOtpEd ));
    mylog('GetNameFld result=' +GetNameFld);
//      DoneMcInfo;
    SetCache( stSpMnPlan.cIzd, _cPodr, GetNameFld );
  }
}

Function CheckSpMnPlan_SpMnPl (  FlagMode : word; stSpMnPlan : TSpMnPlan; stSpMnPl : TSpMnPl ) : boolean;
  {
  CheckSpMnPlan_SpMnPl := True;
  }

Function GetPropFld ( stSpMnPlan : TSpMnPlan; stSpMnPl : TSpMnPl;  FlagProp : LongInt ) : comp;
  {
  GetPropFld := comp(0);
  case FlagProp of
       // Данный алгоритм не поддерживает интерфейс выбора
    1: GetPropFld := comp(0)
  end; // case
  }

Function GetPickInterface ( Var  FlagParam : LongInt; stSpMnPlan : TSpMnPlan; stSpMnPl : TSpMnPl ) : comp;
  {
  GetPickInterface := comp(0);
  Message('Интерфейс выбора для алгоритма вычисляемого поля iAlgFld_GetSaldoMC ',Information);
  }

#define S st.push('
#define E ');

Function GetMemo ( st:oSteckCommonString ) : Boolean;
  {
  #s     Возвращает текущее наличие на складе для заданной МЦ по подразделению    #e
  GetMemo := True;
  }

    // Получить установить параметр
Function SetGetParam ( Var  FlagParam : LongInt;
                       Var  Direction : word;
                       Var  cValue    : Comp  ;
                       Var  dValue    : TSumma;
                       Var  lValue    : LongInt;
                       Var  wValue    : Word  ;
                       Var  dtValue   : Date  ;
                       Var  dttValue  : _DateTime;
                       Var  sValue    : s250  ) : Boolean;
  {
  SetGetParam := True;
      // Направление - установить параметр
  if (  ( Direction and 1 ) > 0)
    case FlagParam of
        //
      1: {
         if ( GetFirst Formpl where (( cValue == FormPl.NRec )) = tsOk )
           {
           FormPlOwner := cValue;
           stFormPlSetup := TFormPl(FormPl.buffer);
           }
         else
           SetGetParam := False;
         }
    end;
  }

Function InitInter ( ccFormPl : comp; FlagParam : LongInt ) : Boolean;
{
  InitInter := True;
  MaxRecCache  := 700;      // сколько записей максимум
  MaxTime100   := 500;  // 1.5min // интервал в сотых долях секунды
  if ( GetFirst FormPl where (( ccFormPl == FormPl.NRec )) = tsOk )
  {
    if (FormPl.ResWord[2] > 0)
    {
//       if(not LoadVipRef(MainCalcObject, 'RestOnHandFunc'))
//         Message('Не загрузился интерфейс < RestOnHandFunc >' )
    }
    FormPlOwner := ccFormPl;
    stFormPlSetup := TFormPl(FormPl.buffer);
  }
}
Function DoneInter : Boolean;
{
  DoneInter := True;
//   if ( not NullVipRef (MainCalcObject))
//     FreeVipInterface(MainCalcObject)
}

HandleEvent
cminit:{}
cmOnVipUnload:
 {
// Message('cmOnVipUnload_SpSpPl02',Information);
 }
end;
End.

#component "M_MnPlan"
VipInterface iAlgFld_GetSaldoMC_Setup Implements oAlgFldSetup Licensed(Free) parameters(cFormPl: comp);
Interface iAlgFld_GetSaldoMC_Setup 'Настройка' (,hcZakaz_AlgSetup7001,) EscClose,doAccept;
  Show at (,,55,20);

Create View
Var
 cFormPl : Comp;
As Select
 FormPl.*
From
   FormPl
 , KatRole
 , KatRole KatRoleBr
 , RoleKAU RoleKAUBr
 , KatKAU  KatKAUBr
Where ((
                      cFormPl ==  FormPl.NRec
        and FormPl.RESCOMP[1] == KatRole.nrec
         and KatRoleBr.NRec  /== RoleKAUBr.cRole
      and RoleKAUBr.KodGrKau /== KatKAUBr.KodGroup
       and (RoleKAUBr.KodGrKau = 2)
      ))
 ;

Parameters
 cFormPl;

//=======================================================================
//'ИНИЦИАЛИЗАЦИЯ ИНТЕРФЕЙСА
//-----------------------------------------------------------------------
Function asInitInter( p_cFormPl:Comp ) : Boolean;
{
 asInitInter := True;
}

//=======================================================================
//'ЗАВЕРШЕНИЕ РАБОТЫ С ИНТЕРФЕЙСОМ
//-----------------------------------------------------------------------
Function asDoneInter : Boolean;
{
 asDoneInter := True;
}

//=======================================================================
//'ПО КОМАНДЕ CMSETDEFAULT
//-----------------------------------------------------------------------
Procedure asOnCmSetDefault;{
 //'
}

//=======================================================================
//'ПРИ ВСТАВКЕ НАСТРОЙКИ В ШАБЛОН
//-----------------------------------------------------------------------
Procedure asOnSetWayAccou( p_cWayAccou:Comp );{
 //'
}
window winKatRole 'Выбор роли с аналитикой-подразделение', cyan;
browse brKatRole;
 table KatRoleBr;
fields
 KatRoleBr.code  : [5], protect, nopickbutton;
 KatRoleBr.name  : [10],protect, nopickbutton;
end;
end;
windowevent winKatRole ;
 cminit: {
  if getfirst KatRolebr <> tsOK {
    message('Не найдено ни одной роли, содержащей аналитику-подразделение',error);
    stop; abort; exit;
  }
 }
 cmdefault: {
   closewindowex(winKatRole, cmDefault)
 }
end;

Panel Panel1;
Screen ScrAlgFldSetup_01  'Настройка'(,,sci1Esc);
Fields
   FormPl.ResWord[1] ('При отображении наличия учитывать резерв',,): noprotect;
   FormPl.ResWord[2] ('Тип расчета',,): noprotect;
   KatRole.name ('Роль аналитики',,): protect, pickbutton;
buttons
  cmValue1 , Default, ,'Сохранить',,sci1Esc;
<<

   [.] Наличие с учетом резерва`

   (.) Учитывать складские и производственные остатки`
   (.) Учитывать складские остатки`
   (.) Учитывать производственные остатки`

Роль с аналитикой-подразделение.@@@@@@@@@@@@@@@@@@@@@@

                  <. Закрыть .>
>>
end;
end;
//Panel Panel1;
//Table FormPl;
//Screen OtchPrm  'Настройка'(,,sci1Esc);
//fields
//  FormPl.ResCode[1] ('Название колонки для вычисляемого поля',,): noprotect;
//buttons
//  cmValue1 , Default, ,'Сохранить',,sci1Esc;
//  cmCancel,,,'Отмена',,sci1Esc;

//<<
//  Название колонки для вычисляемого поля
//      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


//          <.Сохранить .>          <. Отмена .>

//>>
//end;
//end;
//Panel pnFormPl;
//Table FormPl;
//HandleEvent  //'panel

//cmPick:
//  {
//  }

//cmUpdateRecord :
//  Update Current FormPl;

//cmCheckField:
//  {
//  }

//End;  //'he panel
//End;  //'panel

//=======================================================================
HandleEvent  //'he interface
//-----------------------------------------------------------------------
cmInit: {
  if (GetFirst FormPl <> tsOk)
  {
    Message(''#3'Ошибка поиска в таблице пользовательских алгоритмов  < FormPl > ',Error+CancelButton);
    Abort;
    Exit;
  }

  if (FormPl.ResWord[2] > 0)
    ClearFieldState(#FormPl.ResWord[1],sfVisible);
  else
    SetFieldState(#FormPl.ResWord[1],sfVisible);
}

cmCancel: {
  setModified(False);
  }

cmValue1:  {
  update current FormPl;
  CloseInterface(cmDefault) ;
  }
cmCheckField: {
  if (FormPl.ResWord[2] > 0)
    ClearFieldState(#FormPl.ResWord[1],sfVisible);
  else
    SetFieldState(#FormPl.ResWord[1],sfVisible);
  update current FormPl;
 }
cmPick: {
  case curfield of
    #KatRole.name : {
      if runwindowmodal(winKatRole) = cmDefault {
        set FormPl.RESCOMP[1] := KatRoleBr.NRec;
        update current FormPl;
      }
    }
  end;
  rereadrecord;
 }
End;  //'he interface
End.  //'interface
