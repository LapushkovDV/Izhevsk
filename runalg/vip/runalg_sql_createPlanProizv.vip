/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#include Query.vih
#include objintpl.vin
#include runalg_sql_createPlanProizv.vih

#component "M_MnPlan"
table struct tddate (
 ddate : date
)
with index (
 ind0 = ddate
)
;
Interface runalg_sql_createPlanProizv 'Создание плана производства на основе плана сбыта';
create view
var _logFile : string = '';
    _cMnPlan : comp;

    _startDateRaspred
  , _EndDateRaspred : date;

    _STATUS_PLAN
  , _cGRAFIK
  , _CVIDPROD_not_need_raspr : comp;

as select
 mnplan.nrec
from
   mnplan
 , mnplan snmnplan
 , BUFSPPLAM2
 , SpSloj
 , MnAnal
 , SpGraf

 , tddate
 , KatNotes
 , Grafik
 , katparty

 where ((
                      _cMnPlan == MnPlan.nrec
              and _STATUS_PLAN == KatNotes.Nrec
                  and _cGRAFIK == GRAFIK.nrec
  and _CVIDPROD_not_need_raspr == katparty.nrec
       ))

;

procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'runalg_sql_createPlanProizv_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
  logstrtofile(_logFile,DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') +'| ' +_log);
}

procedure filltddate(_guid : string); {
  if getfirst tddate = tsOK then exit;

  _try {
    sql
     select distinct
      PlanDate as ddate
     from bufspplam2
     where sRas = :(_guid)
    into tddate;
  }
   _except else {var _empty : boolean = false;} //чтобы компилятор ничего не говорил
}

function get_grafik_sloj_npp(_cMnPlan : comp) : word; cacheable;{
 result := 0h;
  if getfirst snMnPlan where ((_cMnPlan == snMnPlan.nrec)) <> tsOK then {
      MyLog('function get_grafik_sloj_npp if getfirst snMnPlan where ((_cMnPlan == snMnPlan.nrec)) <> tsOK | _cMnPlan = ' + string(_cMnPlan,0,0)) ;
      exit;
    }

  if getfirst spsloj where  (( snMnPlan.cSloj == SpSloj.cMain
                         and  cgKau_Grafik    == SpSloj.kodGrKau)) <> TSok THEN {
      MyLog('function get_grafik_sloj_npp if getfirst spsloj where  (( snMnPlan.cSloj == SpSloj.cMain and  cgKau_FpPeriod  == SpSloj.kodGrKau)) <> TSok | _cMnPlan = ' + string(_cMnPlan,0,0)) ;
      exit;
    }
  result := spsloj.npp;
}

function createmnanal(_cMnPlan : comp) : boolean; {

   result := false;
  if getfirst snMnPlan where ((_cMnPlan == snMnPlan.nrec)) <> tsOK then {
      MyLog('function getcreatemnanal if getfirst snMnPlan where ((_cMnPlan == snMnPlan.nrec)) <> tsOK') ;
      exit;
    }
  if get_grafik_sloj_npp(_cMnPlan) = 0 {
    exit;
  }
  var _cDefaultGrafik : comp =  cogettune('DEFAULTGRAFIKPLAN');
  _loop tddate {

        if getfirst spGraf where ((_cDefaultGrafik == spGraf.CGRAFIK
                           and tddate.ddate == spGraf.ddate )) <> tsOK {
             MyLog('function getcreatemnanal _cGrafik = '+string(_cGrafik,0,0) + ' tddate.ddate = ' + datetostr(tddate.ddate,'DD/MM/YYYY'));
             MyLog('function getcreatemnanal if getfirst spGraf where ((_cGrafik == spGraf.CGRAFIK and tddate.ddate == spGraf.ddate )) <> tsOK');
             MyLog('Exit');
             exit;
           }
        var _cSpGrafik : comp = spGraf.nrec;
        if(getfirst mnanal where ((SNMnPlan.cSloj == MnAnal.cSloj
                                           and 0h == MnAnal.cBlock
                                 ))
                                 and MnAnal.fldAn1  = if(SpSloj.Npp = 1,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn2  = if(SpSloj.Npp = 2,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn3  = if(SpSloj.Npp = 3,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn4  = if(SpSloj.Npp = 4,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn5  = if(SpSloj.Npp = 5,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn6  = if(SpSloj.Npp = 6,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn7  = if(SpSloj.Npp = 7,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn8  = if(SpSloj.Npp = 8,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn9  = if(SpSloj.Npp = 9,  _cSpGrafik, 0h)
                                 and MnAnal.fldAn10 = if(SpSloj.Npp = 10, _cSpGrafik, 0h)
                                 and MnAnal.atl_Branch = GetCurrentBranch
           ) <> tsOK {
                 insert MnAnal set
                    MnAnal.cSloj   := SNMnPlan.cSloj
                  , MnAnal.cBlock  :=  0h
                  , MnAnal.fldAn1  := if(SpSloj.Npp = 1,  _cSpGrafik, 0h)
                  , MnAnal.fldAn2  := if(SpSloj.Npp = 2,  _cSpGrafik, 0h)
                  , MnAnal.fldAn3  := if(SpSloj.Npp = 3,  _cSpGrafik, 0h)
                  , MnAnal.fldAn4  := if(SpSloj.Npp = 4,  _cSpGrafik, 0h)
                  , MnAnal.fldAn5  := if(SpSloj.Npp = 5,  _cSpGrafik, 0h)
                  , MnAnal.fldAn6  := if(SpSloj.Npp = 6,  _cSpGrafik, 0h)
                  , MnAnal.fldAn7  := if(SpSloj.Npp = 7,  _cSpGrafik, 0h)
                  , MnAnal.fldAn8  := if(SpSloj.Npp = 8,  _cSpGrafik, 0h)
                  , MnAnal.fldAn9  := if(SpSloj.Npp = 9,  _cSpGrafik, 0h)
                  , MnAnal.fldAn10 := if(SpSloj.Npp = 10, _cSpGrafik, 0h)
                 ;
           }
    }
   result := true;
}

Procedure MysqlAddStr(var query_handle: longInt; add_query_str: string); {
   sqlAddStr(query_handle, add_query_str);
   MyLog('sql: ' + add_query_str);
} //Function MysqlAddStr(var query_handle: longInt; add_query_str: string): longInt;

window winSetParams;
Screen ScrSetParams (,,sci13Esc);
Table mnPlan;

Fields

  MnPlan.Name     ('') : skip, NoStatic;
  _startDateRaspred ('График нерабочих дней', , ), Noprotect, {Font = {backcolor = if(_startDateRaspred= to_date(0,0,0), colorneed,0);}};

  Katnotes.name   ('Статус плана сбыта', , )   , protect, PickButton, {Font = {backcolor = if(not isvalidall(tnKatnotes), colorneed,0);}};
  Grafik.Name     ('График нерабочих дней', , ), protect, PickButton,{Font = {backcolor = if(not isvalidall(tnGrafik), colorneed,0);}};
  KatParty.Name   ('Вид продукции НЕ для распределения', , ), protect, PickButton, {Font = {backcolor = if(not isvalidall(tnKatParty), colorneed,0);}};
buttons
  cmValue1 , Default, ,'Сохранить',,sci1Esc;
  cmCancel,,,'Отмена',,sci1Esc;

<<'Установка параметров'
`      Плановый документ`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`   Начальная дата плана`.@@@@@@@@@@@@

`    Статус плана сбыта для обработки`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`               График нерабочих дней`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Вид продукции по которому НЕ надо распределять дни`.@@@@@@@@@@@@@@@


               <.Сохранить .>          <. Отмена .>
>>
End;  //'screen
end;
windowevent winSetParams;
 cmValue1: {
  if _startDateRaspred = to_date(0,0,0) {
    message('Не указана начальная дата плана производства',error);
    stop; abort; exit;
  }

  if not isvalidall(tnKatnotes) {
    message('Не указан статус плана сбыта',error);
    stop; abort; exit;
  }
  if not isvalidall(tnGrafik) {
    message('Не указана график',error);
    stop; abort; exit;
  }
  if not isvalidall(tnKatParty) {
    message('Не указан вид продукции по которому не надо производить распределение по дням',error);
    stop; abort; exit;
  }

   closewindowex(winSetParams, cmDefault);
 }
end;

function Run_real(__cMnPlan : comp) : boolean; {
  result := False;
  set _cMnPlan := __cMnPlan;
  set _logFile := '';

 MyLog('Старт алгоритма');
 if getfirst mnplan <> tsOK then {
   mylog('if getfirst mnplan <> tsOK. exit');
   exit;
  }

//  var _STATUS_PLAN, _cGRAFIK, _CVIDPROD_not_need_raspr : comp;

 set _startDateRaspred := mnplan.startdate;
 if runwindowmodal(winSetParams) <> cmdefault {
   mylog('Пользователь отменил расчет');
   exit;
  }

 set _EndDateRaspred := add_day(add_months(_startDateRaspred,4),-1);


 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Всем оставаться на месте! Работает СУБД 0_о' , 1);
 setvisualheader('Группировка спецификаций планов сбыта, распределение по датам (первые 4 месяца)');

 var _guid : string = olegenerateguid;
 var stmt: longInt = 0;
  stmt := sqlAllocStmt;

  var sql_str : string = 'BUFSPPLAM2(   ''' + _guid + ''' '
                                   + ', #comp(' + string(_cGRAFIK) + ')'
                                   + ', #date(' + datetostr(_EndDateRaspred,'DD,MM,YYYY') + ')'
                                   + ', #comp(' + string(mnplan.nrec) + ')'
                                   + ', #comp(' + string(_CVIDPROD_not_need_raspr) + ')'
                                   + ', #comp(' + string(_STATUS_PLAN) + ')'
                                 + ')';

//  message(sql_str);
  MyLog('выполнение запроса '+sql_str);
  sqlPrepare(stmt, sql_str);

  if sqlExecute(stmt) = tsOk {
     if getfirst BUFSPPLAM2 where ((_guid == BUFSPPLAM2.sRas)) = tsOK {
     } else {
        //message('Нет записей BUFSPPLAM2', error);
          MyLog('ОШИБКА!Нет записей BUFSPPLAM2');
       if VisualizationActive then stopvisual;
      exit;
     }
   } else {
    //message('error sqlExecute(stmt)', error);
    MyLog('ОШИБКА!error sqlExecute(stmt)');
    if VisualizationActive then stopvisual;
    exit;
   }
  sqlFreeStmt(stmt);
   MyLog('Запрос выполнен');


   filltddate(_guid);
   if getfirst tddate <> tsOK {
       MyLog('Не удалось заполнить таблицу tddate');
       MyLog('exit');
       if VisualizationActive then stopvisual;
      exit;
    }

  createmnanal(mnplan.nrec);

  var _resStMt : longint = 0;


  SetVisualheader('Удаление нулевых записей');

  MyLog('Старт. Удаление нулевых записей');

  stmt := sqlAllocStmt;
  sql_str := 'delete from BUFSPPLAM2 where sRas = '''+_guid+ ''' and BUFSPPLAM2.RasprKol = 0';
//  message(sql_str);
  MyLog('выполнение запроса '+sql_str);
  sqlPrepare(stmt, sql_str);
  _resStMt := sqlExecute(stmt);
  if  _resStMt != tsOk  {
    //message('error sqlExecute(stmt)', error);
    MyLog('ОШИБКА! error sqlExecute(stmt) = ' + string(_resStMt));
    if VisualizationActive then stopvisual;
    exit;
   }
  MyLog('Окончание. Удаление нулевых записей');

     if getfirst BUFSPPLAM2 where ((_guid == BUFSPPLAM2.sRas)) <> tsOK {
        //message('Нет записей BUFSPPLAM2', error);
       MyLog('ОШИБКА!Нет записей BUFSPPLAM2');
       if VisualizationActive then stopvisual;
      exit;
     }


  sqlFreeStmt(stmt);
  stmt := 0;
/*начало BUFSPPLAM2.tPlan = 1*/
  SetVisualheader('Вставка SPMNPLAN/ BUFSPPLAM2.sRas = '''+_guid+''' ');

  MysqlAddStr(stmt, 'insert into SPMNPLAN (CMNPLAN, STARTDATE, EDTIME, TYPEIZD, CIZD, CROLEIZD');
  MysqlAddStr(stmt, '                     ,CROLEAN1, WKODGR1,CANVAL1');
  MysqlAddStr(stmt, '                     ,CROLEAN2, WKODGR2,CANVAL2');
  MysqlAddStr(stmt, '                     ,CROLEAN3, WKODGR3,CANVAL3');
  MysqlAddStr(stmt, '                     )                         ');
  MysqlAddStr(stmt, 'select  distinct                               ');
  MysqlAddStr(stmt, '        MNPLAN.NREC, MNPLAN.STARTDATE, 1, BUFSPPLAM2.typeizd, BUFSPPLAM2.cIzd, #comp(400020974FA419FEh)   ');
  MysqlAddStr(stmt, '      , BUFSPPLAM2.roleVidpROD  , BUFSPPLAM2.KODKAUVidProd  , BUFSPPLAM2.cVidprod           ');
  MysqlAddStr(stmt, '      , BUFSPPLAM2.rolemodel    , BUFSPPLAM2.kodkaumodel    , BUFSPPLAM2.cmodel              ');
  MysqlAddStr(stmt, '      , BUFSPPLAM2.roleTechMarsh, BUFSPPLAM2.kodkauTechMarsh, BUFSPPLAM2.cTechMarch         ');
  MysqlAddStr(stmt, 'from BUFSPPLAM2');
  MysqlAddStr(stmt, 'JOIN MNPLAN ON MNPLAN.NREC = #comp('+string(mnplan.nrec)+')');
  MysqlAddStr(stmt, 'where BUFSPPLAM2.sRas = '''+_guid+ ''' ');

  MyLog('выполнение запроса на вставку SpMnPLan');
  _resStMt := sqlExecDirect(stmt);
  if _resStMt != tsOK {
    if VisualizationActive then stopvisual;
     MyLog('ОШИБКА! sqlExecDirect(stmt) = ' + string(_resStMt));
    exit;
  }
  MyLog('result = '+ string(_resStMt));
  sqlFreeStmt(stmt);
  stmt := 0;

  var _cDefaultGrafik : comp =  cogettune('DEFAULTGRAFIKPLAN');

  MysqlAddStr(stmt, 'insert into SPMNPL (    CMNPLAN, CSPMNPLAN, STARTDATE, ENDDATE,EDTIME,WKOLAN');
  MysqlAddStr(stmt, '                       ,typeizd, cizd, cotped, cRoleIzd                     ');
  MysqlAddStr(stmt, '                       ,RECOMDATE, cMnAnal                                  ');
  MysqlAddStr(stmt, '                       ,CROLEAN1, WKODGR1,CANVAL1                           ');
  MysqlAddStr(stmt, '                       ,CROLEAN2, WKODGR2,CANVAL2                           ');
  MysqlAddStr(stmt, '                       ,CROLEAN3, WKODGR3,CANVAL3                           ');
  MysqlAddStr(stmt, '                       ,CROLEAN8, WKODGR8,CANVAL8                           ');
  MysqlAddStr(stmt, '                       ,CROLEAN9, WKODGR9,CANVAL9                           ');
  MysqlAddStr(stmt, '                     )                                                      ');
  MysqlAddStr(stmt, 'select	 MNPLAN.NREC, SPMNPLAN.NREC, BUFSPPLAM2.plandate, BUFSPPLAM2.plandate, SPMNPLAN.EDTIME,52');
  MysqlAddStr(stmt, '        ,SPMNPLAN.TYPEIZD , SPMNPLAN.CIZD   , BUFSPPLAM2.cOtpEd, SPMNPLAN.cRoleIzd');
  MysqlAddStr(stmt, '        ,BUFSPPLAM2.plandate, MnAnal.Nrec                             ');
  MysqlAddStr(stmt, '        ,SPMNPLAN.CROLEAN1, SPMNPLAN.WKODGR1, SPMNPLAN.CANVAL1                                                              ');
  MysqlAddStr(stmt, '        ,SPMNPLAN.CROLEAN2, SPMNPLAN.WKODGR2, SPMNPLAN.CANVAL2                                                              ');
  MysqlAddStr(stmt, '        ,SPMNPLAN.CROLEAN3, SPMNPLAN.WKODGR3, SPMNPLAN.CANVAL3                                                              ');
  MysqlAddStr(stmt, '        ,SPMNPLAN.CROLEAN4, SPMNPLAN.WKODGR4, SPMNPLAN.CANVAL4                                                              ');
  MysqlAddStr(stmt, '        ,SPMNPLAN.CROLEAN5, SPMNPLAN.WKODGR5, SPMNPLAN.CANVAL5                                                              ');
  MysqlAddStr(stmt, 'from MNPLAN                                                                                                             ');
  MysqlAddStr(stmt, 'join SPMNPLAN on SPMNPLAN.CMNPLAN = MNPLAN.NREC                                                                             ');
  MysqlAddStr(stmt, 'join BUFSPPLAM2 on  ');
  MysqlAddStr(stmt, '        SPMNPLAN.TYPEIZD = BUFSPPLAM2.typeizd and SPMNPLAN.CIZD = BUFSPPLAM2.cIzd');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL1 = BUFSPPLAM2.cVidprod');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL2 = BUFSPPLAM2.cmodel      ');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL3 = BUFSPPLAM2.cTechMarch');
  MysqlAddStr(stmt, 'join GRAFIK on GRAFIK.NREC = #comp('+String(_cDefaultGrafik)+')');
  MysqlAddStr(stmt, 'join SPGRAF on SPGRAF.CGRAFIK = GRAFIK.NREC and SPGRAF.DDATE = BUFSPPLAM2.plandate');
  MysqlAddStr(stmt, '    join mnanal on MnAnal.cSloj = mnplan.cSloj AND MnAnal.cBlock = #COMP(0)');
  MysqlAddStr(stmt, '               and MnAnal.fldAn1 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 1 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn2 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 2 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn3 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 3 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn4 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 4 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn5 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 5 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn6 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 6 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn7 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 7 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn8 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 8 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn9 = '+if( get_grafik_sloj_npp(mnplan.nrec) = 9 , 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, '               and MnAnal.fldAn10= '+if( get_grafik_sloj_npp(mnplan.nrec) = 10, 'SpGraf.nrec','#comp(0h)'));
  MysqlAddStr(stmt, 'where MNPLAN.NREC = #comp('+String(mnplan.nrec)+') ');
 MysqlAddStr(stmt, '       and BUFSPPLAM2.sRas = '''+_guid+ ''' ');
  MyLog('выполнение запроса на вставку SpMnPL');

  _resStMt := sqlExecDirect(stmt);
  if _resStMt != tsOK {
    if VisualizationActive then stopvisual;
     MyLog('ОШИБКА! sqlExecDirect(stmt) = ' + string(_resStMt));
    exit;
  }
  MyLog('result = '+ string(_resStMt));
  sqlFreeStmt(stmt);
  stmt := 0;


  MysqlAddStr(stmt, 'Insert into valspmnp (CSPMNPL, num, EDTIME, KOL, TYPEFIELD[1], TYPEFIELD[2], TYPEFIELD[3], TYPEFIELD[4], TYPEFIELD[5]');
  MysqlAddStr(stmt, '                      , TYPEFIELD[6],TYPEFIELD[7], TYPEFIELD[8], TYPEFIELD[9], TYPEFIELD[10], TYPEFIELD[11], TYPEFIELD[12]');
  MysqlAddStr(stmt, '                      , TYPEFIELD[13], TYPEFIELD[14],COTPED)');
  MysqlAddStr(stmt, '    Select distinct spmnpl.nrec,1,1,BUFSPPLAM2.RasprKol,1,1,1,1,1,1,1,1,1,1,1,1,1,1, BUFSPPLAM2.COTPED');
  MysqlAddStr(stmt, 'from MNPLAN                                                                                                             ');
  MysqlAddStr(stmt, 'join SPMNPLAN on SPMNPLAN.CMNPLAN = MNPLAN.NREC                                                                             ');
  MysqlAddStr(stmt, 'join spmnpl    on spmnplan.nrec = spmnpl.cspmnplan    ');
  MysqlAddStr(stmt, 'join BUFSPPLAM2 on                                                               ');
  MysqlAddStr(stmt, '        SPMNPLAN.TYPEIZD = BUFSPPLAM2.typeizd and SPMNPLAN.CIZD = BUFSPPLAM2.cIzd');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL1 = BUFSPPLAM2.cVidprod');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL2 = BUFSPPLAM2.cmodel      ');
  MysqlAddStr(stmt, '    and SPMNPLAN.CANVAL3 = BUFSPPLAM2.cTechMarch');
  MysqlAddStr(stmt, 'where MNPLAN.NREC = #comp('+String(mnplan.nrec)+') ');
  MysqlAddStr(stmt, '       and BUFSPPLAM2.sRas = '''+_guid+ ''' ');

  MyLog('выполнение запроса на вставку SpMnPl BUFSPPLAM2.tPlan = 1');
  _resStMt := sqlExecDirect(stmt);
  if _resStMt != tsOK {
    if VisualizationActive then stopvisual;
     MyLog('ОШИБКА! sqlExecDirect(stmt) = ' + string(_resStMt));
    exit;
  }
  MyLog('result = '+ string(_resStMt));

  sqlFreeStmt(stmt);
  stmt := 0;

  stmt := sqlAllocStmt;
  sql_str := 'ENUMERATE_SPMNPLAN(#comp('+string(mnplan.nrec)+'))';
//  message(sql_str);
  MyLog('выполнение запроса '+sql_str);
  sqlPrepare(stmt, sql_str);
  if sqlExecute(stmt) != tsOk {
    //message('error sqlExecute(stmt)', error);
    MyLog('ОШИБКА!error sqlExecute(stmt)');
    if VisualizationActive then stopvisual;
    exit;
   }
  sqlFreeStmt(stmt);
  stmt := 0;

  MyLog('Окончание. Формирование документов');
  SetVisualheader('Очищение временных данных');
  MyLog('Старт. Очищение временных данных');
  stmt := sqlAllocStmt;
  sql_str := 'delete from BUFSPPLAM2 where sRas = '''+_guid+ ''' ';
//  message(sql_str);
  MyLog('выполнение запроса '+sql_str);
  sqlPrepare(stmt, sql_str);

  if sqlExecute(stmt) != tsOk  {
    //message('error sqlExecute(stmt)', error);
    MyLog('ОШИБКА! error sqlExecute(stmt)');
    if VisualizationActive then stopvisual;
    exit;
   }
  sqlFreeStmt(stmt);
  stmt := 0;

  MyLog('Окончание. Очищение временных данных');
  if VisualizationActive then stopvisual;
  result := true;
}
procedure Run(__cMnPlan : comp); {

  if run_real(__cMnPlan) {
      if VisualizationActive then stopvisual;
    Message('Выполнение алгоритма успешно');
  }
  else {
  if VisualizationActive then stopvisual;
    Message('При выполнении алгоритма возникли ошибки',error);
  }
  if VisualizationActive then stopvisual;
  ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол');
}
handleevent
cmpick: {

  case CurField of
    #katnotes.name: {
      if( RunInterface('L_DOGOVOR::GETSOMKATNOTES', piStatusPlan, word(0),word(0), False, _STATUS_PLAN) != cmCancel) {
        set _STATUS_PLAN := _STATUS_PLAN;
        if getfirst katnotes = tsOK {}
      }
    }
    #KatParty.Name:
    {
      var TempMarker : longint = InitMarker('',8,100,50,false);
      if RunInterface('F_GETAN::GtKodSet',cgiPick,10,_CVIDPROD_not_need_raspr,TempMarker,20011) <> cmCancel {

         set _CVIDPROD_not_need_raspr := _CVIDPROD_not_need_raspr;
         if getfirst katparty = tsOK {}
        }
      DoneMarker(TempMarker,'');
    }
    #Grafik.Name:
    {
      if (RunInterface('Z_CALENDAR::Grafik', _cGRAFIK, 0) <> cmCancel) {
        set _cGRAFIK := _cGRAFIK;
        if getfirst Grafik = tsOK {}
      }
    }
  end; // case
  rereadrecord;
}
end;
end.
