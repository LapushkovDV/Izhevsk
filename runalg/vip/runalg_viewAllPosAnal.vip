//------------------------------------------------------------------------------
//                                                      (c) корпорация ГАЛАКТИКА
// ГАЛАКТИКА 7.11 - Производственное планирование
// Редактирование спецификации нарядов
//------------------------------------------------------------------------------


//  ВНИМАНИЕ РАЗРАБОТЧИКАМ !!!!
//  В этом интерфейсе любая лишняя перерисовка может
//  привести к сильному торможению скорости  работы.
//  Поэтому очень осторожно добавляйте операторы
//  типа RereadRecord и т.п.
//
#define OBJINT_SETGETVID
#define OBJINT_ACCOUNT
//#define EnableConfig
//#define DebugMode

#include GtHashAn.vih //функции встроенного интерфейса "GetHashAn"
#include oDocMemo.vih
#include GetMnPln.vih
#include SpPlLine.vih
#include OBJINTPL.VIN
#include oCommonFunAlg.vih
#include oDecodeFun.vih
#include r_Disp.vih
#include oRegDoc.vih
#include Getkau.vih
#include oCalcFldPlan.vih
#include oRunAlgPlan.vih
#include oAlgFldSys.vih
#include oDocSpecFltr.vih
#include oiGetExData.vih  // описание объекта поиска данных
#include oSpecFltrIntrf.vih
#include oEdIzm.vih   // сервис работы с единицами измерения
#include marks.vih    // для выбора сотрудников бригады
#component "M_MnPlan"
VipInterface iInterfSys_99 Implements Util_ScrSp #Licensed_Free
;

#doc
Интерфейс редактирования спецификации нарядов</brief>
#end

Interface iInterfSys_99 'Просмотр поставок АВТОВАЗ' EscClose,doAccept; //, CustomSorting;
show at (,,,);

#include MnfDskFuncs.var

table struct tMainTable (
    mcnrec   : comp
  , mcname   : string
  , mcbarkod : string
  , orgname  : string
  , orgnrec  : comp
  , podrname : string
  , podrcnt  : word
)
with index (
   ind0 = mcnrec + orgnrec
 , ind1 = podrcnt
);
table struct tOrgPodrTable (
    mcnrec    : comp
  , orgnrec   : comp
  , podrnrec  : comp
  , podrname  : string
)
with index (
 ind0 = mcnrec + orgnrec + podrnrec
);
table struct tValueTable (
    mcnrec  : comp
  , orgnrec : comp
  , Value1  : double
  , Value2  : double
  , Value3  : double
  , Value4  : double
  , Value5  : double
  , Value6  : double
  , Value7  : double
  , Value8  : double
  , Value9  : double
  , Value10 : double
)
with index (
 ind0 = mcnrec + orgnrec
);


table struct tAnalMcOrgPodr (
     mcname      : string
   , mcnrec      : comp
/*
   , orgname     : string
   , orgnrec     : comp
   , podrname    : string
   , podrnrec    : comp
*/
   , modelname   : string
   , modelnrec   : comp
   , vidprodname : string
   , vidprodnrec : comp
)
with index (
 ind0 = mcnrec // + orgnrec
);

table struct tValueTableAnalRow (
    mcnrec      : comp
//  , orgnrec     : comp
//  , podrnrec    : comp
  , modelnrec   : comp
  , vidprodnrec : comp
  , Value1  : double
  , Value2  : double
  , Value3  : double
  , Value4  : double
  , Value5  : double
  , Value6  : double
  , Value7  : double
  , Value8  : double
  , Value9  : double
  , Value10 : double
)
with index (
 ind0 = mcnrec +
  //orgnrec + podrnrec +
 modelnrec + vidprodnrec
);

var
  //***

  gldt    : GlobData;
  GetN    : Util_GetName;
  isg     : SetGetVid;
  iSetType: TypeObjMnf;

procedure fillvaluetableAnalRow(__cmc : comp); forward;
procedure filltAnalMcOrgPodr(_cmc, _cOrg : comp); forward;
procedure fillvaluetable; forward;
create view
var
//***
    _curValueDate
  , _curValueDateRow : date = to_date(0,0,0);
  _tPlan : word;
    _GUID
  , _orgname : string;
  cpMnPlan,
  cMnplanTree,
  AnaliticNRecforEdIzm,
  UsedFilter  : comp;
  wvFieldsOn,
  EnableEdIzm,
  AnaliticKodGrforEdIzm,
  IzdAnPoint, // место аналитики Изделие: 0 - нет, 1..5 - заголовок, 6..8 - позиция
  EnableAnal_1,
  EnableAnal_2,
  EnableAnal_3,
  FiltrTypeIzd,
  FiltrRazr,
  FiltrSisOpl,
  FiltrCodTar : word;
  DeleteOption,
  DataOption  : word;
  DefaultEdIzm: word;
  SegmetSort_1,
  SegmetSort_2,
  SegmetSort_3,
  SegmetSort_4,
  SegmetSort_5,
  SegmetSort_6: word;
  CopyParam_1,
  CopyParam_2 : word;
  StrNameMultiPick      : string;
  StrCopy_1 : string;
//***
  wSprObject: word;
  cSprObject: comp;
  wSprBrigad: word;
  cSprBrigad: comp;
//***

  cLCurPos: comp;
as select
  '<<' (FieldName = isPokfirst),
   '<' (FieldName = isPokLeft),
   '>' (FieldName = isPokRight),
   '<10' (FieldName = isPokLeft10),
   '10>' (FieldName = isPokRight10),
  '>>' (FieldName = isPokLast),

  '<<' (FieldName = isPokfirstRow),
   '<' (FieldName = isPokLeftRow),
   '>' (FieldName = isPokRightRow),
   '<10' (FieldName = isPokLeft10Row),
   '10>' (FieldName = isPokRight10Row),
  '>>' (FieldName = isPokLastRow)


from

    MnPlan
  , MnPlan snMnPlan
  , SpMnPlan
  , tOrgPodrTable
  , tMainTable
  , tMainTable tMainTable_br
  , tValueTable
  , tValueTable tValueTable_br
  , tAnalMcOrgPodr
  , tAnalMcOrgPodr tAnalMcOrgPodr_br
  , tValueTableAnalRow
  , tValueTableAnalRow tValueTableAnalRow_br

where
  ((
                  cpMnPlan == MnPlan.nRec
    and tMainTable_br.MCnrec  == tValueTable_br.MCnrec
    and tMainTable_br.orgnrec == tValueTable_br.orgnrec

    and tAnalMcOrgPodr_br.mcnrec      == tValueTableAnalRow_br.mcnrec
//    and tAnalMcOrgPodr_br.orgnrec     == tValueTableAnalRow_br.orgnrec
//    and tAnalMcOrgPodr_br.podrnrec    == tValueTableAnalRow_br.podrnrec
    and tAnalMcOrgPodr_br.modelnrec   == tValueTableAnalRow_br.modelnrec
    and tAnalMcOrgPodr_br.vidprodnrec == tValueTableAnalRow_br.vidprodnrec
  ))

//order by tMainTable.mcbarkod
;

const
// константы полей SpMnPlan для отслеживания изменений
  flNum    =    1;
  flType   =    2;
  flObj    =    4;
  flEdIzm  =    8;
  flState  =   16;
  flPrior  =   32;
  flDateP  =   64;
  flDateF  =  128;
  flCond   =  256;
  flAn1    =  512;
  flAn2    = 1024;
  flAn3    = 2048;
end;

var
  stFormPlSetup   : TFormPl;
  FormPlOwner     : comp;
  pSpecFltrIntrf : oSpecFltrIntrf;
  wvFieldsOn_2    : word;
  wTreeOn         : boolean;
  cCurSpMnPl      : comp;
  MnPlancWayAccou : comp;
  cDelFiltName    : comp;
  CurTb           : longint; // текущий bouds
  StrNameManual1  : string;
  StrNameManual2  : string;
  StrNameManual3  : string;
  NullString      : string;
  EnableInitWindow: boolean;
  EnableTwoBrowse : boolean;
  EnableColorField: boolean;
  EnableCheckModifSpMnPlan: boolean;
  NameObjPlan: string;  //Название колонки для объекта планирования
  StrFltr       : string;
// настройка "Прочие"
  wRoundMethodNDE,          // методы округления
  wRoundMethodVal: word;
  dblPrecNDE,               // границы округления
  dblPrecVal     : double;
  sFormatKol,               // форматы вывода
  sFormatSumNDE,
  sFormatSumVal  : string;
  wBrModeOn      : word;    // бригадный режим: 0 - выключен, 1 - по документу, 2 - по позиции
  bBrSpreadDone  : boolean; // признак выполнения распределения
  ifcPickOptions : iPickOptions;                  // опции выбора сотрудников бригады
  ifcPAM         : iPersonalAccountMarks;         // выбранные сотрудники
  ifcPAMI        : iPersonalAccountMarksIterator; // навигация по выбранным сотрудникам
//***
  sTmp: string;
  cTmp: comp;
  wTmp: word;
  dTmp: double;
  lTmp: longint;
//***
  wSMPCheck: word;                // признаки изменения полей SpMnPlan
  awVisNum: array[0..0] of word;  // визуальный номер поля данных
  awDBNum : array[0..0] of word;  // номер поля данных в базе
//работа со встроенным интерфейсом
  acc           : Account;
  icf           : oCommonFunAlg;
  insTbl        : InsertTblMnpl;
  iSetPl        : SetupMnf;
  gKau          : OiWorkWithKAU;
  iom           : oMainVid;
  pDecodeFun    : oDecodeFun;
  pSteck        : SteckPar;
  ium           : Util_Common;
  iRARS         : oRARSDisp;
  RegDoc        : oMNFRegDoc;
  pCalcFldPlan  : oCalcFldPlan;
  pDocSpecFltr  : oDocSpecFltr;
  pRunAlgPlan   : oRunAlgPlan;
  pDocMemo      : oDocMemo;
  fGetHashAn    : GetHashAn; //Аналитики по МЦ (GtHashAn.vih)
  iGetKau       : ObjGetKau; // Переменная типа интерфейс GetKau

  ifcGetMKExData  : oiGetExData; // поиск расценок операций
  lPriceError     : TPtr;     // маркер позиций без расценок
  IndexNo         : longint;
  ifcPriceEvnLog  : oiEvnLog;    // журнал событий поиска расценок
  bPriceLogEnable : boolean;     // журнал событий поиска расценок доступен
  ifcGetMnCpExData: oiGetExData; // поиск мощности оборудования
  ifcRateEvnLog   : oiEvnLog;    // журнал событий поиска норм выпуска
  bRateLogEnable  : boolean;     // журнал событий поиска норм выпуска доступен
  stLogItem       : rELItem;     // элемент журнала событий
//***
  NameAnal : array [0..5] of string;
  NameSchPl: array [0..5] of string; // .. для представлений
//***
  CurSpMnPlNRec      : comp;
  stSpMnPlanRunAlg   : TSpMnPlan;
  stOldSpMnPlanRunAlg: TSpMnPlan;
  tma                : array[1..1] of TMnAnalParSt;
//'-------------------------------------' для быстрого поиска
  PoleForF    : array[1..6]  of word;
  TypeForF    : array[1..6]  of word;
  ValueForF   : array[1..6]  of comp;
  StrForF     : array[1..6]  of String;
  EnableFld   : array[1..1]  of word;
  FlagcmInsert: boolean;
  OnOffForFind,
  wDirect,
  wOptions,
  wPosStr,
  wMC         : word;


// Получить аббревиатуру документа по его типу
Function GetAbbrNameMnPlanForTypePlan ( CurType : word ): string;
  {
  GetAbbrNameMnPlanForTypePlan := 'Новый';
   case CurType of
    toPlan          : GetAbbrNameMnPlanForTypePlan := 'ПП';
    toNeedMt        : GetAbbrNameMnPlanForTypePlan := 'ПМт';
    toNeedTr        : GetAbbrNameMnPlanForTypePlan := 'ПТр';
    toNeedEq        : GetAbbrNameMnPlanForTypePlan := 'ПОб';
    toPlanSb        : GetAbbrNameMnPlanForTypePlan := 'ПСб';
    toPlanSnab      : GetAbbrNameMnPlanForTypePlan := 'ПСн';
    toMnfZakaz      : GetAbbrNameMnPlanForTypePlan := 'ПЗ';
    toPlanSvod      : GetAbbrNameMnPlanForTypePlan := 'ПСв';
#ifdef PlanOper
    toPlanOper      : GetAbbrNameMnPlanForTypePlan := 'ПО';
#end
    toCorpoNeed     : GetAbbrNameMnPlanForTypePlan := 'КПт';
    toCorpoDelivery : GetAbbrNameMnPlanForTypePlan := 'КППс';
    toCorpoManuf    : GetAbbrNameMnPlanForTypePlan := 'КППр';
    toCorpoBalance  : GetAbbrNameMnPlanForTypePlan := 'ПОст';
   end; // case
  }

Function SetTitleMnPlanInterf : boolean;
{
  SetTitleMnPlanInterf := True;

  Var str : string;
  if ( GetFirst snMnPlan where (( cpMnPlan == snMnPlan.NRec )) <> tsOk )
    Exit;

  str := 'Редактирование ';

  str := str + GetAbbrNameMnPlanForTypePlan(snMnPlan.TypePlan);

  if ( GetFirst WayAccou where (( snMnPlan.cWayAccou == WayAccou.NRec )) <> tsOk )
    Exit;

  str := str + ' : ' + WayAccou.Name;


  iom.GetMainScrPl.SetGetParam ( LongInt(102),
                                 word(1)    ,
                                 comp(0)    ,
                                 TSumma(0)  ,
                                 LongInt(0) ,
                                 word(0)    ,
                                 Date(0,0,0),
                                 _datetime(0,0,0,0,0,0,0),
                                 str );
}

function GetNameInter: string;
  {
  GetNameInter:= 'iInterfSys_99';
  }

function GetNameInterPr: string;
  {
  GetNameInterPr:= 'iInterfSetup_99';
  }

function GetNum: word;
  {
  GetNum:= 10099;
  }

function GetName: string;
  {
  GetName:= 'Представление для АВТОВАЗ';
  }

#define S st.push('
#define E ');

function GetMemo(st: oSteckCommonString): boolean;
  {
  #s           Представление для АВТОВАЗ                  #e
  GetMemo:= true;
  }

function CheckEnableUseInterface(SysNumVid: word; WayAccouNRec: comp; NumVid_WayAccou: comp; Flag: word): boolean;
var varWayAccouNRec, varNumVid_WayAccou : comp;
var varFlag : word;
  {
  varWayAccouNRec := WayAccouNRec;
  varNumVid_WayAccou := NumVid_WayAccou;
  varFlag := Flag;
   message('SysNumVid = ' + SysNumVid);
   result := true;
/*  if (SysNumVid = 29)
    CheckEnableUseInterface:= true;
  else
    {
    message('Данный интерфейс работает только с представлением << План снабжения >> ');
    CheckEnableUseInterface:= false;
    }
    */
  }


function SetGetParam(var FlagParam: longint;
                     var Direction: word;
                     var cValue   : comp;
                     Var dValue   : TSumma;
                     var lValue   : longint;
                     var wValue   : word;
                     var dtValue  : date;
                     var dttValue : datetime;
                     var sValue   : s250): boolean;
  {
  var Result: boolean; Result := false;
  var wCheckTune: word; wCheckTune := 0;

  var vdValue   : double;
  var vdtValue  : Date;
  var vdttValue : dateTime;
  var vsValue   : string;

  vdValue   := dValue;
  vdtValue  := dtValue;
  vdttValue := dttValue;
  vsValue   := sValue;


// Направление - установить параметр
  if ((Direction and 1) > 0)
    {
    case FlagParam of
      1:{//
        Result := (GetFirst FormPl where ((cValue == FormPl.nRec)) = tsOk);
        if (Result)
          {
          set FormPlOwner   := cValue; // зачем?!
//          message('stFormPlSetup = '+cValue);
          set stFormPlSetup := TFormPl(FormPl.buffer);
          awDBNum[1]        := stFormPlSetup.ResWord#_$(15);
          awDBNum[2]        := stFormPlSetup.ResWord#_$(16);
          awDBNum[3]        := stFormPlSetup.ResWord#_$(17);
          awDBNum[4]        := stFormPlSetup.ResWord#_$(18);
          awDBNum[5]        := stFormPlSetup.ResWord#_$(19);
          awDBNum[6]        := stFormPlSetup.ResWord#_$(20);
          awDBNum[7]        := stFormPlSetup.ResWord#_$(21);
          awDBNum[8]        := stFormPlSetup.ResWord#_$(22);
          awDBNum[9]        := stFormPlSetup.ResWord#_$(23);
          awDBNum[10]       := stFormPlSetup.ResWord#_$(24);
          awDBNum[11]       := stFormPlSetup.ResWord#_$(25);
          awDBNum[12]       := stFormPlSetup.ResWord#_$(26);
          awDBNum[13]       := stFormPlSetup.ResWord#_$(27);
          awDBNum[14]       := stFormPlSetup.ResWord#_$(28);
          awVisNum[1]       := stFormPlSetup.ResWord#_$(1);
          awVisNum[2]       := stFormPlSetup.ResWord#_$(2);
          awVisNum[3]       := stFormPlSetup.ResWord#_$(3);
          awVisNum[4]       := stFormPlSetup.ResWord#_$(4);
          awVisNum[5]       := stFormPlSetup.ResWord#_$(5);
          awVisNum[6]       := stFormPlSetup.ResWord#_$(6);
          awVisNum[7]       := stFormPlSetup.ResWord#_$(7);
          awVisNum[8]       := stFormPlSetup.ResWord#_$(8);
          awVisNum[9]       := stFormPlSetup.ResWord#_$(9);
          awVisNum[10]      := stFormPlSetup.ResWord#_$(10);
          awVisNum[11]      := stFormPlSetup.ResWord#_$(11);
          awVisNum[12]      := stFormPlSetup.ResWord#_$(12);
          awVisNum[13]      := stFormPlSetup.ResWord#_$(13);
          awVisNum[14]      := stFormPlSetup.ResWord#_$(14);

          if ((awDBNum[3] = 0 or awDBNum[3] > 14) or (awDBNum[6] = 0 or awDBNum[6] > 14))
            wCheckTune := wCheckTune or 1;
          if (awDBNum[9] = 0 or awDBNum[9] > 14)
            wCheckTune := wCheckTune or 2;
          if (awDBNum[10] = 0 or awDBNum[10] > 14)
            wCheckTune := wCheckTune or 4;
          if (awDBNum[7] = 0 or awDBNum[7] > 14)
            wCheckTune := wCheckTune or 8;
          if (awDBNum[1] = 0 or awDBNum[1] > 14)
            wCheckTune := wCheckTune or 16;
          if (MnPlan.nRec <> 0)
            {
            if (not ReadMyDSK(DefaultEdIzm, 'SpMnPlan_DefaultTypeEdIzm' + string(MnPlan.nRec) + UserName, true))
              DefaultEdIzm:= stFormPlSetup.ResWord#_$(31);
            }
          else
            DefaultEdIzm:= stFormPlSetup.ResWord#_$(31);
          }
        else
          {
          ReadMyDSK(DefaultEdIzm, 'SpMnPlan_DefaultTypeEdIzm' + string(MnPlan.nRec) + UserName, true);
          }
        }

    end;
    }

  SetGetParam := Result;
// Направление - получить параметр
  if ((Direction and 2) > 0)
    {
    case FlagParam of
      1:{ // Получить текущий номер ячейки по VtHor.NumAll
        wValue := 1;
        SetGetParam := true;
        exit;
        }
    end; // case
    }
  }



function SetWindowVid(sp: string): boolean;
var VarSp : string;
  {
  VarSp := sp;
  SetWindowVid:= true;
  }

// Возвращает текущую позицию
function GetCurPos(var pWlist: word): comp;
  {
  pWlist   := 0;
  GetCurPos:= SpMnPlan.nRec;
  }


window winShowAnalRow 'Расшифровка аналитики по позиции';
show at (,,150,20);
Screen scrwinShowAnalRow ;
  show at (,,, 1);
 table tMainTable_br;
  Fields
    tMainTable_br.mcname : skip;
    _orgname : skip;
<<'Просмотр информации по позиции'
.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
 browse brShowAnalRow ('',,sci1Esc);
// show at(,2,30,10);
   show at(,2,,);
 table tAnalMcOrgPodr_br;
  fixedLeft (//tAnalMcOrgPodr_br.orgname, tAnalMcOrgPodr_br.podrname,
        tAnalMcOrgPodr_br.modelname, tAnalMcOrgPodr_br.vidprodname, isPokfirstRow, isPokLeft10Row, isPokLeftRow) ;
  fixedRight (isPokRightRow, isPokRight10Row, isPokLastRow) ;
 fields
//   tAnalMcOrgPodr_br.orgname     'Поставщик'      headerAlign = centered:protect,[4];
//   tAnalMcOrgPodr_br.podrname    'Получатель'     headerAlign = centered:protect,[4];
   tAnalMcOrgPodr_br.modelname   'Модель'         headerAlign = centered:protect,[4];
   tAnalMcOrgPodr_br.vidprodname 'Вид продукции'  headerAlign = centered:protect,[4];
   isPokfirstRow          '' ('на первую дату') :  [2], protect,NoAutoSize;
   isPokLeft10Row         '' ('на предыдущую дату') :  [3], protect,NoAutoSize;
   isPokLeftRow           '' ('на предыдущую дату') :  [2], protect,NoAutoSize;
   tValueTableAnalRow_br.value1  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value2  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value3  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value4  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value5  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value6  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value7  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value8  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value9  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   tValueTableAnalRow_br.value10 '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect, browseSum(' ');
   isPokRightRow          '' ('на следующую дату') :  [2], protect,NoAutoSize;
   isPokRight10Row        '' ('на следующую дату') :  [3], protect,NoAutoSize;
   isPokLastRow           '' ('на последнюю дату') :  [2], protect,NoAutoSize;
 end;
end;
windowevent winShowAnalRow;
cmSetCurField :{
    case (Target) of

    end;
  }
  end;

//******************************************************************************
// основное окно интерфейса
//******************************************************************************
panel pnMain
table tMainTable_br;//,EventNavigation;
Browse tr1 (,, sci1EscTree);
//  NoMove,AlwaysShowHScroll;
  fixedLeft (tMainTable_br.mcbarkod, tMainTable_br.mcname, tMainTable_br.orgname, tMainTable_br.podrname, isPokfirst, isPokLeft10, isPokLeft) ;
  fixedRight (isPokRight, isPokRight10, isPokLast) ;
fields
  tMainTable_br.mcbarkod 'МЦ код' ('МЦ баркод') :  [5], protect, {button={command=cmValue2;picture='M_MNPLAN::bmpInformationBMP';hint='My button 1';hotkey=kbAltA}};
  tMainTable_br.mcname   'МЦ наименование' ('МЦ баркод') :  [10], protect,{button={command=cmValue2;picture='M_MNPLAN::bmpInformationBMP';hint='My button 1';hotkey=kbAltA}};
  tMainTable_br.orgname  'Поставщик' ('Поставщик') :  [5], protect, {button={command=cmValue3;picture='M_MNPLAN::bmpInformationBMP';hint='My button 1';hotkey=kbAltA}};
  tMainTable_br.podrname 'Потребитель' ('Потребитель') :  [5], protect;
  isPokfirst          '' ('на первую дату') :  [2], protect,NoAutoSize;
  isPokLeft10         '' ('на предыдущую дату') :  [3], protect,NoAutoSize;
  isPokLeft           '' ('на предыдущую дату') :  [2], protect,NoAutoSize;
  tValueTable_br.value1  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value2  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value3  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value4  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value5  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value6  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value7  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value8  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value9  '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  tValueTable_br.value10 '' ('') :  [3,'\2p[|-]36`666`666`666`666.88'], protect;
  isPokRight          '' ('на следующую дату') :  [2], protect,NoAutoSize;
  isPokRight10        '' ('на следующую дату') :  [3], protect,NoAutoSize;
  isPokLast           '' ('на последнюю дату') :  [2], protect,NoAutoSize;
end; // browse tr1

HandleEvent
 /*
cmRestoreDoc:
  {
//  message('cmRestoreDoc11');
  case (CurField) of
    #Fld1..#Fld14,
    #isPokFirst, #isPokLeft, #isPokRight, #isPokLast:
      {
      RunInterFace(iEditValSpMnP, SpMnPlan.nRec,
                                  iSetPl.GetNRecFormPlnVid(iSetPl.GetCurVid) ,
                                  ium.GetNumCol(GetNumFld(CurField)),
                                  ObjPlan,
                                  iSetPl.GetCurVid);
      isg.DeleteCache;
      RescanPanel(#SPMnPlan);
      }
  end;
  }
   */
cmValue2: {
     _curValueDateRow := _curValueDate;
     _orgname := '';
     filltAnalMcOrgPodr(tMainTable_br.mcnrec, 0h);
     fillvaluetableAnalRow(tMainTable_br.mcnrec);
     runwindowmodal(winShowAnalRow);
}
cmValue3: {
     _curValueDateRow := _curValueDate;
     _orgname := 'Поставщик: ' + tMainTable_br.orgname;
     filltAnalMcOrgPodr(tMainTable_br.mcnrec, tMainTable_br.orgnrec);
     fillvaluetableAnalRow(tMainTable_br.mcnrec);
     runwindowmodal(winShowAnalRow);
}


end; // he

end; // panel
procedure fillvaluetableAnalRow(__cmc : comp); {

 var dateBeg1  : date = _curValueDateRow;
 var dateBeg2  : date = add_day(_curValueDateRow,1);
 var dateBeg3  : date = add_day(_curValueDateRow,2);
 var dateBeg4  : date = add_day(_curValueDateRow,3);
 var dateBeg5  : date = add_day(_curValueDateRow,4);
 var dateBeg6  : date = add_day(_curValueDateRow,5);
 var dateBeg7  : date = add_day(_curValueDateRow,6);
 var dateBeg8  : date = add_day(_curValueDateRow,7);
 var dateBeg9  : date = add_day(_curValueDateRow,8);
 var dateBeg10 : date = add_day(_curValueDateRow,9);
   delete all tValueTableAnalRow;
    _Try
      {
         sql
          select
              katmc.nrec  as mcnrec
//            , katorg.nrec as orgnrec
//            , katpodr.nrec as podrnrec
            , coalesce(model.nrec,#comp(0)) as modelnrec
            , coalesce(vidprod.nrec, #comp(0)) as vidprodnrec
            , sum(case when bufspplam.dt =:(dateBeg1)  then bufspplam.kol else 0 end) as Value1
            , sum(case when bufspplam.dt =:(dateBeg2)  then bufspplam.kol else 0 end) as Value2
            , sum(case when bufspplam.dt =:(dateBeg3)  then bufspplam.kol else 0 end) as Value3
            , sum(case when bufspplam.dt =:(dateBeg4)  then bufspplam.kol else 0 end) as Value4
            , sum(case when bufspplam.dt =:(dateBeg5)  then bufspplam.kol else 0 end) as Value5
            , sum(case when bufspplam.dt =:(dateBeg6)  then bufspplam.kol else 0 end) as Value6
            , sum(case when bufspplam.dt =:(dateBeg7)  then bufspplam.kol else 0 end) as Value7
            , sum(case when bufspplam.dt =:(dateBeg8)  then bufspplam.kol else 0 end) as Value8
            , sum(case when bufspplam.dt =:(dateBeg9)  then bufspplam.kol else 0 end) as Value9
            , sum(case when bufspplam.dt =:(dateBeg10) then bufspplam.kol else 0 end) as Value10
             from bufspplam
           join katmc on katmc.nrec = bufspplam.CMC
           join katorg on katorg.nrec = bufspplam.CIZG
           join katpodr on katpodr.nrec = bufspplam.CPOTR
           left join katparty vidprod on vidprod.nrec = bufspplam.vidprod
           left join spkau model on model.nrec = bufspplam.model
          where  bufspplam.sras = :(_GUID)
             and bufspplam.tPlan = :(_tPlan)
            // and bufspplam.dt >= :(dateBeg1)
            // and bufspplam.dt <= :(dateBeg10)
             and katmc.nrec = :(__cmc)
             //and katorg.nrec = case when :(_cOrg) = #comp(0) then katorg.nrec else :(_cOrg) end
            group by   katmc.nrec
                     //, katorg.nrec, katpodr.nrec
                     , coalesce(model.nrec,#comp(0)), coalesce(vidprod.nrec, #comp(0))
          into  tValueTableAnalRow;
      }
      _Except
      else{
      }
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE1 ,  datetostr(dateBeg1,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE2 ,  datetostr(dateBeg2,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE3 ,  datetostr(dateBeg3,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE4 ,  datetostr(dateBeg4,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE5 ,  datetostr(dateBeg5,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE6 ,  datetostr(dateBeg6,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE7 ,  datetostr(dateBeg7,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE8 ,  datetostr(dateBeg8,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE9 ,  datetostr(dateBeg9,'DD.MM.YY'));
      SetColumnTitle(brShowAnalRow,#tValueTableAnalRow_br.VALUE10, datetostr(dateBeg10,'DD.MM.YY'));
      rescanpanel(#tAnalMcOrgPodr_br)
}

procedure fillvaluetable; {

 var dateBeg1  : date = _curValueDate;
 var dateBeg2  : date = add_day(_curValueDate,1);
 var dateBeg3  : date = add_day(_curValueDate,2);
 var dateBeg4  : date = add_day(_curValueDate,3);
 var dateBeg5  : date = add_day(_curValueDate,4);
 var dateBeg6  : date = add_day(_curValueDate,5);
 var dateBeg7  : date = add_day(_curValueDate,6);
 var dateBeg8  : date = add_day(_curValueDate,7);
 var dateBeg9  : date = add_day(_curValueDate,8);
 var dateBeg10 : date = add_day(_curValueDate,9);
   delete all tValueTable;
    _Try
      {
         sql
          select
              SpMnPlan.cIzd    as mcnrec
            , SpMnPlan.CANVAL2 as orgnrec
            , sum(case when SpMnPl.STARTDATE =:(dateBeg1)  then valspmnp.kol else 0 end) as Value1
            , sum(case when SpMnPl.STARTDATE =:(dateBeg2)  then valspmnp.kol else 0 end) as Value2
            , sum(case when SpMnPl.STARTDATE =:(dateBeg3)  then valspmnp.kol else 0 end) as Value3
            , sum(case when SpMnPl.STARTDATE =:(dateBeg4)  then valspmnp.kol else 0 end) as Value4
            , sum(case when SpMnPl.STARTDATE =:(dateBeg5)  then valspmnp.kol else 0 end) as Value5
            , sum(case when SpMnPl.STARTDATE =:(dateBeg6)  then valspmnp.kol else 0 end) as Value6
            , sum(case when SpMnPl.STARTDATE =:(dateBeg7)  then valspmnp.kol else 0 end) as Value7
            , sum(case when SpMnPl.STARTDATE =:(dateBeg8)  then valspmnp.kol else 0 end) as Value8
            , sum(case when SpMnPl.STARTDATE =:(dateBeg9)  then valspmnp.kol else 0 end) as Value9
            , sum(case when SpMnPl.STARTDATE =:(dateBeg10) then valspmnp.kol else 0 end) as Value10
             From spmnplan
             left join spmnpl on spmnpl.cspmnplan = SpMnPlan.nrec
                                    and SpMnPl.STARTDATE >= :(dateBeg1)
                                    and SpMnPl.STARTDATE <= :(dateBeg10)
             left join valspmnp on valspmnp.cspmnpl = spmnpl.nrec
           where SpMnPlan.cMnPlan = :(cpMnPlan)
          group by SpMnPlan.cIzd
                 , SpMnPlan.CANVAL2
        into tValueTable;
  }
  _except else {
  }
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE1 ,  datetostr(dateBeg1,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE2 ,  datetostr(dateBeg2,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE3 ,  datetostr(dateBeg3,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE4 ,  datetostr(dateBeg4,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE5 ,  datetostr(dateBeg5,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE6 ,  datetostr(dateBeg6,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE7 ,  datetostr(dateBeg7,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE8 ,  datetostr(dateBeg8,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE9 ,  datetostr(dateBeg9,'DD.MM.YY'));
      SetColumnTitle(TR1,#TVALUETABLE_BR.VALUE10, datetostr(dateBeg10,'DD.MM.YY'));
/*
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE1' , cfpTitle,datetostr(dateBeg1,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE2' , cfpTitle,datetostr(dateBeg2,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE3' , cfpTitle,datetostr(dateBeg3,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE4' , cfpTitle,datetostr(dateBeg4,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE5' , cfpTitle,datetostr(dateBeg5,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE6' , cfpTitle,datetostr(dateBeg6,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE7' , cfpTitle,datetostr(dateBeg7,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE8' , cfpTitle,datetostr(dateBeg8,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE9' , cfpTitle,datetostr(dateBeg9,'DD.MM.YY'));
      cfsSetProp('c_TR1_TVALUETABLE_BR.VALUE10',cfpTitle,datetostr(dateBeg10,'DD.MM.YY'));
*/
      rescanpanel(#tMainTable_br)
}
//..
procedure EventSetParVid(wFlag: word);
  {
#ifdef DebugMode
  message('EventSetParVid = '+wflag);
#end
//  if (EnableInitWindow)
//    exit;
// Переинициализировать шаблон
  if ((wFlag and 4) > 0)
    {
    iSetPl.ResetAllWayValue;
    iSetPl.InitAll(MnPlan.cWayAccou);
    exit;
    }
  isg.LockScr;
//  isg.FirstCol;
// Устанавливаем текущей первой колонкой второй сегмент Потребителя
  if (GetFirst VtHor where ((2 == VtHor.TypeHier)) ordered by VtHor.NumAll = tsOk)
    isg.SetNewNumCol(VtHor.NumAll);
  EnableTwoBrowse:= true;
  var CurSpWayAc: comp;
  EnableColorField:= false;
  iSetPl.GetnVidFiltrSpMnPlan(isg.GetCurVid);
  if (ReadMyDsk(CurSpWayAc, 'GetNastr_VidSpWayAcNRec', false))
    if (GetFirst SpWayAc where ((CurSpWayAc == SpWayAc.nRec)) = tsOk)
      EnableColorField:= ((SpWayAc.wValRes[4] and 2) > 0);
  isg.UnLockScr;
  RereadRecord(#SpMnPlan);
  }

procedure filltAnalMcOrgPodr(_cmc, _cOrg : comp); {
  delete all tAnalMcOrgPodr;

  _try {
     sql
      select distinct
         katmc.name  as mcname
       , katmc.nrec  as mcnrec
/*
       , katorg.name as orgname
       , katorg.nrec as orgnrec
       , katpodr.name as podrname
       , katpodr.nrec as podrnrec
*/
       , coalesce(model.name,'') as modelname
       , coalesce(model.nrec,#comp(0)) as modelnrec
       , coalesce(vidprod.name, '') as vidprodname
       , coalesce(vidprod.nrec, #comp(0)) as vidprodnrec
      from bufspplam
       join katmc on katmc.nrec = bufspplam.CMC
       join katorg on katorg.nrec = bufspplam.CIZG
       join katpodr on katpodr.nrec = bufspplam.CPOTR
       left join katparty vidprod on vidprod.nrec = bufspplam.vidprod
       left join spkau model on model.nrec = bufspplam.model
      where  bufspplam.sras = :(_GUID)
         and bufspplam.tPlan = :(_tPlan)
         and katmc.nrec = :(_cmc)
         and katorg.nrec = case when :(_cOrg) = #comp(0) then katorg.nrec else :(_cOrg) end
      into  tAnalMcOrgPodr;
  }
  _except else {
  }
}

procedure filltmptable; {
   StartNewVisual(vtRotateVisual, vfTimer, 'Группировка записей', 0);
  delete all tMainTable;
  delete all tOrgPodrTable;
  _try {
      sql
      select
        katmc.nrec          as mcnrec
      , katmc.name          as mcname
      , katmc.barkod        as mcbarkod
      , katorg.name         as orgname
      , katorg.nrec         as orgnrec
      , ''                  as podrname
      , count(katpodr.name) as podrcnt
      from mnplan
       join spmnplan on spmnplan.cmnplan = mnplan.nrec
       join katmc on katmc.nrec = spmnplan.cizd
       join katorg on katorg.nrec = spmnplan.canval2
       join katpodr on katpodr.nrec = spmnplan.canval3
       //outer apply (select top 1 kp.name from katpodr kp where kp.nrec = spmnplan.canval3) KP
      where mnplan.nrec = :(cpMnPlan)
      group by katmc.nrec, katmc.name, katmc.barkod, katorg.name, katorg.nrec
      //, KP.name
      into tMainTable;
  }
  _except else
  {
  }

  _try {
      sql
      select
        katmc.nrec   as mcnrec
      , katorg.nrec  as orgnrec
      , katpodr.nrec as podrnrec
      , katpodr.name as podrname
      from mnplan
       join spmnplan on spmnplan.cmnplan = mnplan.nrec
       join katmc    on katmc.nrec       = spmnplan.cizd
       join katorg   on katorg.nrec      = spmnplan.canval2
       join katpodr  on katpodr.nrec     = spmnplan.canval3
      where mnplan.nrec = :(cpMnPlan)
      into tOrgPodrTable;
  }
  _except else {
  }




/*
and _guid   == bufspplam.sras
               and _tPlan  == bufspplam.tPlan (noindex)
         and SpMnPlan.cizd == bufspplam.CMC   (noindex)
      and SpMnPlan.canval2 == bufspplam.CIZG  (noindex)
      and SpMnPlan.canval3 == bufspplam.CPOTR (noindex)
      and spmnpl.startdate == bufspplam.DT (noindex)

      and bufspplam.vidprod == vidprod.nrec
      and bufspplam.model   == model.nrec
  */


  _loop tMainTable {
     var _strPodr : string = '';
     _loop tOrgPodrTable where ((tMainTable.mcnrec  == tOrgPodrTable.mcnrec
                             and tMainTable.orgnrec == tOrgPodrTable.orgnrec)){
        _strPodr := _strPodr + if(_strPodr = '','','/ ') + tOrgPodrTable.podrname;
      }
      update current tMainTable set tMainTable.podrname := _strPodr
    }
 StopVisual;
}
function SetOwner(ccMnPlan: comp): boolean; // Устанавливает текущий план
  {
  SetOwner:= true;
  cpMnPlan   := ccMnPlan;

  if (GetFirst MnPlan <> tsOk)
    exit;
  MnPlancWayAccou:= MnPlan.cWayAccou;
  if (GetFirst ObjParam <> tSOk)
    {
    ClearBuffer(#ObjParam);
    ObjParam.nRec   := 0;
    ObjParam.CondRec:= 1; // сформирована автоматически
    InsTbl.doInsertObjParam(ObjParam.Buffer);
    RereadRecord(#ObjParam);
    }
  if (GetFirst SpMnPlan = tsOk)
    stOldSpMnPlanRunAlg:= TSpMnPlan(SpMnPlan.buffer);
  if (not iSetPl.InitAll(MnPlan.cWayAccou))
    {
    message(''#3'Ошибка инициализации шаблона');
    exit;
    }
   set _tPlan := 0;
   set _GUID := sgetattr(comnplan, cpMnPlan,'GUID_bufspplam');

   if _GUID = '' {
       message('Не заполнена внешний атрибут плана "GUID_bufspplam" функционал будет работать некорректно', error);
     }

  case MnPlan.cWayAccou of
   co_PotrMat_VnutrProizv : { // Внутреннее производство деталей - потребность в материалах
     set _tPlan := 1;
    }
   co_PLanSnab_PotrMat    : { // Потребность в материалах - планы снабжения
     set _tPlan := 2;
    }
   co_PLanSnab_VneshPost  : { // Внешняя поставка деталей - планы снабжения
     set _tPlan := 3;
    }
  end;

  if _tPlan = 0 {
    message('MnPlan.cWayAccou = ' + string(MnPlan.cWayAccou,0,0) + ' не найден среди констант шаблонов для работы', error);
    exit;
  }
  SetTitleMnPlanInterf();
   filltmptable;
   set _curValueDate := mnplan.STARTDATE;
   fillvaluetable;
// ед. измерения

  }
Procedure MySetColumnTitle;
{
}
Procedure FillHaveInReserv( Date2Q:Date );
{
  #__UNUSED__(Date2Q)
}
    //-----------------------------------------------------------------------
Function InitInter(  pGldt : GlobData; piOm  : oMainVid) : Boolean;
{
  InitInter := False;
  gldt    := pGldt;
  iom     := piOm;
  isg     := iom.GetSetGetVid();
  ium     := pgldt.GetMainInter();
  iSetPl  := gldt.GetSetupMnf;
  insTbl  := gldt.GetInsertTblMnpl;


  InitInter := True;
}  //Function InitInter

// Завершение работы интерфейса
Function DoneInter : Boolean;
{
 DoneInter := True;
 if (Not NullVipRef (gldt))    FreeVipInterface(gldt);
 if (Not NullVipRef (isg ))    FreeVipInterface(isg);
 if (Not NullVipRef (iom))     FreeVipInterface(iom);
 if (Not NullVipRef (acc))     FreeVipInterface(acc);
 if (Not NullVipRef (iSetPl))  FreeVipInterface(iSetPl);
 if (Not NullVipRef (insTbl))  FreeVipInterface(insTbl);
} //Function DoneInter

procedure setposvalue1tValueTableAnalRow_br; {
   SelectField(#tValueTableAnalRow_br.value1);
}

HandleEvent  //'interface

cmInit:
  {
//'
  }

cmOnVipUnload:
  {
//  SaveConfigInterface;
  DoneInter;
  }

cmNext:
  {
  }

// kbAltF cmnal;
cmvalue1: {
  SelectField(#tValueTable_br.value1);
//      SelectFieldInFormat(tr1,#TVALUETABLE_BR.VALUE1)
}


cmSetCurField :{
    case (Target) of
      #isPokFirst: {
        _curValueDate := mnplan.startdate;
        fillvaluetable;
        putcommand(cmvalue1);
        ReScanPanel(#tAnalMcOrgPodr_br);
      }
      #isPokLeft: {
        if _curValueDate > mnplan.startdate {
         _curValueDate := sub_day(_curValueDate,1);
         fillvaluetable;
        putcommand(cmvalue1);
         ReScanPanel(#tAnalMcOrgPodr_br);
        }
      }
      #isPokLeft10: {
        if sub_day(_curValueDate, 9) > mnplan.startdate {
         _curValueDate := sub_day(_curValueDate,9);
        } else {
         _curValueDate := mnplan.startdate;
        }
         fillvaluetable;
         putcommand(cmvalue1);
         ReScanPanel(#tAnalMcOrgPodr_br);
      }
      #isPokRight10: {
        if _curValueDate < sub_day(mnplan.enddate,9) {
          _curValueDate := add_day(_curValueDate,9);
        } else {
          _curValueDate := sub_day(mnplan.enddate,9);
        }
          fillvaluetable;
          putcommand(cmvalue1) ;
          ReScanPanel(#tAnalMcOrgPodr_br);
      }
      #isPokRight: {
        if _curValueDate < sub_day(mnplan.enddate,9) {
          _curValueDate := add_day(_curValueDate,1);
          fillvaluetable;
          putcommand(cmvalue1);
          ReScanPanel(#tAnalMcOrgPodr_br);
        }
      }
      #isPokLast: {
        _curValueDate := sub_day(mnplan.enddate,9);
        fillvaluetable;
        putcommand(cmvalue1);
        ReScanPanel(#tAnalMcOrgPodr_br);
      }
     #isPokFirstRow: {
        _curValueDateRow := mnplan.startdate;
        fillvaluetableAnalRow(tMainTable_br.mcnrec);
        setposvalue1tValueTableAnalRow_br;
        ReScanPanel(#tAnalMcOrgPodr_br);
        rereadrecord;
      }
      #isPokLeftRow: {
        if _curValueDateRow > mnplan.startdate {
         _curValueDateRow := sub_day(_curValueDateRow,1);
         fillvaluetableAnalRow(tMainTable_br.mcnrec);
        setposvalue1tValueTableAnalRow_br;
         ReScanPanel(#tAnalMcOrgPodr_br);
         rereadrecord;
        }
      }
      #isPokLeft10Row: {
        if sub_day(_curValueDateRow, 9) > mnplan.startdate {
         _curValueDateRow := sub_day(_curValueDateRow,9);
        } else {
         _curValueDateRow := mnplan.startdate;
        }
         fillvaluetableAnalRow(tMainTable_br.mcnrec);
         setposvalue1tValueTableAnalRow_br;
         ReScanPanel(#tAnalMcOrgPodr_br);
         rereadrecord;
      }
      #isPokRight10Row: {
        if _curValueDateRow < sub_day(mnplan.enddate,9) {
          _curValueDateRow := add_day(_curValueDateRow,9);
        } else {
          _curValueDateRow := sub_day(mnplan.enddate,9);
        }
          fillvaluetableAnalRow(tMainTable_br.mcnrec);
          setposvalue1tValueTableAnalRow_br;
          ReScanPanel(#tAnalMcOrgPodr_br);
          rereadrecord;
      }
      #isPokRightRow: {
        if _curValueDateRow < sub_day(mnplan.enddate,9) {
          _curValueDateRow := add_day(_curValueDateRow,1);
          fillvaluetableAnalRow(tMainTable_br.mcnrec);
          setposvalue1tValueTableAnalRow_br;
          ReScanPanel(#tAnalMcOrgPodr_br);
          rereadrecord;
        }
      }
      #isPokLastRow: {
        _curValueDateRow := sub_day(mnplan.enddate,9);
        fillvaluetableAnalRow(tMainTable_br.mcnrec);
        setposvalue1tValueTableAnalRow_br;
        ReScanPanel(#tAnalMcOrgPodr_br);
        rereadrecord;
      }
  end;
}
end;  //'he interface

End.  //'interface

//******************************************************************************
// настройка интерфейса
//******************************************************************************
VipInterface iInterfSetup_99 Implements oInterfSetup #Licensed_Free parameters(cFormPl: comp; wGMode: word);

#doc
Интерфейс настройки редактирования спецификации нарядов</brief>
#end

//******************************************************************************
Interface iInterfSetup_99 'Настройка' (, hcZakaz_UISetup10099) EscClose;
show at (,,,21);

table struct stFList
  (
  wBase  : word,
  wNum   : word,
  sName  : string,
  wLink  : word,
  wFldOff: word
  )
with index
  (
  stFList01 = wNum,
  stFList02 = wBase
  );

create view
var
  cFormPl : comp; // настройка
  wGMode  : word; // режимы
//***
  wLNumSrc: word;
  wLNumDst: word;
from
  FormPl,
    WayAccou,
  stFList, stFList stFListSrc, stFList stFListDst
where
  ((
    cFormPl           == FormPl.nRec      and
    FormPl.ResComp[1] == WayAccou.nRec    and
    wLNumSrc          == stFListSrc.wNum  and
    wLNumDst          == stFListDst.wNum
  ))
order by stFList.wNum
;

Parameters
  cFormPl, // настройка
  wGMode   // режимы
;

var
  ifcSetupMnf  : SetupMnf;  // получение данных из шаблона документа

  wDragSrc     : word;
  wDragDst     : word;
  dndWorkFormat: longint;
  bChangedDone : boolean;

//******************************************************************************
// public
//******************************************************************************
// инициализация
public function asInitInter(p_cFormPl: comp): boolean;
var vcFormPl : comp;
  {
  vcFormPl := p_cFormPl;
  asInitInter:= true;
  }

// завершение работы
public function asDoneInter: boolean;
  {
  asDoneInter:= true;
  }

// инициализация буфера настройки
public procedure asOnCmSetDefault;
  {
  }

// выбор настройки в шаблоне
public procedure asOnSetWayAccou(p_cWayAccou: comp);
var vcWayAccou : comp;
  {
    vcWayAccou := p_cWayAccou;
  }

// получить/установить параметр
function SetGetParam(var FlagParam: longint;
                     var Direction: word;
                     var cValue   : comp;
                     Var dValue   : TSumma;
                     var lValue   : longint;
                     var wValue   : word;
                     var dtValue  : date;
                     var dttValue : datetime;
                     var sValue   : s250): boolean;
var vFlagParam: longint;
var vDirection: word;
var vcValue   : comp;
var vdValue   : double;
var vlValue   : longint;
var vwValue   : word;
var vdtValue  : date;
var vdttValue : datetime;
var vsValue   : s250;
  {
  vFlagParam:= FlagParam;
  vDirection:= Direction;
  vcValue   := cValue;
  vdValue   := dValue;
  vlValue   := lValue;
  vwValue   := wValue;
  vdtValue  := dtValue;
  vdttValue := dttValue;
  vsValue   := sValue;

  SetGetParam:= true;
  }

//******************************************************************************
// private
//******************************************************************************
// получение имени поля из шаблона
function GetISFieldName(wFldNum: word): string;
var Result: string;
  {
  Result:= '';
  case wFldNum of
    0: {}
    1..14:
      {
      Result:= ifcSetupMnf.GetNameFieldVid(wFldNum);
      }
    else
      Result:= 'ошибка вычисления индекса';
  end; // case
  GetISFieldName:= Result;
  } // function GetISFieldName

//******************************************************************************
procedure InitFList;
  {
  delete all stFList;
  var i: word;
  for (i:= 1; i < 13; i:= i + 1)
    {
    stFList.wBase  := i;
    stFList.wNum   := if (FormPl.ResWord[i] = 0, i, FormPl.ResWord[i]);
    stFList.wLink  := FormPl.ResWord[i + 14];
    stFList.wFldOff:= (word(FormPl.ResLngint[1]) shr (stFList.wNum - 1)) and 1;
    case i of
      1: stFList.sName:= 'Норма выпуска';
      2: stFList.sName:= 'Фактический выпуск';
      3: stFList.sName:= 'Фактический брак';
      4: stFList.sName:= 'Норма времени';
      5: stFList.sName:= 'Фактическое время';
      6: stFList.sName:= 'Время простоев';
      7: stFList.sName:= 'Расценка';
      8: stFList.sName:= 'Процент премии';
      9: stFList.sName:= 'Оплата';
     10: stFList.sName:= 'Премия';
     11: stFList.sName:= 'Процент доп. брака';
     12: stFList.sName:= 'Допустимый брак';
    end; // case
    insert current stFList;
    };
  } // procedure InitFList

//******************************************************************************
procedure SaveFList;
  {
  var lFldOnOff: longint;
  lFldOnOff:= 0;
  _loop stFList ordered by stFList.wBase
    {
    FormPl.ResWord[stFList.wBase]:= stFList.wNum;
    FormPl.ResWord[stFList.wBase + 14]:= stFList.wLink;
    lFldOnOff:= lFldOnOff or longint(stFList.wFldOff shl (stFList.wNum - 1));
//    message('stFList.wFldOff: '+stFList.wFldOff+''#13+
//            'lFldOnOff: '+lFldOnOff);
    }; // end _loop stFList
  FormPl.ResLngint[1]:= longint(111111111111b) and lFldOnOff;
  update current FormPl;
  } // procedure SaveFList

//******************************************************************************
// изменение порядка полей
procedure RenumFList(wSrcNum, wDstNum: word);
  {
  var i: word;
  if (wSrcNum = wDstNum)
    exit;
  bChangedDone:= true;
  if (wSrcNum > wDstNum)
    {
    for (i:= wSrcNum; i > wDstNum; i:= i - 1)
      {
      set wLNumSrc:= i;
      set wLNumDst:= i - 1;
      stFListDst.wNum:= wLNumSrc; update current stFListDst;
      stFListSrc.wNum:= wLNumDst; update current stFListSrc;
      }; // for
    }
  else
    {
    for (i:= wSrcNum; i < wDstNum; i:= i + 1)
      {
      set wLNumSrc:= i;
      set wLNumDst:= i + 1;
      stFListDst.wNum:= wLNumSrc; update current stFListDst;
      stFListSrc.wNum:= wLNumDst; update current stFListSrc;
      }; // for
    }
  GetFirst stFList where ((wLNumDst == stFList.wNum));
  RescanPanel(#stFList);
  } // procedure RenumFList

panel pnFormPl;
table FormPl;
screen scISetup00 (,, sci13Esc);
show at (,,,2);
fields
  WayAccou.Name: protect;
<<

  `Использовать для шаблона:`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end; // screen scISetup00

tabbedsheet bottom tsISetup
show at (,3,,17);

panel pnstFList
table stFList;
browse brISetup01 'Настройка полей' (,, sci1Esc);
fields
  { Font = { Color = if (stFList.wFldOff = 1, ColorGray, 0); Italic = (stFList.wFldOff = 1) } };
  [sFldOff] if (stFList.wFldOff = 0, '+', '')
                  'Вкл'        (,, sci13Esc):[ 3], protect, centered, noautosize;
  stFList.wNum    '№'                       :[ 3];
  stFList.sName   'Назначение'              :[25], protect;
  stFList.wLink   'Поле данных'(,, sci13Esc):[25], [List  0 'нет соответствия',
                                                          1 'Поле  1',  2 'Поле  2',  3 'Поле  3',  4 'Поле  4',
                                                          5 'Поле  5',  6 'Поле  6',  7 'Поле  7',  8 'Поле  8',
                                                          9 'Поле  9', 10 'Поле 10', 11 'Поле 11', 12 'Поле 12'], protect, left;
end; // browse brISetup01
end; // panel pnstFList

screen scISetup02 'Дополнительно' (,, sci1Esc);
fields
  FormPl.ResWord[30]  ('Дополнительное поле для изделия');
  FormPl.ResWord[31]  ('Единица измерения по умолчанию');
  FormPl.ResDouble[1] ('Длительность смены по умолчанию'):[12.3];
  FormPl.ResWord[32]  ('Параметры поиска расценки');
  FormPl.ResWord[33]  ('Параметры поиска нормы выпуска');
  FormPl.ResWord[34]  ('Параметры выбора сотрудников бригад для распределения');
<<

  `Для аналитики изделие поле код  ` `Единица измерения по умолчанию:`
    (.) конструкторское обозначение`   (.) учетная                   `
    (.) номенклатурный номер       `   (.) активная отпускная        `
                                       (.) производственная          `
  `смена =`.@@@@@@@@ часов

  `Поиск расценки:                `  `Поиск нормы выпуска:           `
    [.] автоматически             `    [.] автоматически             `
    [.] не учитывать операцию     `    [.] выводить протокол поиска  `
    [.] не учитывать подразделение`
    [.] выводить протокол поиска  `  `Выбор сотрудников бригады`
                                       [.] включен             `
>>
end; // screen scISetup02
screen scISetup03 'Контроль периодов' (,, sci1Esc);
fields
  FormPl.ResWord[35] ('Параметры контроля периода позиций');
  FormPl.ResWord[36] ('Параметры контроля периода позиций');
<<

  Параметры контроля периода позиций:
  `При изменении периода документа:  `
    [.] выдавать предупреждение      `
    [.] синхронизировать с документом`

  `При изменении периода позиции:    `
    [.] выдавать предупреждение      `
    [.] синхронизировать с документом`
>>
end; // screen scISetup03
end; // tabbedsheet
screen scButtons;
show at (,18,,);
buttons
  cmValue1,,, 'Сохранить';
  cmCancel,,, 'Отмена';
<<
                <.Сохранить .>          <. Отмена .>
>>
end; // screen scButtons
end; // panel pnFormPl

// настройка списка вызова
procedure TuneLinkList;
  {
  var aFName: array[0..12] of string;
  var i: word;
  var bFromTmpl: boolean; bFromTmpl := false;

  if (FormPl.ResComp[1] <> 0)
    {
    if (not NullVIPRef(ifcSetupMnf))
      {
      bFromTmpl := true;
      ifcSetupMnf.InitAll(FormPl.ResComp[1]);
      }
    }
  aFName[0] := 'нет соответствия';
  for (i := 1; i < 13; i := i + 1)
    {
    if (bFromTmpl)
      aFName[i] := GetISFieldName(i);
    else
      aFName[i] := 'Поле ' + LPad(string(i), 2);
    }; // for
  SetEnumList(brISetup01, #stFList.wLink, aFName);
  RescanPanel(#stFList);
  } // procedure TuneLinkList

// настройка ярлыков
procedure TuneITab;
  {
  SetTabbedSheetVisible(brISetup01, (wGMode = 0 or wGMode = 1));
  SetTabbedSheetVisible(scISetup02, (wGMode = 0 or wGMode = 2));
  SetTabbedSheetVisible(scISetup03, (wGMode = 0 or wGMode = 3));
  case wGMode of
    0,1: SetFormat(brISetup01);
      2: SetFormat(scISetup02);
      3: SetFormat(scISetup03);
  end; // case
  } // procedure TuneITab

panel pnFormPl
table FormPl;
HandleEvent

cmPick:
  {
  case CurField of
    #WayAccou.Name:
      {
      if (RunInterface(NastrPl, toNeedTr, FormPl.ResComp[1], 0) = cmDefault)
        {
        TuneLinkList;
        }
      }
  end; // case
  }

cmDelOnProtect:
  {
  case CurField of
    #WayAccou.Name:
      {
      set FormPl.ResComp[1]:= 0;
      TuneLinkList;
      }
  end; // case
  }

cmUpdateRecord:
  {
  update current FormPl;
  }

end;  // handleevent panel pnFormPl

end;  // panel pnFormPl

panel pnstFList
table stFList;
HandleEvent

cmCheckField:
  {
  case CurField of
    #stFList.wNum:
      {
      wDragSrc:= word(OldFieldValue);
      wDragDst:= stFList.wNum;
      if (wDragDst < 1 or wDragDst > 12)
        {
        stFList.wNum:= wDragSrc;
        abort;
        exit;
        }
      RenumFList(wDragSrc, wDragDst);
      }
  end; // case
  }

cmDelOnProtect:
  {
  case CurField of
    #stFList.wLink:
      {
      set stFList.wLink:= stFList.wNum;
      }
    #sFldOff:
      {
      if (stFList.wFldOff = 0)
        set stFList.wFldOff:= 1;
      }
  end; // case
  }

cmPick:
  {
  case CurField of
    #sFldOff: set stFList.wFldOff:= (stFList.wFldOff + 1) mod 2;
  end; // case
  }

cmUpdateRecord:
  {
  bChangedDone:= true;
  update current stFList;
  }

end; // handleevent panel pnstFList
end; // panel pnstFList

//=======================================================================
HandleEvent  //'he interface
//-----------------------------------------------------------------------

cmInit:
  {
  bChangedDone:= false;
  if (GetFirst FormPl <> tsOk)
    {
    message(''#3'Ошибка поиска в таблице пользовательских алгоритмов  < FormPl > ');
    abort;
    exit;
    }

  _noexcept
    LoadVipRef(ifcSetupMnf, 'GetNastr');

  InitFList;
  TuneLinkList;
  TuneITab;

  dndWorkFormat:= DNDRegisterFormat('brISetup01');
  DNDFieldAcceptDrag(brISetup01, #stFList.wNum);
  DNDFieldAcceptDrag(brISetup01, #stFList.sName);
  DNDFieldAcceptDrag(brISetup01, #stFList.wLink);
  DNDFieldDropSource(brISetup01, #stFList.wNum);
  DNDFieldDropSource(brISetup01, #stFList.sName);
  DNDFieldDropSource(brISetup01, #stFList.wLink);
  }

// Запрос на начало перетаскивания (приходит от источника)
cmQueryStartDrag:
  {
  case DNDCurField of
    #stFList.wNum, #stFList.sName, #stFList.wLink:
      {
      wDragSrc:= stFList.wNum;
      wDragDst:= stFList.wNum;
      DNDSetDropEffect(DROPEFFECT_COPY); // Установка возможного действия
      }
  end; // case
  }

// Что-то хотят перетащить в поле ...
cmDragEnter:
  {
  DNDSetDropEffect(DROPEFFECT_COPY); // Установка возможного действия
  }

// Продолжается перетаскивание (cmDragEnter прошел успешно)
cmDragOver:
  {
  case DNDCurField of
    #stFList.wNum, #stFList.sName, #stFList.wLink:
      {
      DNDSetDropEffect(DROPEFFECT_COPY); // (это надо сделать, чтобы процесс не прервался).
      }
  end; // case
  }

// Бросили ...
cmDrop:
  {
  var i: word;
  case DNDCurField of
    #stFList.wNum, #stFList.sName, #stFList.wLink:
      {
      wDragDst:= stFList.wNum;
      RenumFList(wDragSrc, wDragDst);
// это необходимо сделать, чтобы источник знал, что произошло,
// иначе ему не прийдёт событие cmAfterEndDrag
      DNDSetDropEffect(DROPEFFECT_COPY); // Установка возможного действия
      }
  end; // case
  }

cmDone:
  {
  if (not NullVIPRef(ifcSetupMnf))
    FreeVIPInterface(ifcSetupMnf);
  }

cmValue1:
  {
  if (bChangedDone)
    SaveFList;
  CloseInterface(cmDefault);
  }

cmCancel:
  {
  SetModified(false);
  }

end;  //'he interface

End.  //'interface

iInterfSys_43_HK Menu
  {
  - 'Установить фильтр',                cmFilterSave, '', hcZakaz_lokmen_plan_sb,  'Alt-B',      kbAltB,      sci1Esc;
  - 'Снять фильтр',                     cmIEHist,     '', hcZakaz_lokmen_plan_sb,  'Alt-H',      kbAltH,      sci1Esc;
  - 'Установить сортировку',            cmAccording,  '', hcZakaz_lok_rezred_plan, 'Alt-S',      kbAltS,      sci1Esc;
  -----------;
  - 'Удаление позиций спецификации',    cmPickAttr,   '', hcZakaz_lok_rezred_plan, 'Alt-A',      kbAltA,      sci1Esc;
  - 'Расширенная информация.',          cmAttrib,     '', hcZakaz_lok_rezred_plan, 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
  ---------;
  - 'Установить тип единицы измерения', cmSortMC,     'Установить тип единицы измерения',               hcNoContext, 'Alt-R', kbAltR, sci1Esc;
  - 'Внешняя ~к~лассификация',          cmPickClass,  'Внешняя классификация',                          hcNoContext, 'Alt-C', kbAltC, sci1Esc;
  - 'Внешние ~а~трибуты',               cmFilialNo,   'Заполнение внешних атрибутов по данной позиции', hcNoContext, 'Alt-N', kbAltN, sci1Esc;
  - 'Поиск',                            cmNal,        'Поиск спецификации',                             hcNoContext, 'Alt-F', kbAltF, sci1Esc;
  - 'Найти далее',                      cmNext,       'Найти следующую спецификацию',                   hcNoContext, 'F6',    kbF6,   sci1Esc;
  - 'Дублирование позиции',             cmDocBas,     'Дублирование позиции',                           hcNoContext, 'Alt-D',  kbAltD, sci1Esc;
  ---------;
  - 'Проверить наличие расценок',       cmValue8,     'Проверить наличие расценок',                     hcZakaz_UI10099LM, '',, sci1Esc;
  - 'Протокол поиска расценок',         cmValue6,     'Показать протокол поиска расценок',              hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  - 'Проверить наличие норм выпуска',   cmValue11,    'Проверить наличие норм выпуска',                 hcZakaz_UI10099LM, '',, sci1Esc;
  - 'Протокол поиска норм выпуска',     cmValue9,     'Показать протокол поиска норм выпуска',          hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  - 'Настройка',                        cmValue12,    'Настройка параметров документа',                 hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  }

iInterfSys_43_Cell_HK Menu
  {
  - 'Установить сортировку',            cmAccording,  '', hcZakaz_lok_rezred_plan, 'Alt-S',      kbAltS,      sci1Esc;
  - 'Установить фильтр',                cmFilterSave, '', hcZakaz_lokmen_plan_sb,  'Alt-B',      kbAltB,      sci1Esc;
  - 'Снять фильтр',                     cmIEHist,     '', hcZakaz_lokmen_plan_sb,  'Alt-H',      kbAltH,      sci1Esc;
  -----------;
  - 'Удаление позиций спецификации',    cmPickAttr,   '', hcZakaz_lok_rezred_plan, 'Alt-A',      kbAltA,      sci1Esc;
  - 'Расширенная информация.',          cmAttrib,     '', hcZakaz_lok_rezred_plan, 'Ctrl-Enter', kbCtrlEnter, sci1Esc;
  -----------;
  - 'Редактирование позиции объекта планирования', cmSaveDoc,    '', hcZakaz_lok_rezred_plan, 'Ctrl-F2', kbCtrlF2, sci1Esc;
  - 'Редактор позиции документа',                  cmRestoreDoc, '', hcZakaz_lok_rezred_plan, 'Ctrl-F3', kbCtrlF3, sci1Esc;
  ---------;
  - 'Установить тип единицы измерения', cmSortMC,     'Установить тип единицы измерения',               hcNoContext, 'Alt-R', kbAltR, sci1Esc;
  - 'Внешняя ~к~лассификация',          cmPickClass,  'Внешняя классификация',                          hcNoContext, 'Alt-C', kbAltC, sci1Esc;
  - 'Внешние ~а~трибуты',               cmFilialNo,   'Заполнение внешних атрибутов по данной позиции', hcNoContext, 'Alt-N', kbAltN, sci1Esc;
  - 'Поиск',                            cmNal,        'Поиск спецификации',                             hcNoContext, 'Alt-F', kbAltF, sci1Esc;
  - 'Найти далее',                      cmNext,       'Найти следующую спецификацию',                   hcNoContext, 'F6',    kbF6,   sci1Esc;
  - 'Дублирование позиции',             cmDocBas,     'Дублирование позиции',                           hcNoContext, 'Alt-D', kbAltD, sci1Esc;
  ---------;
  - 'Проверить наличие расценок',       cmValue8,     'Проверить наличие расценок',                     hcZakaz_UI10099LM, '',, sci1Esc;
  - 'Протокол поиска расценок',         cmValue6,     'Показать протокол поиска расценок',              hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  - 'Проверить наличие норм выпуска',   cmValue11,    'Проверить наличие норм выпуска',                 hcZakaz_UI10099LM, '',, sci1Esc;
  - 'Протокол поиска норм выпуска',     cmValue9,     'Показать протокол поиска норм выпуска',          hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  - 'Настройка',                        cmValue12,    'Настройка параметров документа',                 hcZakaz_UI10099LM, '',, sci1Esc;
  ---------;
  }

iInterfSys_43_BrList_HK Menu
  {
  - 'Выполнить распределение', cmSetupReport, '', hcZakaz_UI10099LM, 'Ctrl-R', kbCtrlR, sci1Esc;
  - 'Удалить распределение',   cmValue7,      '', hcZakaz_UI10099LM, '',,               sci1Esc;
  }
//  1 `Норма выпуска      `
//  2 `Фактический выпуск `
//  3 `Фактический брак   `
//  4 `Норма времени      `
//  5 `Фактическое время  `
//  6 `Время простоев     `
//  7 `Расценка           `
//  8 `Процент премии     `
//  9 `Оплата             `
// 10 `Премия             `
// 11 `Процент доп. брака `
// 12 `Допустимый брак    `
// 13 `не используется    `
// 14 `не используется    `
