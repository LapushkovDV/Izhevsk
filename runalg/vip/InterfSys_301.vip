#component "M_MnPlan"

#include OBJINTPL.VIN
#include GetKau.vih
#include GetKau.var

VipInterface iInterfSys_301 Implements Util_ScrSp #Licensed_Free;
Interface iInterfSys_301 'Отчет по плановой себестоимости в иерархии' EscClose,doAccept/*, CustomSorting*/;
create View
Var cCurMnPlan: Comp;
    wObjType, wCurVid: Word;
    gldt        : GlobData;
    iom         : oMainVid;
    insTbl      : InsertTblMnpl;
    iSetPl      : SetupMnf;
    cStateDSE, cStateMat, cStateErr, cRoleIzd: comp;
    macroDelta: double;
    macroRec: comp;
as Select *
From
 fpPeriod,
 MnPlan, MnPlan MnfOrder, MnPlan MnfOrder3,
 SpMnPlan (SpMnPlan03), SpMnPlan SpMnPlan3,
 SpMnPl, SpMnPl SpMnPl2, SpMnPl SpMnPl3,
 StZatr,
 ValSpMnP, ValSpMnP ValSpMnP2, ValSpMnP ValSpMnP3,
 KatNotes,
 KatMC, KatMC KatMC3
Where ((
        cCurMnPlan           == MnPlan.NRec        and
        MnPlan.NRec          == SpMnPlan.cMnPlan   and
        SpMnPlan.cIzd        == KatMC.Nrec         and
        SpMnPlan.cIzd        == MnfOrder.Nrec      and
        SpMnPlan.NRec        == SpMnPl.cSpMnPlan   and
        24                   == SpMnPl.wKolAn      and
        SpMnPl.NRec          == ValSpMnP.cSpMnPl   and
        SpMnPlan.NRec        == SpMnPl2.cSpMnPlan  and
        22                   == SpMnPl2.wKolAn     and
        SpMnPl2.cAnVal4      == fpPeriod.NRec      and
        SpMnPl2.cAnVal5      == StZatr.NRec        and
        SpMnPl2.NRec         == ValSpMnP2.cSpMnPl
      ))
;

function PrintNodes(var row: longint; cUp: comp; level: word): boolean;
var j: longint;
    name: string;
{
  Result := false;
  _loop SpMnPlan3 where ((cCurMnPlan == SpMnPlan3.cMnPlan and cUp == SpMnPlan3.cSpMnPlan))
  {
    row++;
    name := '-';
    case SpMnPlan3.TypeIzd of
      0: name := '<Нераспределенные затраты>';
      toMC, toUsl:
      {
        if getfirst fastfirstrow KatMC3 where ((SpMnPlan3.cIzd == KatMC3.NRec)) = tsOk
          name := KatMC3.Name;
      }
      toMnfZakaz: 
      {
        if getfirst fastfirstrow MnfOrder3 where ((SpMnPlan3.cIzd == MnfOrder3.NRec)) = tsOk
          name := 'Заказ № ' + MnfOrder3.Number;
      }
    end;
    name := Lpad('', level * 2) + name;
    j := 0;    
    xlDoWriteToMatrix(row, ++j, level);
    xlStWriteToMatrix(row, ++j, name);
    if getfirst fastfirstrow SpMnPl3 where ((SpMnPlan3.NRec == SpMnPl3.cSpMnPlan and 24 == SpMnPl3.wKolAn)) = tsOk
      if getfirst fastfirstrow ValSpMnP3 where ((SpMnPl3.NRec == ValSpMnP3.cSpMnPl)) = tsOk
      {
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.Price    );
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.VPrice   );
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.Summa    );
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.KolField5);
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.KolFact  );
        xlDoWriteToMatrix(row, ++j, ValSpMnp3.PriceFact);
      }
    PushPos(tnSpMnPlan3);
    PrintNodes(row, SpMnPlan3.Nrec, level + 1);
    PopPos(tnSpMnPlan3);
  }
  Result := true;
}

function PrintReport: boolean;
var macroFile: string;
    r1, kolR, kolC, i, j: longint;
{
  Result := false;
  if not xlCreateExcel('', true)
  {
    message('Ошибка запуска Excel', error);
    exit;
  }
  r1 := 3;
  kolC := 8;
  kolR := 1;
  _loop SpMnPlan3 where ((cCurMnPlan == SpMnPlan3.cMnPlan))
    kolR++;
  xlCreateMatrix(kolR, kolC);

  xlMergeCells(1, 2, 1, kolC);
  xlSetCellStringValue(MnPlan.Name, 1, 2, 1, 2);
  xlSetFontStyle(xlBold, 1, 1, 3, kolC);
  xlAlignCells(xlCenter, 1, 1, 3, kolC);
  xlSetColumnWidth(0, 1, 1, 1, 1);
  xlSetColumnWidth(72, 1, 2, 1, 2);
  xlSetColumnWidth(18, 1, 3, 1, kolC);
  xlWrapText(r1, 2, r1 + kolR - 1, 2);
  xlSetNumberFormat('@', r1 + 1, 2, r1 + kolR - 1, 2);
  xlSetNumberFormat('# ##0,000;-# ##0,000;-', r1 + 1, 3, r1 + kolR - 1, kolC);
  xlSetNumberFormat('# ##0,00;-# ##0,00;-', r1 + 1, 5, r1 + kolR - 1, 5);
  xlSetNumberFormat('# ##0,00;-# ##0,00;-', r1 + 1, kolC, r1 + kolR - 1, kolC);
  xlFrameCells(xlBorderL or xlBorderR or xlBorderT or xlBorderB or xlInsideV or xlInsideH, xlThin, 0, 0, r1, 2, r1 + kolR - 1, kolC);

  i := 1;
  j := 1;
  xlStWriteToMatrix(i, ++j, 'Наименование');
  xlStWriteToMatrix(i, ++j, 'Количество план'  );
  xlStWriteToMatrix(i, ++j, 'Трудоемкость план');
  xlStWriteToMatrix(i, ++j, 'Стоимость план'   );
  xlStWriteToMatrix(i, ++j, 'Количество факт'  );
  xlStWriteToMatrix(i, ++j, 'Трудоемкость факт');
  xlStWriteToMatrix(i, ++j, 'Стоимость факт'   );
  PrintNodes(i, 0, 0);

  xlWriteMatrixToExcel(r1, 1);

  macroFile := CreateTmpFileName;
  LogStrToFile(macroFile, 'Sub CreateGroups(startrow, endrow)');
  LogStrToFile(macroFile, '    ActiveSheet.Outline.SummaryRow = Above');
  LogStrToFile(macroFile, '    Dim starts(100) As Integer');
  LogStrToFile(macroFile, '    curLev = 0');
  LogStrToFile(macroFile, '    For i = startrow To endrow');
  LogStrToFile(macroFile, '        If Cells(i, 1).Value > curLev Then');
  LogStrToFile(macroFile, '            starts(Cells(i, 1).Value) = i');
  LogStrToFile(macroFile, '        End If');
  LogStrToFile(macroFile, '        If Cells(i, 1).Value < curLev Then');
  LogStrToFile(macroFile, '            For j = Cells(i, 1).Value To curLev');
  LogStrToFile(macroFile, '                If starts(j) < i Then Range(Rows(starts(j)), Rows(i - 1)).Group');
  LogStrToFile(macroFile, '            Next j');
  LogStrToFile(macroFile, '            starts(Cells(i, 1).Value) = i');
  LogStrToFile(macroFile, '        End If');
  LogStrToFile(macroFile, '        curLev = Cells(i, 1).Value');
  LogStrToFile(macroFile, '    Next i');
  LogStrToFile(macroFile, '    For j = 1 To curLev');
  LogStrToFile(macroFile, '        If starts(j) < i Then Range(Rows(starts(j)), Rows(i - 1)).Group');
  LogStrToFile(macroFile, '    Next j');
  LogStrToFile(macroFile, 'End Sub');
  xlImportModule(macroFile);
  xlRunMacro('CreateGroups(' + string(r1 + 1) +', ' + string(r1 + kolR - 1) + ')');

  xlKillExcel;
  Result := true;
}

tree tr1 (,,sci178EscTree);
show (,,,20);
table SpMnPlan (SpMnPlan.cSpMnPlan);
  listNodeImage  = if(SpMnPlan.TypeIzd = toMnfZakaz, 'L_Dogovor::BmpZakrLeave'       , if(SpMnPlan.cStatus = cStateErr, 'L_DOGOVOR::BmpRastLeave'       , if(SpMnPlan.cStatus = cStateDSE, 'L_Dogovor::BmpIspolLeave'       , 'L_DOGOVOR::BmpOformLeave')));
  openNodeImage  = if(SpMnPlan.TypeIzd = toMnfZakaz, 'L_Dogovor::BmpZakrFolderOpened', if(SpMnPlan.cStatus = cStateErr, 'L_DOGOVOR::BmpRastFolderOpened', if(SpMnPlan.cStatus = cStateDSE, 'L_Dogovor::BmpIspolFolderOpened', 'L_DOGOVOR::BmpOformFolderOpened')));
  closeNodeImage = if(SpMnPlan.TypeIzd = toMnfZakaz, 'L_Dogovor::BmpZakrFolderClosed', if(SpMnPlan.cStatus = cStateErr, 'L_DOGOVOR::BmpRastFolderClosed', if(SpMnPlan.cStatus = cStateDSE, 'L_Dogovor::BmpIspolFolderClosed', 'L_DOGOVOR::BmpOformFolderClosed')));
fields
  [sItem] case(SpMnPlan.TypeIzd; 0: '<Нераспределенные затраты>', toMC, toUsl: KatMC.Name, toMnfZakaz: 'Заказ № ' + MnfOrder.Number; '-') 'Наименование' (,,sci1378EscTree): [50], protect, pickbutton;
  ValSpMnp.Price     'Количество','план'  : [, '\3p[|-]36`666`666`666`666.888'], noprotect, lessnull;
  ValSpMnp.VPrice    'Трудоемкость','план': [, '\3p[|-]36`666`666`666`666.888'], {protect = SpMnPlan.TypeIzd <> toMC}, lessnull;
  ValSpMnp.Summa     'Стоимость','план'   : [, '\3p[|-]36`666`666`666`666.888'], {protect = SpMnPlan.TypeIzd <> toUsl}, lessnull;
  ValSpMnp.KolField5 'Количество','факт'  : [, '\3p[|-]36`666`666`666`666.888'], noprotect, lessnull;
  ValSpMnp.KolFact   'Трудоемкость','факт': [, '\3p[|-]36`666`666`666`666.888'], {protect = SpMnPlan.TypeIzd <> toMC}, lessnull;
  ValSpMnp.PriceFact 'Стоимость','факт'   : [, '\3p[|-]36`666`666`666`666.888'], {protect = SpMnPlan.TypeIzd <> toUsl}, lessnull;
end
browse br2 (,,sci1EnEsc);
show (,21,,);
table SpMnPl2;
fields
  StZatr.Name         'Статья затрат': [30], protect;
  fpPeriod.Name       'Период': [15], protect;
  ValSpMnp2.Price     'Количество': [, '\3p[|-]36`666`666`666`666.888'], protect, lessnull;
  ValSpMnp2.Summa     'Стоимость' : [, '\3p[|-]36`666`666`666`666.888'], protect, lessnull;
  ValSpMnp2.KolField6 'Цена' : [, '\3p[|-]36`666`666`666`666.888'], protect, lessnull;
  ValSpMnp2.SummaFact 'НДС'  : [, '\3p[|-]36`666`666`666`666.888'], protect, lessnull;
  ValSpMnp2.KolField7 'ТЗР'  : [, '\3p[|-]36`666`666`666`666.888'], protect, lessnull;
end;

tableEvent
table SpMnPlan;
cmSetDefault:
{
  if getfirst SpMnPlan3 where ((SpMnPlan.cSpMnPlan == SpMnPlan3.NRec and toMC == SpMnPlan3.TypeIzd(noindex))) <> tsOk
  {
    message('Материалы можно добавлять только к ДСЕ!', error);
    TreeJumpToRecord(tr1, SpMnPlan.cSpMnPlan);
    RereadRecord(tnSpMnPlan);
    abort;
    exit;
  }
  SpMnPlan.TypeIzd     := toUsl;
  SpMnPlan.Number      := InsTbl.GetLastNumSpMnPlan(MnPlan.NRec);
  SpMnPlan.NumSort     := comp(SpMnPlan.Number);
  SpMnPlan.cSloj       := MnPlan.cSloj;
  SpMnPlan.cRoleIzd    := cRoleIzd;
  SpMnPlan.cStatus     := cStateMat;
  insert current SpMnPlan;

  var stSpMnPl: TSpMnPl;
  InsTbl.SetDefStSpMnPl(0, stSpMnPl);
  InsTbl.SynchroSpMnPlBufSpMnPlan(SpMnPlan.Buffer, stSpMnPl);
  stSpMnPl.wKolAn := 24;
  InsTbl.PumpRoleKodGrForSpMnPl(stSpMnPl);
  stSpMnPl.cAnVal4 := cCurMnPlan;
  stSpMnPl.cMnAnal := InsTbl.GetNrecMnAnalforSpMnPl(stSpMnPl, True);
  InsTbl.InsertSpMnPl(stSpMnPl);
  ClearBuffer(tnValSpMnP);
  ValSpMnP.cSpMnPl := stSpMnPl.NRec;
  ValSpMnP.cSpMnPlan := SpMnPlan.NRec;
  ValSpMnP.Num := 1;
  ValSpMnP.cMnAnal := stSpMnPl.cMnAnal;
  insert current ValSpMnP;
  RereadRecord(tnSpMnPlan);
  TreeJumpToRecord(tr1, SpMnPlan.NRec);

  SelectField(#sItem);
  PutCommand(cmPick);
}
cmDeleteRecord:
{
  if SpMnPlan.TypeIzd = toUsl
  {
#declare UpdateFieldValue(fldName, deltaFunc)
    PushPos(tnSpMnPlan);
    macroDelta := #deltaFunc;
    macroRec := SpMnPlan.cSpMnPlan;
    update current ValSpMnP;
    while macroRec <> 0
    {
      if getfirst SpMnPlan where ((macroRec == SpMnPlan.NRec)) <> tsOk
        break;
      if getfirst SpMnPl where ((SpMnPlan.NRec == SpMnPl.cSpMnPlan and 24 == SpMnPl.wKolAn)) <> tsOk
        break;
      if getfirst ValSpMnP where ((SpMnPl.NRec == ValSpMnP.cSpMnPl)) <> tsOk
        break;
      ValSpMnP.#fldName += macroDelta;
      update current ValSpMnP;
      macroRec := SpMnPlan.cSpMnPlan;
    }
    PopPos(tnSpMnPlan);
#end
    #UpdateFieldValue(VPrice, -ValSpMnp.VPrice)
    #UpdateFieldValue(Summa, -ValSpMnp.Summa)
    #UpdateFieldValue(KolFact, -ValSpMnp.KolFact)
    #UpdateFieldValue(PriceFact, -ValSpMnp.PriceFact)
    insTbl.DeleteSpMnPlan(SpMnPlan.NRec);
  }
  RescanPanel(tnSpMnPlan);
}
cmPick:
{
  case curField of
    #sItem:
    {
      if SpMnPlan.TypeIzd <> toUsl
      {
        abort;
        exit;
      }
      var cRec: comp = SpMnPlan.cIzd;
      if iGetKau.GetCodeKau(cgiPick, cgKau_KatMC, cRec) > 0
      {
        SpMnPlan.cIzd := cRec;
        update current SpMnPlan;
        _loop SpMnPl3 where ((SpMnPlan.NRec == SpMnPl3.cSpMnPlan))
        {
          SpMnPl3.cIzd := SpMnPlan.cIzd;
          update current SpMnPl3;
        }
      }
    }
  end;
  RescanPanel(tnSpMnPlan);
}
cmCheckField:
{
  case curField of
    #ValSpMnp.VPrice:
    {
      #UpdateFieldValue(VPrice, ValSpMnp.VPrice - double(OldFieldValue))
    }
    #ValSpMnp.Summa:
    {
      #UpdateFieldValue(Summa, ValSpMnp.Summa - double(OldFieldValue))
    }
    #ValSpMnp.KolField5,
    #ValSpMnp.Price:
    {
      update current ValSpMnP;
    }
    #ValSpMnp.KolFact:
    {
      #UpdateFieldValue(KolFact, ValSpMnp.KolFact - double(OldFieldValue))
    }
    #ValSpMnp.PriceFact:
    {
      #UpdateFieldValue(PriceFact, ValSpMnp.PriceFact - double(OldFieldValue))
    }
  end;
  RereadRecord(tnSpMnPlan);
}
end;
tableEvent
table SpMnPl2;
cmCheckField:
{
/*
  case curField of
    #ValSpMnp2.Price:
    {
      var delta2: double = ValSpMnp2.Price - double(OldFieldValue);
      update current ValSpMnP2;
      case SpMnPlan.typeIzd of
        toUsl:
        {
          ValSpMnP.Price += delta2;
          #UpdateFieldValue(Price, delta2)
        }
        toMC:
        {
          ValSpMnP.VPrice += delta2;
          #UpdateFieldValue(VPrice, delta2)
        }
      end;
    }
    #ValSpMnp2.Summa:
    {
      var delta2: double = ValSpMnp2.Summa - double(OldFieldValue);
      update current ValSpMnP2;
      ValSpMnP.Summa += delta2;
      #UpdateFieldValue(Summa, delta2)
    }
  end;
  RereadRecord(tnSpMnPlan);
  RereadRecord(tnSpMnPl2);
*/
}
end;
handleEvent
  cmPrintDoc: 
  {
    StartNewVisual(vtRotateVisual, vfTimer, 'Формирование отчета', 0);
    PrintReport;
    StopVisual;
  }
end;

//=======================================================================
// 'ИНИЦИАЛИЗАЦИЯ ИНТЕРФЕЙСА'
//-----------------------------------------------------------------------
Function InitInter(pGldt : GlobData; piOm  : oMainVid) : Boolean;
{
  InitInter := True;
  gldt   := pGldt;
  iom    := piOm;
  insTbl := gldt.GetInsertTblMnpl;
  iSetPl := gldt.GetSetupMnf;
  if getfirst KatNotes where ((piStatusPlan == Katnotes.VidDoc and 0 == KatNotes.Status and 'Черновик' == KatNotes.Name)) = tsOk
    cStateMat := KatNotes.NRec;
  if getfirst KatNotes where ((piStatusPlan == Katnotes.VidDoc and 1 == KatNotes.Status and 'Согласовано' == KatNotes.Name)) = tsOk
    cStateDSE := KatNotes.NRec;
  if getfirst KatNotes where ((piStatusPlan == Katnotes.VidDoc and 2 == KatNotes.Status and 'Закрыта' == KatNotes.Name)) = tsOk
    cStateErr := KatNotes.NRec;
}

Function DoneInter : Boolean;
{
  Result := True;
  if (Not NullVipRef(gldt))
    FreeVipInterface(gldt);
  if (Not NullVipRef(insTbl))
    FreeVipInterface(insTbl);
  if (Not NullVipRef(iSetPl))
    FreeVipInterface(iSetPl);
}

Function SetOwner( ccMnPlan:Comp ) : Boolean;
{
  Result := True;
  cCurMnPlan := ccMnPlan;
  if (GetFirst MnPlan <> tsOk)
  {
    Message(''#3'iInterfSys_301.SetOwner: Ошибка установки документа', Error);
    Exit;
  }
  if (Not iSetPl.InitAll(MnPlan.cWayAccou))
  {
    Message(''#3'iInterfSys_301.SetOwner: Ошибка инициализации шаблона', Error);
    Exit;
  }
  cRoleIzd := iSetPl.GetKatRoleNRecObj(1);
}
Procedure EventSetParVid( wFlag: word );
{
  #__UNUSED__(wFlag)
}
Function  SetWindowVid( sp:String ) : Boolean;
{
  #__UNUSED__(sp)
  Result := True;
}
Function  GetCurPos( Var pWlist:Word ) : Comp;
{
  pWlist := Word(0);
  Result := SpMnPlan.NRec;
}
Procedure MySetColumnTitle;
{
}
Procedure FillHaveInReserv( Date2Q:Date );
{
  #__UNUSED__(Date2Q)
}
Function CheckEnableUseInterface(
                                 SysNumVid       : Word;
                                 WayAccouNRec    : Comp;
                                 NumVid_WayAccou : Comp;
                                 Flag            : Word
                                ) : Boolean;
{
  #__UNUSED__(NumVid_WayAccou, Flag, WayAccouNRec)
  Result := False;
  if (SysNumVid <> 24)
  {
    Message('Данный интерфейс работает только с представлением << Производственный план >>');
    exit;
  }
  Result := True;
}
Function GetNameInter : String;
{
 GetNameInter := 'iInterfSys_301';
}
Function GetNameInterPr : String;
{
 GetNameInterPr := 'iInterfSetup_301' ;
}
Function GetNum : Word;
{
 GetNum := 10301;
}
Function GetName : String;
{
  Result := 'Отчет по плановой себестоимости в иерархии';
}
Function GetMemo( st:oSteckCommonString ) : Boolean;
{
  st.Push('Отчет по плановой себестоимости в иерархии');
  Result := True;
}

//=======================================================================
// 'Получить установить параметр'
//-----------------------------------------------------------------------
Function SetGetParam( Var  FlagParam : LongInt;
                      Var  Direction : word;
                      Var  cValue    : Comp  ;
                      Var  dValue    : TSumma;
                      Var  lValue    : LongInt;
                      Var  wValue    : Word  ;
                      Var  dtValue   : Date  ;
                      Var  dttValue  : DateTime;
                      Var  sValue    : s250 ) : Boolean;
{
  #__UNUSED__(FlagParam, Direction, cValue, dValue, lValue, wValue, dtValue, dttValue, sValue)
  Result := True;
}
end.

VipInterface iInterfSetup_301 Implements oInterfSetup Licensed(Free) parameters(cFormPl: comp);
Interface iInterfSetup_301 'Настройка' (,hcNoContext,) EscClose,doAccept;

Create View
Var
  cFormPl : Comp;
As Select
  FormPl.*
From
  FormPl Where ((cFormPl == FormPl.NRec));

Parameters cFormPl;

//=======================================================================
//'ИНИЦИАЛИЗАЦИЯ ИНТЕРФЕЙСА
//-----------------------------------------------------------------------
Function asInitInter( p_cFormPl:Comp ) : Boolean;
{
  cFormPl := p_cFormPl;
  Result := True;
}

//=======================================================================
//'ЗАВЕРШЕНИЕ РАБОТЫ С ИНТЕРФЕЙСОМ
//-----------------------------------------------------------------------
Function asDoneInter : Boolean;
{
  Result := True;
}

//=======================================================================
//'ПО КОМАНДЕ CMSETDEFAULT
//-----------------------------------------------------------------------
Procedure asOnCmSetDefault;
{
}

//=======================================================================
//'ПРИ ВСТАВКЕ НАСТРОЙКИ В ШАБЛОН
//-----------------------------------------------------------------------
Procedure asOnSetWayAccou( p_cWayAccou:Comp );
{
  #__UNUSED__(p_cWayAccou)
}

//=======================================================================
//'Получить установить параметр
//-----------------------------------------------------------------------
Function SetGetParam ( Var  FlagParam : LongInt;
                       Var  Direction : word;
                       Var  cValue    : Comp  ;
                       Var  dValue    : TSumma;
                       Var  lValue    : LongInt;
                       Var  wValue    : Word  ;
                       Var  dtValue   : Date  ;
                       Var  dttValue  : DateTime;
                       Var  sValue    : string[250] ) : Boolean;
{
  #__UNUSED__(FlagParam, Direction, cValue, dValue, lValue, wValue, dtValue, dttValue, sVAlue)
  Result := True;
}
//-----------------------------------------------------------------------

//=======================================================================
HandleEvent  //'he interface
//-----------------------------------------------------------------------
cmInit:
{
  if (GetFirst FormPl <> tsOk)
  {
    Message(''#3'Ошибка поиска в таблице FormPl:'#13#3 + 'Записи FormPl.NRec = ' + Trim(String(cFormPl)) + ' не существует', Error + CancelButton);
    Abort;
    Exit;
  }
  Message(''#3'Данный интерфейс в настройке не нуждается');
  Abort;
  Exit;
}
End;  //'he interface
End.  //'interface
