#include demand_report.vih
#component "M_MnPlan"
Interface demand_report 'отчет о внешней потребности на основании плана снабжения';
create view
 var
   _cMnPlan : comp;
   _dateB
 , _dateE : date;
from
   MnPlan
 , SpMnPlan
 , SpMnPl
 , KatMC
 , ValSpMnP
where ((         _cMnPlan == MnPlan.Nrec
          and MnPlan.Nrec == SpMnPlan.cMnPlan
        and SpMnPlan.Nrec == SpMnPl.cSpMnPlan
        and SpMnPlan.cIzd == KatMC.Nrec
          and SpMnPl.Nrec == ValSpMnP.cSpMnPl
  ))
;

window winSetParam 'Параметры отчета';
Screen scrSetParam;
  Fields
    _dateB  : NoProtect;
    _dateE  : NoProtect;
  buttons
    cmOK,,,;
    cmCancel,,,;
<<'Внешняя потребность на основании плана снабжения'

Период с .@@@@@@@@@@ по .@@@@@@@@@@

  <.Сформировать.>        <. Отмена .>
>>
end;
end;
windowevent winSetParam ;
 cmOK: {
   closewindowex(winSetParam, cmDefault)
 }
end;

function CreateExcel (FExcelName : string) : boolean;
{
  StartNewVisual(vtRotateVisual, vfBreak+vfTimer, 'Инициализация EXCEL', 1);
    result := true;

    DeleteFile(FExcelName);

    if (not xlCreateExcel(FExcelName, true))
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit;
    }

    if (not xlIsExcelValid)
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit
    }
  var xlCount : word;
  xlCount := 0;
   Do
   {
    xlGetSheetsCount(xlCount);
    xlDeleteSheet(xlCount);
   } while xlCount > 1

    xlSetActiveSheet(1);
    xlSetSheetName(1, 'Потребность вненей поставки_'+UserName);

   StopVisual('',0);
}
Procedure MyPrintMatrixToExcel(var nrow, nrowReal : longint);
{
 if nrow = 100 then
  {
   xlWritematrixToExcel(nrowReal,1);
   xlclearMatrix;
   nrowReal := nrowReal + nrow-1;
   nrow := 1;
  }
}

Procedure PrintReport_Matrix; {

  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 // StartNewVisual(vtRotateVisual, vfBreak+vfTimer, 'Формирование отчета', 1);
 StartNewVisual(vtRotateVisual, vfTimer, 'Формируется отчет', 1);
 xlCreateMatrix(100,17);

 var Nrow0, nrow0FrameBold, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;

 xlSetFontStyle(1,nrow,1,nrow,6);

 Nrow++;

 xlStWriteToMatrix(nrow, 1,'Фильтр по номенклатуре:');
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по поставщику: все');
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по Плановику поставки: все');

 xlStWriteToMatrix(nrow, 1,'Номенклатура');
 xlMergeCells(nrow,1,nrow+1,1);
 xlStWriteToMatrix(nrow, 2,'Вид продукции');
 xlMergeCells(nrow,2,nrow+1,2);
 xlStWriteToMatrix(nrow, 3,'Модель');
 xlMergeCells(nrow,3,nrow+1,3);
 xlStWriteToMatrix(nrow, 4,'Поставщик');
 xlMergeCells(nrow,4,nrow,5);
 xlStWriteToMatrix(nrow, 6,'Квота');
 xlMergeCells(nrow,6,nrow+1,6);
 xlStWriteToMatrix(nrow, 6,'Склад внешней поставки');
 xlMergeCells(nrow,6,nrow+1,6);
 xlStWriteToMatrix(nrow, 7,'Код Плановика поставки');
 xlMergeCells(nrow,7,nrow+1,7);
 xlStWriteToMatrix(nrow, 8,'ЕИ');
 xlMergeCells(nrow,8,nrow+1,8);
 xlStWriteToMatrix(nrow, 9,'Потребность');
  Nrow++;
 xlStWriteToMatrix(nrow, 4,'Код');
 xlStWriteToMatrix(nrow, 5,'Наименование');
  Nrow++;
 _loop SpMnPlan {
   MyPrintMatrixToExcel(Nrow,NrowReal);
   xlStWriteToMatrix(nrow, 1, KatMC.name);
   Nrow++;
 }

  xlwraptext(1, 1, nrow+nrowreal-2, 17);
  setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, 2, 1, nrow+nrowreal-2, 11);

 xlSetNumberFormat('# ##0,00',3,7,nrow+nrowreal-2, 10);

 xlWriteMatrixToExcel(NrowReal,1);
 xlKillExcel;
 StopVisual('',0);
}

procedure printreport(__cMnPlan : comp; _TypeReport : string = 'EXCEL'); {
 set _cMnPlan := __cMnPlan;
 if getfirst MnPlan <> tsOK exit;

 if RunWindowModal(winSetParam) != cmDefault exit;

 if _TypeReport = 'EXCEL' then PrintReport_Matrix;
}

end.
