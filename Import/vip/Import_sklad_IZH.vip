/*************************************************************************************************\
* Наименование: Ижевск. Импорт складов (НЕ подразделений)                                         *
* Контур/Модуль:                                                                                  *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#component "GP"
Interface Import_sklad_IZH 'Импорт СКЛАДОВ (НЕ подразделений). Ижевск';

#include VarsTypes.var

Table Struct tRows (
    nrow          : longint
  , skladKod      : string  //Склад
  , skladName     : String  // Наименование
  , cSklad        : comp
  , podrUpKod     : string  // Подразделение
  , cpodrup       : comp
  , tipKod        : string  // Тип. ВА - справочник
  , uchastok      : string  // Участок
  , skladBrak     : boolean // Б (Склад брака)
  , skladGP       : boolean // Г (Склад ГП)
  , skladZIP      : boolean // Склад ЗИПа
  , jrnInternMove : string  // журнал внутренних переносов
  , skladVid      : string  // Вид склада KATPODR.cfunc
  , skladKod1C    : string  // Код склада в 1С
  , skladTel      : string  // Телефон KATPODR.TEL
  , SkladBlock    : date    // Заблокирован
  , SkladDateForb : date    // Дата запрета разноски операций

  , FlagErr       : byte
  , Descr         : string
)
with index (
   Index1 = nrow
)
;


procedure MyLog(_log : string); forward;

create view
 var
  dateformat : string = 'DD.MM.YYYY' ;
  ListName   : string = 'Лист1';

  _dateArch  : date = to_date(01,01,2024);

    File_input
  , _strResult
  , _logFile   : string= '';
  typeTable  : word = 0;

from
    KatPodr
  , depfunc
  , tRows
  , tRows tRows_BR
;

PROCEdURE ClearAll;
{
 delete all tRows;
 rereadrecord;
} // PROCEdURE ClearAll;

PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte = 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    case typeTable of
     0 : {
       _recArray[_npp].def := 'Склад'                         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Подразделение'                 ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Тип'                           ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Участок'                       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Наименование'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Б (Склад брака)'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Г (Склад ГП)'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Склад ЗИПа'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Журнал внутренних переносов'   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Вид склада'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Код склада в 1С'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Телефон'                       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Заблокирован'                  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Дата запрета разноски операций'
     }
    end;
}

Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}


#declare seterror(_str)
  tRows.FlagErr := 2 ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

#declare setwarning(_str)
  tRows.FlagErr := if(tRows.FlagErr > 1, tRows.FlagErr , 1) ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

function getPodr(_kod : string) : comp;
{
  result := 0h;
   if getfirst katpodr where ((_kod == katpodr.kod)) = tsOK then {
     result := katpodr.nrec;
    }
}
Function isExistsDepFuncs( _code : longint ): boolean; {
 result := false;
  if getfirst depfunc where ((_code == depfunc.CFUNC)) = tsOK {
    result := true;
  }
}
procedure InsertUpdateDepFuncs(_code: longint; _name : string); {
  if not isExistsDepFuncs(_code) then {
    insert depfunc set
       depfunc.CFUNC  := _code
     , depfunc.NMFUNC := _name
    ;
  }
  else {
    if depfunc.NMFUNC <> _name {
      update current depfunc set depfunc.NMFUNC := _name
    }
  }
}
procedure FillDepFunc; {
  InsertUpdateDepFuncs(1, 'Центральные склады');
  InsertUpdateDepFuncs(2, 'Внутренние склады Цеха_71');
  InsertUpdateDepFuncs(3, 'Внутренние склады подразделений');
  InsertUpdateDepFuncs(4, 'ИРК');
  InsertUpdateDepFuncs(5, 'Производственные участки');
  InsertUpdateDepFuncs(6, 'Склад ЗИП(ГП)');
  InsertUpdateDepFuncs(7, 'Склады готовой продукции');
  InsertUpdateDepFuncs(8, 'Производственные участки для списания FIP');
}

Procedure CheckErrors_tRows;
{
  update tRows set tRows.FlagErr := 0, tRows.Descr := '';
  StartNewVisual(vtIndicatorVisual , vfTimer, 'определение ошибок',recordsintable(tntRows));

  _loop tRows {
    nextvisual;
       update current tRows set tRows.cSklad := getPodr(tRows.skladKod);
       update current tRows set tRows.cPodrUp := getPodr(tRows.podrUpKod);

      if tRows.cSklad = 0h {
         #setwarning('|склад будет создан')
      }

      if tRows.cPodrUp = 0h {
        #seterror('|не найдено вышестоящее подразделение "'+tRows.podrUpKod+'" в БД')
      }

     if not isExistsDepFuncs(tRows.skladVid) {
        #seterror('|не найдена функция подразделений "'+tRows.skladVid+'"')
     }

    update current tRows;
   }
    if visualizationactive  StopVisual('The End',vfTimer);
}


#include OpenFileExcelSearchCells.vpp


procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Import_podr_IZH_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
 var _i: byte;
 var _podrKod, _PTZpodrKod : string = '';
  clearBuffer(tntRows);
  tRows.nrow := _nrow;

    for(_i := 1; _I <= getLimit(_recArray); _i++) {
     case typeTable of
      0: {
         case upcase(_recArray[_i].def) of
          Upcase( 'Склад'                          ) : tRows.skladKod  := Trim(_recArray[_i].value);
          Upcase( 'Подразделение'                  ) : tRows.podrUpKod := Trim(_recArray[_i].value);
          Upcase( 'Тип'                            ) : tRows.tipKod    := Trim(_recArray[_i].value);
          Upcase( 'Участок'                        ) : tRows.uchastok  := Trim(_recArray[_i].value);
          Upcase( 'Наименование'                   ) : tRows.skladName := Trim(_recArray[_i].value);
          Upcase( 'Б (Склад брака)'                ) : tRows.skladBrak := if(upcase(Trim(_recArray[_i].value)) = 'ДА', True, False);
          Upcase( 'Г (Склад ГП)'                   ) : tRows.skladGP   := if(upcase(Trim(_recArray[_i].value)) = 'ДА', True, False);
          Upcase( 'Склад ЗИПа'                     ) : tRows.skladZIP  := if(upcase(Trim(_recArray[_i].value)) = 'ДА', True, False);
          Upcase( 'Журнал внутренних переносов'    ) : tRows.jrnInternMove := Trim(_recArray[_i].value);
          Upcase( 'Вид склада'                     ) : tRows.skladVid      := Trim(_recArray[_i].value);
          Upcase( 'Код склада в 1С'                ) : tRows.skladKod1C    := Trim(_recArray[_i].value);
          Upcase( 'Телефон'                        ) : tRows.skladTel      := Trim(_recArray[_i].value);
          Upcase( 'Заблокирован'                   ) : tRows.SkladBlock    := if(upcase(Trim(_recArray[_i].value)) = 'ДА', _dateArch, to_date(0,0,0));
          Upcase( 'Дата запрета разноски операций' ) : tRows.SkladDateForb := StrToDate(Trim(_recArray[_i].value),dateformat);
         end;
      }
    end;
  }
  if tRows.skladKod <> '' then insert current tRows;
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);

procedure Insert_Podr; {
  Setvisualheader('Создание/обновление складов');
  _loop tRows {
       if tRows.cSklad = 0h {
             insert katpodr set
               katpodr.kod   := tRows.skladkod
             , katpodr.name  := tRows.skladname
             , katpodr.sklad := 1
             , katpodr.LASTDATE := tRows.SkladBlock
             , katpodr.dto      := tRows.SkladDateForb
             , katpodr.CFUNC    := tRows.skladVid
             , katpodr.tel      := tRows.skladTel
            ;
          update current tRows set tRows.cSklad := katpodr.nrec;
          mylog('Добавлен склад ' + tRows.skladkod + ' ' + tRows.skladname);
        } else {
          if getfirst katpodr where ((tRows.cSklad == katpodr.nrec)) = tsOK {
            if katpodr.sklad <> 1 {
              update current katpodr set katpodr.sklad := 1;
              mylog('Обновлен тип подразделения на "склад" у склада ' + tRows.skladkod + ' ' + tRows.skladname);
            }
            if katpodr.name <> tRows.skladname {
              update current katpodr set katpodr.name := tRows.skladname;
              mylog('Обновлено название подразделения ' + tRows.skladkod + ' ' + tRows.skladname);
            }
            if katpodr.LASTDATE <> tRows.SkladBlock {
              update current katpodr set katpodr.LASTDATE := tRows.SkladBlock;
              mylog('Обновлено "В архиве с" на "'+datetostr(katpodr.LASTDATE, 'DD/MM/YYYY')+'" у склада ' + tRows.skladkod + ' ' + tRows.skladname);
            }
            if katpodr.dto <> tRows.SkladDateForb {
              update current katpodr set katpodr.dto := tRows.SkladDateForb;
              mylog('Обновлено "Запрет выбора с" на "'+datetostr(katpodr.dto, 'DD/MM/YYYY')+'" у склада ' + tRows.skladkod + ' ' + tRows.skladname);
            }
            if katpodr.CFUNC <> tRows.skladVid {
              update current katpodr set katpodr.CFUNC := tRows.skladVid ;
              mylog('Обновлено поле "Функция" на "'+string(katpodr.CFUNC)+'" у склада ' + tRows.skladkod + ' ' + tRows.skladname);
            }
            if katpodr.tel <> tRows.skladTel {
              update current katpodr set katpodr.tel := tRows.skladTel;
              mylog('Обновлено поле "Телефон" на "'+katpodr.tel+'" у склада ' + tRows.skladkod + ' ' + tRows.skladname);
            }
          }
        }

      ssetattr(coKatPodr, tRows.cSklad, 'Тип'                        , tRows.tipKod);
      ssetattr(coKatPodr, tRows.cSklad, 'Участок'                    , tRows.uchastok);
      ssetattr(coKatPodr, tRows.cSklad, 'Журнал внутренних переносов', tRows.jrnInternMove);
      ssetattr(coKatPodr, tRows.cSklad, 'Код 1С'                     , tRows.skladKod1C);

      bsetattr(coKatPodr, tRows.cSklad, 'Б (Склад брака)', tRows.skladBrak);
      bsetattr(coKatPodr, tRows.cSklad, 'Г (Склад ГП)'   , tRows.skladGP  );
      bsetattr(coKatPodr, tRows.cSklad, 'Склад ЗИПа'     , tRows.skladZIP );
  }

  Setvisualheader('Обновление вышестоящих подразделений');
  _loop tRows {
    if getfirst katpodr where ((tRows.cSklad == katpodr.nrec)) = tsOK {
      if katpodr.cpodr <> tRows.cpodrup {
        update current katpodr set katpodr.cpodr := tRows.cpodrup;
        mylog('Обновлено вышестоящее подразделение у ' + tRows.skladkod + ' ' + tRows.skladname);
      }
    }
  }
}

Screen scrImportPodr;
  show at (,,, 7);
  Fields
    ListName   : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    dateformat : NoProtect,{Font = {backcolor = if(dateformat = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
    _dateArch : NoProtect, {Font = {backcolor = if(_dateArch = to_date(0,0,0), colorneed,0);}};
    _strResult : skip, {Font = {backcolor = if(_strResult <> '', colorneed,0);}};

  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт складов из EXCEL'
`Наименование листа`.@@@@@@@@@@@@@@@@ `Формат даты`.@@@@@@@@@@@
`EXCEL Файл`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`для заблокированных установить"В архиве с"`.@@@@@@@@@@

.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  <.Загрузить файл.>           <.Создать/обновить склады.>            <. Отмена .>
>>
end;
browse brtRows_br('',,sci1Esc);
 show at(,8,,);
table tRows_br;
fields
 {Font = {backcolor = getColor(tRows_br.FlagErr);}};
  tRows_br.nrow  'Строка','в файле' headerAlign = centered:protect,[4];
  tRows_br.skladKod       'Склад'                         headerAlign = centered:protect,[4];
  tRows_br.skladName      'Наименование'                  headerAlign = centered:protect,[4];
  tRows_br.podrUpKod      'Подразделение'                 headerAlign = centered:protect,[4];
  tRows_br.tipKod         'Тип'                           headerAlign = centered:protect,[4];
  tRows_br.uchastok       'Участок'                       headerAlign = centered:protect,[4];
  tRows_br.skladBrak      'Б (Склад брака)'               headerAlign = centered:protect,[4];
  tRows_br.skladGP        'Г (Склад ГП)'                  headerAlign = centered:protect,[4];
  tRows_br.skladZIP       'Склад ЗИПа'                    headerAlign = centered:protect,[4];
  tRows_br.jrnInternMove  'журнал внутренних переносов'   headerAlign = centered:protect,[4];
  tRows_br.skladVid       'Вид склада'                    headerAlign = centered:protect,[4];
  tRows_br.skladKod1C     'Код склада в 1С'               headerAlign = centered:protect,[4];
  tRows_br.skladTel       'Телефон'                       headerAlign = centered:protect,[4];
  tRows_br.SkladBlock     'Заблокирован'                  headerAlign = centered:protect,[4];
  tRows_br.SkladDateForb  'Дата запрета разноски операций' headerAlign = centered:protect,[4];
  tRows_br.Descr 'Описание'         headerAlign = centered:protect,[8];
end;

handleevent
cminit:{

 FillDepFunc;
 rereadrecord;
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор файла с подразделениями для загрузки');
      ClearAll;
    }
  end;
rereadrecord;
}
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона', error) ;
     stop;abort;exit;
    }
    if ListName = '' {
     message('не задано наименование EXCEL листа', error);
     stop;abort;exit;
    }

  if _dateArch = to_date(0,0,0) {
    Message('Установите дату "В архиве с"', error);
    stop; abort; exit;
  }

//    var _srvFileName : string = GetStringParameter('Files', 'OutputFilesDirectory', 0) + OleGenerateGUID+'.xlsx';
    MyLog('File_input ' + File_input);
//    CopyMoveFile(File_input,_srvFileName,false, ecmfClientFrom + ecmfServerTo );
    GetFileFromClient(File_input, true);
    File_input := ConvertClientPathToSrv(File_input);
    MyLog('on server File_input ' + File_input);

  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    ClearAll;
    typeTable := 0;
    fillrecArrayByTypeTable;

    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);
    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
     if visualizationactive  StopVisual('The End',vfTimer);
     if visualizationactive  StopVisual('The End',vfTimer);

      stop; abort; exit;
    }

  CheckErrors_tRows;
    set _strResult := '';
   if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    set _strResult := 'В файле есть ошибки. Загрузка невозможна';
    if visualizationactive  StopVisual('The End',vfTimer);
    if visualizationactive  StopVisual('The End',vfTimer);
    stop; abort; exit;
  }

 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);
  rereadrecord(tntRows_br);
} // cmOK
cmCreateDocs: {
  if getfirst tRows <> tsOK {
    Message('Сначала загрузите файл',error);
    stop; abort; exit;
  }
  if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    Message('В файле есть ошибки. Загрузка невозможна',error);
    stop; abort; exit;
  }

  var _isError : boolean = false;
   StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    Insert_Podr;
   if visualizationactive  StopVisual('The End',vfTimer);
   ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
   rereadrecord(tntRows_br);
}
end;
end.
