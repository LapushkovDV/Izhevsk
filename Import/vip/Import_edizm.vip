/*************************************************************************************************\
* Наименование: Ижевск. Импорт складов (НЕ подразделений)                                         *
* Контур/Модуль:                                                                                  *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#component "GP"
Interface Import_edizm 'Импорт едниц измерения';

#include VarsTypes.var

Table Struct tRows (
    nrow    : longint
  , name    : string // наименование
  , kod     : string // КодНоменклатуры
  , abbr    : string // Аббревиатура
  , kodSOEI : string // КодСОЕИ
  , diskret : word // делимость 2 - делимая, 1  - неделимая
  , FlagErr       : byte
  , Descr         : string
)
with index (
   Index1 = nrow
)
;


procedure MyLog(_log : string); forward;

create view
 var
  ListName   : string = 'Лист1';


    File_input
  , _strResult
  , _logFile   : string= '';
  typeTable  : word = 0;

from
    Kated
  , attrnam an_check
  , tRows
  , tRows tRows_BR
;

PROCEdURE ClearAll;
{
 delete all tRows;
 rereadrecord;
} // PROCEdURE ClearAll;

PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte = 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    case typeTable of
     0 : {
       _recArray[_npp].def := 'Наименование'   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Код'            ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Аббревиатура'   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Код СОЕИ'        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Делимая'        ;
     }
    end;
}

Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}


#declare seterror(_str)
  tRows.FlagErr := 2 ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

#declare setwarning(_str)
  tRows.FlagErr := if(tRows.FlagErr > 1, tRows.FlagErr , 1) ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end



Procedure CheckErrors_tRows;
{
  update tRows set tRows.FlagErr := 0, tRows.Descr := '';
  StartNewVisual(vtIndicatorVisual , vfTimer, 'определение ошибок',recordsintable(tntRows));

  _loop tRows {
    nextvisual;

      if tRows.abbr= '' {
        #seterror('|пустая аббревиатура')
      }

      if tRows.name = '' {
        #seterror('|пустое наименование')
      }

      if tRows.diskret = 0 {
        #seterror('|некорректная делимость')
      }
    update current tRows;
   }
   if visualizationactive  StopVisual('The End',vfTimer);
}


#include OpenFileExcelSearchCells.vpp


procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Import_edizm_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

function getKatEdByKod( _kod, _an_name : string) : comp ;{
 result := 0h;
 if _kod = '' then exit;
 var _ckated : comp = 0h;
   _try {
      sql
      select
         kated.nrec
      from kated
      join attrnam on attrnam.wtable = 1412 and attrnam.name = :(_an_name)
      join attrval on attrval.wtable = attrnam.wtable and kated.nrec = attrval.crec and attrval.cattrnam = attrnam.nrec
      where attrval.vstring = :(_kod)
      into (_ckated);
    } _except
       else {
       exit;
      }
  result := _ckated;
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
 var _i: byte;
  clearBuffer(tntRows);
  tRows.nrow := _nrow;

    for(_i := 1; _I <= getLimit(_recArray); _i++) {
     case typeTable of
      0: {
         case upcase(_recArray[_i].def) of
          Upcase('Наименование'   ) : tRows.name    := Trim(_recArray[_i].value);
          Upcase('Код') : tRows.kod     := Trim(_recArray[_i].value);
          Upcase('Аббревиатура'   ) : tRows.abbr    := Trim(_recArray[_i].value);
          Upcase('Код СОЕИ'        ) : tRows.kodSOEI := Trim(_recArray[_i].value);
          Upcase('Делимая'        ) : tRows.diskret := if(upcase(Trim(_recArray[_i].value)) = 'НЕТ',1,2);
         end;
       }
     End;
  }
  if tRows.name <> '' then insert current tRows;
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);

procedure Insertupdate_kated; {
  Setvisualheader('Создание/обновление ТМЦ');
  StartNewVisual(vtIndicatorVisual, vfTimer, 'Создание/обновление ТМЦ',recordsintable(tntRows));

  _loop tRows {
    nextvisual;

     if( getfirst kated where upcase(kated.name) = upcase(trows.name)) =tsOK {
       if kated.abbr <> trows.abbr update current kated set kated.abbr := trows.abbr;
       ssetattr(cokated, kated.nrec, 'Код СОЕИ', tRows.kodSOEI);
       ssetattr(cokated, kated.nrec, 'Код'     , tRows.kod);
       continue;
      }

      if( getfirst kated where upcase(kated.ABBR) = upcase(trows.ABBR)) =tsOK {
       if kated.name <> trows.name update current kated set kated.name := trows.name;
       ssetattr(cokated, kated.nrec, 'Код СОЕИ', tRows.kodSOEI);
       ssetattr(cokated, kated.nrec, 'Код'     , tRows.kod);
       continue;
      }

      var _ced : comp = 0h;
      _ced := getKatEdByKod(tRows.kod,'Код');
      if _ced <> 0h {
       if kated.name <> trows.name update current kated set kated.name := trows.name;
       if kated.abbr <> trows.abbr update current kated set kated.abbr := trows.abbr;
       ssetattr(cokated, kated.nrec, 'Код', tRows.kod);
       continue;
      }

      _ced := getKatEdByKod(tRows.kod,'Код СОЕИ');
      if _ced <> 0h {
       if kated.name <> trows.name update current kated set kated.name := trows.name;
       if kated.abbr <> trows.abbr update current kated set kated.abbr := trows.abbr;
       ssetattr(cokated, kated.nrec, 'Код СОЕИ', tRows.kodSOEI);
       continue;
      }

      mylog('insert kated  ' + trows.name);
          insert kated set
             kated.name    := trows.name
           , kated.abbr    := trows.abbr
           , kated.diskret := trows.diskret
          ;
       ssetattr(cokated, kated.nrec, 'Код СОЕИ', tRows.kodSOEI);
       ssetattr(cokated, kated.nrec, 'Код'     , tRows.kod);

  }
  stopvisual;
}

Screen scrImportMC;
  show at (,,, 7);
  Fields
    ListName   : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
    _strResult : skip, {Font = {backcolor = if(_strResult <> '', colorneed,0);}};

  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт единиц измерения из EXCEL'
`Наименование листа`.@@@@@@@@@@@@@@@@
`EXCEL Файл`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Поиск ед измерения осуществляется в таком порядке: Наименование - Аббревиатура - КОД - Код СОЕИ
Как только нашли единицу по какому то полю, то остальные поля обновляются на значение из файла
Если не найдена - добавляется в справочник
  <.Загрузить файл.>           <.Создать/обновить ТМЦ.>            <. Отмена .>
>>
end;
browse brtRows_br('',,sci1Esc);
 show at(,8,,);
table tRows_br;
fields
 {Font = {backcolor = getColor(tRows_br.FlagErr);}};
  tRows_br.nrow          'Строка','в файле' headerAlign = centered:protect,[4];
  tRows_br.kod      'Код' headerAlign = centered:protect,[4];
  tRows_br.kodSOEI  'Код СОЕИ' headerAlign = centered:protect,[4];
  tRows_br.abbr     'Аббр' headerAlign = centered:protect,[4];
  tRows_br.name     'Наименование' headerAlign = centered:protect,[8];
  if(tRows_br.diskret = 2, 'Делимая', if(tRows_br.diskret = 1,'неделимая','???????')) 'Делимость' headerAlign = centered:protect,[4];
  tRows_br.Descr          'Описание'         headerAlign = centered:protect,[8];
end;

procedure checkanstr(_wtable : word; _name : string); {
   if getfirst an_check where ((_wtable == an_check.wtable
                              and _name == an_check.name)) <> tsOK {
     insert an_check set
        an_check.wtable := _wtable
      , an_check.name   := _name
      , an_check.attrtype := cgAttrType_Str
     ;
   }
}
handleevent
cminit:{
 checkanstr(coKated, 'Код СОЕИ');
 checkanstr(coKated, 'Код');
 rereadrecord;
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор файла с подразделениями для загрузки');
      ClearAll;
    }
  end;
rereadrecord;
}
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона', error) ;
     stop;abort;exit;
    }
    if ListName = '' {
     message('не задано наименование EXCEL листа', error);
     stop;abort;exit;
    }




//    var _srvFileName : string = GetStringParameter('Files', 'OutputFilesDirectory', 0) + OleGenerateGUID+'.xlsx';
    MyLog('File_input ' + File_input);
//    CopyMoveFile(File_input,_srvFileName,false, ecmfClientFrom + ecmfServerTo );
    GetFileFromClient(File_input, true);
    File_input := ConvertClientPathToSrv(File_input);
    MyLog('on server File_input ' + File_input);

  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    ClearAll;
    typeTable := 0;
    fillrecArrayByTypeTable;

    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);
    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
     if visualizationactive  StopVisual('The End',vfTimer);
     if visualizationactive  StopVisual('The End',vfTimer);

      stop; abort; exit;
    }

  CheckErrors_tRows;
    set _strResult := '';
   if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    set _strResult := 'В файле есть ошибки. Загрузка невозможна';
    if visualizationactive  StopVisual('The End',vfTimer);
    if visualizationactive  StopVisual('The End',vfTimer);
    stop; abort; exit;
  }

 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);
  rereadrecord(tntRows_br);
} // cmOK
cmCreateDocs: {
  if getfirst tRows <> tsOK {
    Message('Сначала загрузите файл',error);
    stop; abort; exit;
  }
  if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    Message('В файле есть ошибки. Загрузка невозможна',error);
    stop; abort; exit;
  }

  var _isError : boolean = false;
   StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    Insertupdate_kated;
   if visualizationactive  StopVisual('The End',vfTimer);
   ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
   rereadrecord(tntRows_br);
}
end;
end.
