/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#component "M_MnPlan"
Interface Import_ostatki 'Import_ostatki';
#include VarsTypes.var

procedure MyLog(_log : string); forward;
table struct tOstatki (
   cMc    : comp
 , cSklad : comp
 , Kol    : double
)
with index (
 ind0 =  cmc
);
create view
var
  ListName   : string = 'Лист1';
  StrResult  : string = '';
  File_input : string;
  _logFile   : string= '';
  typeTable  : word = 0;
  _dateAktIzlishki : date;
  _KatSoprName : string='';
from
   KatMc
 , kated
 , katotped
 , katpodr
 , groupmc
 , katsopr
 , spsopr
 , soprhoz
 , tOstatki
;


PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    _recArray[_npp].def := 'Баркод'     ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Склад'      ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Количество'
}

function getactiveotped(_cMc : comp) : comp; {
  result := 0h;
  if getfirst katotped where ((  1 == katotped.prmc
                          and _cMc == katotped.cmcusl
                             and 1 == katotped.akt))  = tsok     {
    result := katotped.nrec
  }
}
procedure InsertAktIzlishki;
{

var _npp : longint = 0;
    var _KatSoprName : string= 'Импорт остатков ' + username +    ' ' +DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS');
      _loop tOstatki
//        and (tInsertDocs.schetBU = '60.02' or tInsertDocs.schetBU = '62.02')
       {
         _npp++;
         setvisualheader('Формирование актов об излишках'+
          ''#13'' + string(_npp));

            if(getfirst katsopr where ((611 == katsopr.vidsopr
                                   ))
               and KatSopr.cpodrto  = tOstatki.cSklad
               and KatSopr.dsopr    = _dateAktIzlishki
               and instr(_KatSoprName,KatSopr.NAME) = 1
               and KatSopr.dopr = to_date(0,0,0)
            ) <> tsOK {
                                   insert KATSOPR set
                                     KatSopr.NAME     := _KatSoprName
                                    ,KatSopr.DESCR    := sgettune('user.descr')
                                    ,KatSopr.DESGR    := sgettune('user.desgr')
                                    ,KatSopr.VHODNAL  := 1
                                    ,KatSopr.STATUS   := 1
//                                    ,KatSopr.CNOTE   :=
//                                    ,katsopr.summa    := tInsertDocs.summa
                                    ,KatSopr.TIPSOPR  := 0
                                    ,KatSopr.DSOPR    := _dateAktIzlishki
                                    ,KatSopr.DPRICE   := _dateAktIzlishki
                                    ,KatSopr.YEARSOPR := year(_dateAktIzlishki)
                                    ,KatSopr.NSOPR    := '1'
                                    ,KatSopr.VIDSOPR  := 611
                                    ,KatSopr.cpodrto  := tOstatki.cSklad
//                                    ,KatSopr.CCALPLAN := tInsertDocs.ccalplan
                                  ;
                                   Insert soprhoz set
                                     soprhoz.CDOGOVOR := katsopr.cDogovor
                                   , soprhoz.CSOPRDOC := katsopr.nrec
                                   , soprhoz.DATOB    := katsopr.dsopr
                                   , soprhoz.TIPDOC   := katsopr.vidsopr
                                   , soprhoz.TIDKGAL  := katsopr.vidsopr
                                   , soprhoz.NODOC    := katsopr.nsopr
                                   , soprhoz.DESCR    := katsopr.descr
                                   , soprhoz.DESGR    := katsopr.desgr
                                   , soprhoz.SUMMA    := katsopr.summa
                                   , soprhoz.DIRECT   := 1
                                   , soprhoz.VHSUMHOZ := '+'
                                   , soprhoz.CORG     := katsopr.corg
                                 ;
                                 mylog('Сформирован акт об излишках ' + KatSopr.nsopr +' от '+ KatSopr.dsopr);
                              }

              Insert spsopr set
                 spsopr.CSOPR     := katsopr.nrec
               , spsopr.DSOPR     := katsopr.dsopr
               , spsopr.NPP       := 1
               , spsopr.PRMC      := 1
               , spsopr.CMCUSL    := tOstatki.cMc
               , spsopr.COTPED    := getactiveotped(tOstatki.cMc)
               , spsopr.KOL       := tOstatki.kol
               , spsopr.KOLOPL    := tOstatki.kol
               , spsopr.KOLFACT   := tOstatki.kol
               , spsopr.PRICE     := 0
               , spsopr.RPRICE    := 0
               , spsopr.PRICEN    := 0
               , spsopr.CGRNAL    := 0h
               , spsopr.VIDSOPR   := katsopr.vidsopr
               , spsopr.MANUALTAX := 1
               , spsopr.SUMNDS    := 0
              ;
//              update current KatSopr set katsopr.summa := katsopr.summa + spsopr.KOL*spsopr.PRICE;
//              update current soprhoz set soprhoz.summa := soprhoz.summa + spsopr.KOL*spsopr.PRICE;

              }

}

#include OpenFileExcelSearchCells.vpp

procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Importostatki_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

function getkated(_name : string) : comp; cacheable; {
  result := 0h;
  if( getfirst kated where (upcase(kated.name) = upcase(_name) ))= tsOK {
    result := kated.nrec
  }
}
function getgroupmc( _kod : string) : comp; cacheable; {
  result := 0h;
  if getfirst groupmc where ((_kod == groupmc.KOD)) <> tsOK {
     insert groupmc set
       groupmc.KOD  := _kod
     , groupmc.name := _kod
     , groupmc.lkod := length(_kod)
     , groupmc.cEd  := if(getkated('ШТ') = 0h, getkated('ШТУКА'),getkated('ШТ'))
    ;
  }
  result := groupmc.nrec
}
function getmc(_barkod : string) : comp;
{
  result := 0h;
   if getfirst katmc where ((_barkod == katmc.barkod)) <> tsOK then {
      insert katmc set
         katmc.name := _barkod
       , katmc.barkod  := _barkod
       , katmc.CGROUPMC := getgroupmc('000')
       , katmc.KGROUPMC := groupmc.KOD
       , katmc.ced := if(getkated('ШТ') = 0h, getkated('ШТУКА'),getkated('ШТ'))
       , katmc.CLASSGR := 1
       , katmc.CGRNAL := 0000000000000002h // основная ставка - так сделал для сокрости сборки ресурсы
     ;


      insert KatOtpEd set
         KatOtpEd.prmc    := 1
       , KatOtpEd.name    := kated.name
       , KatOtpEd.cMcUsl  := katmc.nrec
       , KatOtpEd.CKATED  := kated.nrec
       , KatOtpEd.KOEF    := 1
       , KatOtpEd.DISKRET := kated.DISKRET
       , KatOtpEd.ABBR    := kated.ABBR
      ;

    }
    result := katmc.nrec;
}

function getsklad(_Sklad_kod : string; _Sklad_name : string = '' ) : comp;{
//  mylog('getsklad _Sklad_kod  = '+_Sklad_kod );

 result := 0h;
 if(getfirst katpodr where ((_Sklad_kod == katpodr.kod)) and katpodr.isArch = 0 )= tsOK {
   result := katpodr.nrec;
 }
 else {
   if _Sklad_name  <> ''
    {
     if(getfirst katpodr where ((_Sklad_name == katpodr.name)) and katpodr.isArch = 0 )= tsOK {
        result := katpodr.nrec;
       }
    }
   }
//  mylog('getsklad result  = '+result);
}

Procedure fillostatki(_nrow : longint; _file : string); {
  var _i: byte;
  var  _kol : double = 0 ;
  var _Sklad, _barkod : string = '';
  var _cmc : comp = 0h;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
       Upcase( 'Баркод'    ) : _Barkod := _recArray[_i].value
       Upcase( 'Склад'     ) : _Sklad := _recArray[_i].value
       Upcase( 'Количество') : _kol := _recArray[_i].value
    end;
  }
  _cmc := getmc(_barkod);
  if _cmc = 0h {
        mylog('Ошибка! вставки записи в KATMC ')
  }
    var _cSklad : comp = getsklad(_Sklad);
  if _cSklad = 0h {
    mylog('Ошибка! row = ' + string(_nrow) + ' не найден склад ' + _Sklad)
  }

  insert tOstatki set
     tOstatki.cMc    := _cmc
   , tOstatki.cSklad := _cSklad
   , tOstatki.Kol    := _kol
 ;
}  // tInsertSaldoMC



PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
   fillostatki(_nrow, _file)
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);



Window winImportVCDMC;
Screen scrImportVCDMC;
  show at (,,, 7);
  Fields
    ListName   : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
    _dateAktIzlishki : noprotect;
  buttons
    cmOK,,,;

    cmCancel,,,;
<<'Импорт спецификации План сбыта из EXCEL'
    Наименование листа.@@@@@@@@@@@@@@@@
            EXCEL Файл.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Дата акта об излишках .@@@@@@@@@@@@@@@@

  <.Загрузить файл.>   <. Отмена .>
>>
end;
end;
windowevent winImportVCDMC;
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона',error) ;
     stop;abort;exit;
    }
    if ListName = '' {
     message('не указан EXCEL лист',error);
     stop;abort;exit;
    }
    if _dateAktIzlishki = to_date(0,0,0) {
     message('не указана дата акта об излишках',error);
     stop;abort;exit;
   }
   delete all tOstatki;
  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    fillrecArrayByTypeTable;
    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);
    if visualizationactive  StopVisual('The End',vfTimer);
   if visualizationactive  StopVisual('The End',vfTimer);

    ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');

    if message('Создать акты об излишках?', Confirmation + YesNo) = cmYes {
      StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
      InsertAktIzlishki;
      if visualizationactive  StopVisual('The End',vfTimer);
      if visualizationactive  StopVisual('The End',vfTimer);

      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');

    }
 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);

} // cmOK

end;


handleevent
cminit:{
  runwindowmodal(winImportVCDMC);
  closeinterface(-1);
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор шаблона для VCDMC');
    }
  end;
rereadrecord;
}

end;
end.
