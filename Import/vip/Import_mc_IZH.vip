/*************************************************************************************************\
* Наименование: Ижевск. Импорт складов (НЕ подразделений)                                         *
* Контур/Модуль:                                                                                  *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#component "GP"
Interface Import_mc_IZH 'Импорт ТМЦ. Ижевск';

#include VarsTypes.var

Table Struct tRows (
    nrow          : longint
  , mckod         : string // КодНоменклатуры          KATMC.BARKOD
  , mcobozn       : string // ОбозначениеНоменклатуры  KATMC.OBOZN
  , mcname        : string // НаименованиеНоменклатуры KATMC.name
  , cmc           : comp
  , marka         : string // Марка ATTRVAL.VSTRING
  , gostmarka     : string // ГОСТ_ТУ_Марки ATTRVAL.VSTRING
  , techHarakter  : string // ТехническаяХарактеристика KATMC.REMMC
  , gost          : string // ГОСТ_ТУ KATMC.GOST
  , tnved         : string // КодТНВЭД KATMC.TNVED
  , SIZEY         : double // ВысотаТолщина KATMC.SIZEY
  , SIZEZ         : double // ГлубинаДлина KATMC.SIZEZ
  , SIZEX         : double // ШиринаДиаметр KATMC.SIZEX
  , MASSA         : double // ВесНетто KATMC.MASSA
  , MTARA         : double // ВесБрутто KATMC.MTARA
  , GRNAL_NAME    : string // НалоговаяГруппаНомЗакупка GRNAL.NAME
  , cGRNAL        : comp
  , KATED_NAME    : string // ЕдиницаИзмеренияСпецификации KATED.NAME
  , cKATED        : comp
  , FlagErr       : byte
  , Descr         : string
)
with index (
   Index1 = nrow
)
;


procedure MyLog(_log : string); forward;

create view
 var
  dateformat : string = 'DD.MM.YYYY' ;
  ListName   : string = 'Лист1';

  _dateArch  : date = to_date(01,01,2024);

    File_input
  , _strResult
  , _logFile   : string= '';
  typeTable  : word = 0;

from
    KatMc
  , Kated
  , KatOtped
  , GrNal
  , tRows
  , tRows tRows_BR
;

PROCEdURE ClearAll;
{
 delete all tRows;
 rereadrecord;
} // PROCEdURE ClearAll;

PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte = 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    case typeTable of
     0 : {
       _recArray[_npp].def := 'КодНоменклатуры'             ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ОбозначениеНоменклатуры'     ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'НаименованиеНоменклатуры'    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'Марка'                       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ГОСТ_ТУ_Марки'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ТехническаяХарактеристика'   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ГОСТ_ТУ'                     ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'КодТНВЭД'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ВысотаТолщина'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ГлубинаДлина'                ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ШиринаДиаметр'               ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ВесНетто'                    ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ВесБрутто'                   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'НалоговаяГруппаНомЗакупка'   ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
       _recArray[_npp].def := 'ЕдиницаИзмеренияСпецификации'
     }
    end;
}

Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}


#declare seterror(_str)
  tRows.FlagErr := 2 ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

#declare setwarning(_str)
  tRows.FlagErr := if(tRows.FlagErr > 1, tRows.FlagErr , 1) ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end



Procedure CheckErrors_tRows;
{
  update tRows set tRows.FlagErr := 0, tRows.Descr := '';
  StartNewVisual(vtIndicatorVisual , vfTimer, 'определение ошибок',recordsintable(tntRows));

  _loop tRows {
    nextvisual;

     if tRows.cmc = 0h {
         #setwarning('|МЦ будет создана')
      }

     if tRows.cKATED = 0h {
         #setwarning('|Не найдена ед.изм.')
     }

      if tRows.cGRNAL= 0h {
        #seterror('|не найдена группа налогов в БД')
      }

    update current tRows;
   }
   if visualizationactive  StopVisual('The End',vfTimer);
}


#include OpenFileExcelSearchCells.vpp


procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Import_podr_IZH_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

function getmc(_mckod : string) : comp; {
  result := 0h;
  if getfirst fastfirstrow katmc where ((_mckod == katmc.barkod)) = tsOK {
    result := katmc.nrec;
  }
}
function getGRNAL(_GRNAL_NAME : string) : comp; {
  result := 0h;
  if(getfirst fastfirstrow grnal where upcase(grnal.name) = upcase(_GRNAL_NAME) )= tsOK {
    result := grnal.nrec;
  }
}
function getkated(_KATED_ABBR : string) : comp; {
  result := 0h;
  if(getfirst kated where upcase(kated.ABBR) = upcase(_KATED_ABBR) ) = tsOK {
    result := kated.nrec;
  } else {
    if(getfirst kated where upcase(kated.name) = upcase(_KATED_ABBR) ) = tsOK {
      result := kated.nrec;
     }
    }
}

function getinsertkated(_KATED_ABBR : string) : comp; {

 if( getfirst kated where upcase(kated.ABBR) = upcase(_KATED_ABBR)
                     or  upcase(kated.name) = upcase(_KATED_ABBR) ) = tsOK {
      result := kated.nrec;
   }
   else {
    mylog('insert kated _KATED_ABBR = ' + _KATED_ABBR);
    insert kated set
       kated.name    := _KATED_ABBR
     , kated.abbr    := _KATED_ABBR
     , kated.diskret := 2
    ;
    result := kated.nrec;
  }
}
function insertkatotped(_cmc : comp; _KATED_ABBR : string) : comp; {
  var _cEd : comp = getinsertkated(_KATED_ABBR);
  if getfirst katotped where ((    1 == katotped.prmc
                            and _cmc == katotped.cmcusl
                            and _ced == katotped.ckated)) <> tsOK {
    var _akt : word = 1;
    if getfirst katotped where ((    1 == katotped.prmc
                              and _cmc == katotped.cmcusl
                                 and 1 == katotped.akt)) = tsOK {
      _akt := 0;
    }
    insert katotped set
        katotped.prmc   := 1
      , katotped.cmcusl := _cmc
      , katotped.ckated := _ced
      , katotped.AKT    := _akt
      , katotped.ABBR   := kated.ABBR // позиционирование в функции getinsertkated
      , katotped.NAME   := kated.NAME // позиционирование в функции getinsertkated
     ;
  }
  result := katotped.nrec;
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
 var _i: byte;
  clearBuffer(tntRows);
  tRows.nrow := _nrow;

    for(_i := 1; _I <= getLimit(_recArray); _i++) {
     case typeTable of
      0: {
         case upcase(_recArray[_i].def) of
          Upcase('КодНоменклатуры'              ) : tRows.mckod        := Trim(_recArray[_i].value);
          Upcase('ОбозначениеНоменклатуры'      ) : tRows.mcobozn      := Trim(_recArray[_i].value);
          Upcase('НаименованиеНоменклатуры'     ) : tRows.mcname       := Trim(_recArray[_i].value);
          Upcase('Марка'                        ) : tRows.marka        := Trim(_recArray[_i].value);
          Upcase('ГОСТ_ТУ_Марки'                ) : tRows.gostmarka    := Trim(_recArray[_i].value);
          Upcase('ТехническаяХарактеристика'    ) : tRows.techHarakter := Trim(_recArray[_i].value);
          Upcase('ГОСТ_ТУ'                      ) : tRows.gost         := Trim(_recArray[_i].value);
          Upcase('КодТНВЭД'                     ) : tRows.tnved        := Trim(_recArray[_i].value);
          Upcase('ВысотаТолщина'                ) : tRows.SIZEY        := Trim(_recArray[_i].value);
          Upcase('ГлубинаДлина'                 ) : tRows.SIZEZ        := Trim(_recArray[_i].value);
          Upcase('ШиринаДиаметр'                ) : tRows.SIZEX        := Trim(_recArray[_i].value);
          Upcase('ВесНетто'                     ) : tRows.MASSA        := Trim(_recArray[_i].value);
          Upcase('ВесБрутто'                    ) : tRows.MTARA        := Trim(_recArray[_i].value);
          Upcase('НалоговаяГруппаНомЗакупка'    ) : tRows.GRNAL_NAME   := Trim(_recArray[_i].value);
          Upcase('ЕдиницаИзмеренияСпецификации' ) : tRows.KATED_NAME   := Trim(_recArray[_i].value);
         end;
      }
    end;
  }
  if tRows.mckod <> '' then {
      tRows.cmc    := getmc(tRows.mckod);
      tRows.cGRNAL := getGRNAL(tRows.GRNAL_NAME);
      tRows.cKATED := getkated(tRows.KATED_NAME);
     insert current tRows;
   }
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);

procedure Insert_mc; {
  Setvisualheader('Создание/обновление ТМЦ');
  StartNewVisual(vtIndicatorVisual, vfTimer, 'Создание/обновление ТМЦ',recordsintable(tntRows));

  _loop tRows {
    nextvisual;
       if tRows.cmc = 0h {
             insert katmc set
                KATMC.BARKOD := tRows.mckod         // КодНоменклатуры          KATMC.BARKOD
              , KATMC.OBOZN  := tRows.mcobozn      // ОбозначениеНоменклатуры  KATMC.OBOZN
              , KATMC.name   := tRows.mcname       // НаименованиеНоменклатуры KATMC.name
              , KATMC.REMMC  := tRows.techHarakter // ТехническаяХарактеристика
              , KATMC.GOST   := tRows.gost         // ГОСТ_ТУ KATMC.GOST
              , KATMC.TNVED  := tRows.tnved        // КодТНВЭД
              , KATMC.SIZEY  := tRows.SIZEY        // ВысотаТолщина KATMC.SIZEY
              , KATMC.SIZEZ  := tRows.SIZEZ        // ГлубинаДлина  KATMC.SIZEZ
              , KATMC.SIZEX  := tRows.SIZEX        // ШиринаДиаметр KATMC.SIZEX
              , KATMC.MASSA  := tRows.MASSA        // ВесНетто      KATMC.MASSA
              , KATMC.MTARA  := tRows.MTARA        // ВесБрутто     KATMC.MTARA
              , KATMC.cGRNAL := tRows.cGRNAL
              , KATMC.cED    := getinsertkated(tRows.KATED_NAME)
            ;
          mylog('Добавлена ТМЦ ' + KATMC.BARKOD + ' ' + KATMC.name);
        } else {
          if getfirst katmc where ((tRows.cmc == katmc.nrec)) = tsOK {
#declare updatefiledkatmc(fieldmc,fieldtrow,fieldname)
            if KATMC.#fieldmc  <> tRows.#fieldtrow {
              update current katmc set KATMC.#fieldmc := tRows.#fieldtrow;
              mylog('Обновлено поле "#fieldname" у ТМЦ '  + KATMC.BARKOD + ' ' + KATMC.name);
            }
#end
              #updatefiledkatmc(OBOZN,mcobozn,обозначение)
              #updatefiledkatmc(name  ,mcname,наименование)
              #updatefiledkatmc(REMMC ,techHarakter,ТехническаяХарактеристика)
              #updatefiledkatmc(GOST   ,gost, ГОСТ_ТУ)
              #updatefiledkatmc(TNVED ,tnved,КодТНВЭД)
              #updatefiledkatmc(SIZEY ,SIZEY,ВысотаТолщина)
              #updatefiledkatmc(SIZEZ ,SIZEZ,ГлубинаДлина)
              #updatefiledkatmc(SIZEX ,SIZEX,ШиринаДиаметр)
              #updatefiledkatmc(MASSA ,MASSA,ВесНетто)
              #updatefiledkatmc(MTARA ,MTARA,ВесБрутто)
              #updatefiledkatmc(cGRNAL,cGRNAL,Группа налогов)
          }
        }
      insertkatotped(katmc.nrec, tRows.KATED_NAME);
      ssetattr(cokatmc, katmc.nrec, 'Марка', tRows.marka);
      ssetattr(cokatmc, katmc.nrec, 'ГОСТ_ТУ_Марки', tRows.gostmarka);
  }
  stopvisual;
}

Screen scrImportMC;
  show at (,,, 7);
  Fields
    ListName   : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
    _strResult : skip, {Font = {backcolor = if(_strResult <> '', colorneed,0);}};

  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт ТМЦ из EXCEL'
`Наименование листа`.@@@@@@@@@@@@@@@@
`EXCEL Файл`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ВНИМАНИЕ. При загрузке будут созданы единицы измерения, если их нет в БД
.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  <.Загрузить файл.>           <.Создать/обновить ТМЦ.>            <. Отмена .>
>>
end;
browse brtRows_br('',,sci1Esc);
 show at(,8,,);
table tRows_br;
fields
 {Font = {backcolor = getColor(tRows_br.FlagErr);}};
  tRows_br.nrow          'Строка','в файле' headerAlign = centered:protect,[4];
  tRows_br.mckod          'КодНоменклатуры' headerAlign = centered:protect,[4];
  tRows_br.mcobozn        'Обозначение' headerAlign = centered:protect,[4];
  tRows_br.mcname         'Наименование' headerAlign = centered:protect,[4];
  tRows_br.marka          'Марка' headerAlign = centered:protect,[4];
  tRows_br.gostmarka      'ГОСТ_ТУ_Марки' headerAlign = centered:protect,[4];
  tRows_br.techHarakter   'Тех. хар-ка' headerAlign = centered:protect,[4];
  tRows_br.gost           'ГОСТ_ТУ' headerAlign = centered:protect,[4];
  tRows_br.tnved          'ТНВЭД' headerAlign = centered:protect,[4];
  tRows_br.SIZEY          'ВысотаТолщина' headerAlign = centered:protect,[4];
  tRows_br.SIZEZ          'ГлубинаДлина' headerAlign = centered:protect,[4];
  tRows_br.SIZEX          'ШиринаДиаметр' headerAlign = centered:protect,[4];
  tRows_br.MASSA          'Нетто' headerAlign = centered:protect,[4];
  tRows_br.MTARA          'Брутто' headerAlign = centered:protect,[4];
  tRows_br.GRNAL_NAME     'Гр.налогов' headerAlign = centered:protect,[4];
  tRows_br.KATED_NAME     'Ед.изм' headerAlign = centered:protect,[4];
  tRows_br.Descr          'Описание'         headerAlign = centered:protect,[8];
end;

handleevent
cminit:{
 rereadrecord;
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор файла с подразделениями для загрузки');
      ClearAll;
    }
  end;
rereadrecord;
}
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона', error) ;
     stop;abort;exit;
    }
    if ListName = '' {
     message('не задано наименование EXCEL листа', error);
     stop;abort;exit;
    }

  if _dateArch = to_date(0,0,0) {
    Message('Установите дату "В архиве с"', error);
    stop; abort; exit;
  }

//    var _srvFileName : string = GetStringParameter('Files', 'OutputFilesDirectory', 0) + OleGenerateGUID+'.xlsx';
    MyLog('File_input ' + File_input);
//    CopyMoveFile(File_input,_srvFileName,false, ecmfClientFrom + ecmfServerTo );
    GetFileFromClient(File_input, true);
    File_input := ConvertClientPathToSrv(File_input);
    MyLog('on server File_input ' + File_input);

  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    ClearAll;
    typeTable := 0;
    fillrecArrayByTypeTable;

    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);
    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
     if visualizationactive  StopVisual('The End',vfTimer);
     if visualizationactive  StopVisual('The End',vfTimer);

      stop; abort; exit;
    }

  CheckErrors_tRows;
    set _strResult := '';
   if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    set _strResult := 'В файле есть ошибки. Загрузка невозможна';
    if visualizationactive  StopVisual('The End',vfTimer);
    if visualizationactive  StopVisual('The End',vfTimer);
    stop; abort; exit;
  }

 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);
  rereadrecord(tntRows_br);
} // cmOK
cmCreateDocs: {
  if getfirst tRows <> tsOK {
    Message('Сначала загрузите файл',error);
    stop; abort; exit;
  }
  if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    Message('В файле есть ошибки. Загрузка невозможна',error);
    stop; abort; exit;
  }

  var _isError : boolean = false;
   StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    Insert_mc;
   if visualizationactive  StopVisual('The End',vfTimer);
   ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
   rereadrecord(tntRows_br);
}
end;
end.
