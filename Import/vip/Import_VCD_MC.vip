/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#include Import_plan.vih
#component "M_MnPlan"
Interface Import_VCD_MC 'Import_VCD_MC';
#include VarsTypes.var

procedure MyLog(_log : string); forward;

create view
var
  dateformat : string = 'DD.MM.YYYY' ;
  ListName   : string = 'Лист1';
  StrResult  : string = '';
  File_input : string;
  _logFile   : string= '';
  typeTable  : word = 0;


from
   KatMc
 , AllMemo
;
file fileVCDMC;

PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    _recArray[_npp].def := 'VAZ_VEHICLE_CODE'; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'VCD'         ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'VCD1'        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'VCD2'        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'VCD3'        ;
}


#include OpenFileExcelSearchCells.vpp

function getmc(_barkod : string) : comp;
{
  result := 0h;
   if getfirst katmc where ((_barkod == katmc.barkod)) = tsOK then {
     result := katmc.nrec;
    }
}

Procedure fillmcnote(_nrow : longint; _file : string); {
  var _i: byte;
  var  _vcd, _vcd1, _vcd2, _vcd3 : widestring ='';
  var _barkod : string = '';
  var _cmc : comp = 0h;
  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
       Upcase( 'VAZ_VEHICLE_CODE') : _barkod := trim(_recArray[_i].value);
       Upcase( 'VCD')  : _vcd  := _recArray[_i].value
       Upcase( 'VCD1') : _vcd1 := _recArray[_i].value
       Upcase( 'VCD2') : _vcd2 := _recArray[_i].value
       Upcase( 'VCD3') : _vcd3 := _recArray[_i].value
    end;
  }
  _cmc := getmc(_barkod);
  if _cmc != 0h {
    if getfirst AllMemo where ((coKatMC == AllMemo.wTable
                               AND _cmc == AllMemo.cRec
                                  AND 0 == AllMemo.Tip)) <> tsOK {
                 insert AllMemo set
                   AllMemo.wTable := coKatMC
                  ,AllMemo.cRec   := _cmc
                  ,AllMemo.Tip    := 0
                  ;
                }
      var _filepath : string = GetStringParameter('Files','OutputFilesDirectory',0)+ '\ImportVCDMC_'+_barkod+'_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS')+'.txt';
       fileVCDMC.openfile(_filepath,stCreate);
       fileVCDMC.WriteLine(_vcd1);
       fileVCDMC.WriteLine(_vcd2);
       fileVCDMC.WriteLine(_vcd3);
       fileVCDMC.Close;
      if ImportFileToMemo(AllMemo.mem, _filepath, false) {
         update current AllMemo;
        mylog('OK row = ' + string(_nrow));
     } else {
       mylog('ОШИБКА! row = ' + string(_nrow) + ' не удалось записать мемо-поле');
     }
  }
  else {
    mylog('Ошибка! row = ' + string(_nrow) + ' не найдена ТМЦ по баркоду ' + _barkod)
  }

}  // tInsertSaldoMC


procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'ImportVCDMC_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
   fillmcnote(_nrow, _file)
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);



Window winImportVCDMC;
Screen scrImportVCDMC;
  show at (,,, 7);
  Fields
    dateformat : NoProtect,{Font = {backcolor = if(dateformat = '', colorneed,0);}};
    ListName   : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
    StrResult  :  Protect, skip,{Font = {color = ColorMark;}};
  buttons
    cmOK,,,;

    cmCancel,,,;
<<'Импорт спецификации План сбыта из EXCEL'
       Формат даты.@@@@@@@@@@@
Наименование листа.@@@@@@@@@@@@@@@@
        EXCEL Файл.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Загрузить файл.>   <. Отмена .>
>>
end;
end;
windowevent winImportVCDMC;
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона',error) ;
     stop;abort;exit;
    }
    if dateformat = '' {
     message('не указан формат даты',error);
     stop;abort;exit;
    }
    if ListName = '' {
     message('не указан EXCEL лист',error);
     stop;abort;exit;
    }
  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    fillrecArrayByTypeTable;
    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);

    ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');

 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);

} // cmOK

end;


handleevent
cminit:{
  runwindowmodal(winImportVCDMC);
 rereadrecord;
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор шаблона для VCDMC');
    }
  end;
rereadrecord;
}

end;
end.
