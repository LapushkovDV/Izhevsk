/*************************************************************************************************\
* Наименование: Создание настроек компоненты                                                      *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *
\*************************************************************************************************/
#include TuneSpec.vih

#include CreateTune.vih

Handler with replace GP_DateModifyTune on extensionPoint
  epDateModifyTuneEx (TS: ObjStartCreateTuneEx) [1]
Action
{
  // Здесь указываем дату, когда последний раз изменяли этот файл, чтобы автоматически запускалось
  // обновление реестра настроек
  TS.SetLastDateModTuneComp('GP_PITANIE', 01, 07, 2018);
  Result := true;
}

Handler with replace GP_CreateTune_IIKO on extensionPoint
  epCreateTuneComponent (TR: ObjCreateTuneEx) [210]
Action
{
  Result := true;


  //----------------------------------------------------------------------------
  // Обязательно установить  имя компонента
  TR.SetComponent('GP');
  //----------------------------------------------------------------------------
  //---------------------
  // Главный раздел
  //---------------------
  TR.SetParent('Tune');
  TR.AddPartA('GP_OWN','Настройки АВТОВАЗ','');
  //------------------------------------------------
  // Главный раздел
  TR.SetParent('GP_OWN');
  TR.AddPartA('GP_OWN.PITANIE','Столовая','');
  TR.SetParent('GP_OWN.PITANIE');
  TR.AddTuneS('GP_OWN.GP_OWN.PITANIE.SYSTEM','Аналитика для ведения типов систем питания', ftWord,'0','','');
  TR.AddIntr('GetKauTable'); // LongVal wGetTune
  TR.AddTuneS('GP_OWN.GP_OWN.PITANIE.KAULIMIT','Аналитика для ведения лимитов питания', ftWord,'0','','');
  TR.AddIntr('GetKauTable'); // LongVal wGetTune
  TR.AddTuneS('GP_OWN.GP_OWN.PITANIE.PITANIE_UDER','Удержание для передачи в ЗП', ftWord,'0','','');
  TR.AddIntr('CHOOSEVIDUD');
  TR.AddTuneU('GP_OWN.GP_OWN.PITANIE.SETUDERTOALL', 'Передавать удержание по всем сотрудникам', ftList,'1','','');
      TR.AddList(0, 'Нет');
      TR.AddList(1, 'Да');


}

VipInterface GP_IntrTune_IIKO implements ObjIntrTuneComponent licensed (FREE);

// Обработчик точки расширения epIntrTuneComponent
// Должен вернуть FALSE если обработка проводилась. TRUE - если не проводилась.
handler with replace GP_IntrTune_IIKO on extensionPoint epIntrTuneComponent (TR: objTuneIntr; TVal: TTuneVal; Inter: string)
action
{
   var ifc : GP_IntrTune_IIKO;
   result := not ifc.TuneIntrComponent (TR, TVal, Inter);
}

Interface GP_IntrTune_IIKO;
Create view
var _KLVIDUD : word;
from
KlVidUd
 where ((_KLVIDUD == KlVidUd.VIDUD))
;

// Обязательно должна вернуть False если обработка не производилась, иначе true
Public Function TuneIntrComponent (TR: objTuneIntr; TVal: TTuneVal; Inter: string) : boolean;
{
  Var PrOk : boolean;  PrOk := False;

  TuneIntrComponent := true; // Чтобы в каждом case не писать это

  case UpCase(Inter) of
    'CHOOSEVIDUD':{
      if (RunInterface('Z_MP::VIDUDERU', _KLVIDUD) = cmDefault)
      {
        if getfirst KLVIDUD = tsOK
        {
         TVal.LONGVAL := _KLVIDUD;
         TVal.StrVal  := KLVIDUD.NVIDUD;
         TVal.CUser   := UserId();
         TR.UpdateTuneVal(TVal);
        }
        TuneIntrComponent := true;
      }
    }

  else
    TuneIntrComponent := false;  // Если не зашли в обработку, то обязательно установим в false
  end;  // case

  if (PrOk)
    TR.UpdateTuneVal(TVal);
}     // TuneIntrComponent
end. // интерфейс
