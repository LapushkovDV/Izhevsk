/*************************************************************************************************\
* Наименование: СКУД Заявление на отсутствие                                                       *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/
#include GetKau.vih
#include odecl.vih             // Функции склонения ФИО



#doc
Заявления на отказ питания
#end

//************************************************************
Interface GP_CancelPitanie '' (,,sci17EnEsc), EscClose;
//************************************************************
Show At (,,120,30);
procedure AgreeZayavka; forward;
function GetStatusName(_status : word): string; forward;
//----------------------------------------
#Include ShowKau.Vpp

#include GetKau.Var

Create View
var
    iOdecl:declension;
   _ee: EmpElements;
   cRec
 , pGP_IIKO_Doc
 , pUserId : Comp;
   isProtect :boolean; //защищенный выбор
   isProtect_Set :boolean=false;// признак первой установки

  fCurMainFormatEdit:longint; // окно редактирования - определить в CmInit
  sTitle_InterFace
  ,sTitle_Window : string;

   boVisibleRun:boolean; //тип запуска - false как объект
   boDataProtector : boolean;
   pStatus_GetDefault  : word; // статус по умолчанию

as select
   Zayavka.Nrec
 , If(Zayavka.cPersons    = 0h, '--выберите сотрудника--', #ShowKau(cgKau_Persons,Pers.nrec)) (Fieldname = PersonsFio, FieldTitle='ФИО сорудника')
// , zayavka.Status   ('статус документа '):[list 0 'Оформляемый', 1 'Утвержден', 2 'Передан'], protect, skip;
 , GetStatusName(zayavka.Status) (Fieldname=StatusName, FieldTitle='Статус заявки на питание')

From
  GP_Cancel_Pitanie zayavka
, catalogs Podr
, x$users UserInput
, x$users UserApprove
, Persons Pers
, KatOrg

where
((
   _datetime(0,0,0,0,0,0,0) <<= zayavka.INPUT_DATE (noindex)
//and       zayavka.cSystem == KauSystem.nrec
 and zayavka.cPersons     == Pers.nrec
and  zayavka.cPodr        == podr.nrec
and  zayavka.CUSERINPUT   == Userinput.Atl_nrec
and  zayavka.CUSERAPPROVE == UserApprove.atl_nrec
))
Bounds byNrec      pGP_IIKO_Doc == Zayavka.Nrec(noindex) ordered by TableOrder
;

function GetStatusName(_status : word): string; cacheable; {
 result := '--не известно--';
  case _status of
   0 : result := 'Оформляемый'
   1 : result := 'Утвержденный'
   2 : result := 'В очереди'
   3 : result := 'Передан'
   4 : result := 'Ошибка передачи'
  end;
}

//---------------------------
//
//---------------------------
#include GP_CancelPitanie_FRDTS.vpp

//******************************************************************************
// Функции
//******************************************************************************
Procedure EnableDisableDelete(_Enable:boolean);
{ if _Enable
  { EnableCommand(cmDelete);
    EnableCommand(cmDeleteRecord);
  }
  else
  { DisableCommand(cmDelete);
    DisableCommand(cmDeleteRecord);
  }
} //Function EnableDisableDelete(_Enable:boolean);

Function SetDocFieldsState: boolean;
{
  Result:=true;
  var _CanDel   :boolean=true;
  var _CanChange:boolean=true;

  _CanDel := False;
  _CanDel := True;
  EnableDisableDelete(_CanDel);
  _CanChange := True;
} //Function SetDocFieldsState: boolean;

procedure SetEditMode(Value: boolean);
{
  if Value
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpBlueWindow);
  else
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpCyanWindow);

    cfsSetProp('i_SCREDIT_ZAYAVKA.DOCDATE', 'Skip', (not Value));
    cfsSetProp('i_SCREDIT_ZAYAVKA.NODOC'  , 'Skip', (not Value));
    cfsSetProp('i_SCREDIT_PERSONSFIO'     , 'Skip', (not Value));
  isProtect:= not Value;
  isProtect_Set:=true;
  SetDocFieldsState;
  //timelog(GetInterfaceName+'->SetEditMode finish=');
} //Procedure SetEditMode(_isEdit:boolean);

Function CanEditTbl:boolean;
{
  result:=false; //CanEdit(Zayavka.status);
  if zayavka.status = 0 then result:=true;

} //Function CanEditTbl:boolean;

Function Status_Init:boolean;
{
  Result:=True;
} //Function Status_Init(_wType:word):boolean;

  //-----------------------------------------------------

  // Поиск следующего номера документа
  //-----------------------------------------------------

function GetNextDocNumber(InYear:word):string; {
    var _DTBeg : datetime =_DateTime(1,1,InYear,0,0,0,0);
    result:='';

    sql
      select max(GP_Cancel_Pitanie.NoDOC)
      from GP_Cancel_Pitanie
    where(:(_DTBeg)<=GP_Cancel_Pitanie.DocDate
      )
    into (result);

    if (Trim(result)='')
      result:='000001'
    else
      result:=NextNumStr(result);
  } //function GetNextDocNumber(InYear:word):string;


  //============================================
  // Получить статус по умолчанию
  //============================================
  Function GetStatus_Default:word;
  { Result := 0;
  } //Function GetStatus_Default:comp;




  //-------------------------------------------
  #doc
    Установить ограничения
  #end

//---------------------------------------------
// Тип документа
//---------------------------------------------

//---------------------------------------------

//-------------------------------------
// Защитить данные
//-------------------------------------


//-------------------------------------
// Защитить данные
//-------------------------------------
//-------------------------------------
//
//-------------------------------------
Procedure PositionChanged;
{
  SetEditMode(CanEditTbl);
  ReScanPanel(#Zayavka);
} //Function PositionChanged;

Procedure MakeBufferZayavka;
  { ClearBuffer(#Zayavka);
    Zayavka.Nrec       := GetNextNrec(#Zayavka,0) ;
    Zayavka.INPUT_DATE := _CurDateTime;
    Zayavka.noDoc      := GetNextDocNumber(year(Cur_Date));
    Zayavka.CUSERINPUT := UserID(); //UserAccessService.UserPersonsNRec;
    Zayavka.DocDate    := Cur_date;
    Zayavka.Status     := pStatus_GetDefault;
  } //Procedure MakeBufferGP_SCUD_Doc;

//========================================================
// Визуальная часть
//========================================================
//------------------------------------------------------------------------------
// Задание подписантов
//------------------------------------------------------------------------------

//------------------------------------------------------
// Окно редактирования документа
//------------------------------------------------------
Window wnEdit  '';
Show at (,,120,24);
Screen ScrEdit (,,sci18Esc);
//Show at (,,,7);
Table zayavka;
Fields
  zayavka.DocDate  ('Дата документа ',,sci138Esc): [12] ,NoProtect;
  zayavka.NoDoc    ('Номер документа')           : [10] ,NoProtect;
  StatusName       ('статус документа '):[list 0 'Оформляемый', 1 'Утвержден', 2 'Передан'], protect, skip;
  Userinput.XU$FULLNAME  ('Автор документа - кто занес в систему') : Protect, Skip;
  zayavka.INPUT_DATE ('Дата внесения в систему' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip;
  UserApprove.XU$FULLNAME ('Утвердивший документа - кто утвердил') : Protect, Skip;
  zayavka.APPROVE_DATE ('Дата утверждения документа' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip, {Font={Color=if(zayavka.APPROVE_DATE = _datetime(0,0,0,0,0,0,0), 0, 13)}};
  zayavka.output_DATE ('Дата передачи в IIKO' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip, {Font={Color=if(Zayavka.output_DATE = _datetime(0,0,0,0,0,0,0),0,14)}};
  PersonsFio         ('Сотрудник',,sci138Esc):Protect,PickButton,NoDel, {Font={BackColor=if(Zayavka.cPersons<> 0h,0,ColorNeed)}};
  podr.code           ('Подразделение код') : skip;
  podr.name          ('Подразделение наименование') : skip;
buttons
  cmValue1 , , ,'Утвердить',,sci1Esc;
<<
  `Дата документа`  .@@@@@@@@@@@ `Номер` .@@@@@@@@@ `Статус`  .@@@@@@@@@@@@@@@@@@@   <.Утвердить.>
   `Автор `   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `Дата создания    `.@@@@@@@@@@@@@@@
   `Утвердил` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `Дата утверждения `.@@@@@@@@@@@@@@@
                                  `Дата передачи во внеш. систему`.@@@@@@@@@@@@@@@

  `Сотрудник    `   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Подразделение`   .@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;
Handleevent
  cmPrintDoc: {
        processcommand(cmPrintDoc);
      }
  cmvalue1: {
    AgreeZayavka;
  }

end;
end;
//------------------------------------------------------
/*
Function MakeDoc(  _CGP_SCUD_PERS  : comp//.Nrec
                    ;_DOCDATE        : date
                    ;_CLIMITCATEGORY : comp
                    ;_WTYPEDOC       : word
                    ):boolean;
{

}
*/
  //-------------------------------------
  #doc
    Редактировать документ
  #end
  Function EditDoc (_pGP_IIKO_Doc:comp) :boolean;
  { Result:=false;
    if getfirst Zayavka where (( _pGP_IIKO_Doc == Zayavka.Nrec ))<>tsok exit;
    pGP_IIKO_Doc :=_pGP_IIKO_Doc;
    //mAddBounds(tbbyNrec)
    if not BoundActive(tbbyNrec) PushBounds(tbbyNrec);

//    SetVisibleRun(true);
    PositionChanged;
    RunWindowModal(wnEdit);
    Result:=true;
  } //Function EditDoc (_pGP_SCUD_Doc:comp) :boolean;





Procedure EnableDisableInsert(_Enable:boolean);
{ if _Enable
  { EnableCommand(cmInsert);
    EnableCommand(cmEdit);
    EnableCommand(cmAddNewRec);
    EnableCommand(cmInsertRecord);
    EnableCommand(cmSetDefault);


  }
  else
  { DisableCommand(cmInsert);
    DisableCommand(cmEdit);
    DisableCommand(cmAddNewRec);
    DisableCommand(cmInsertRecord);
    DisableCommand(cmSetDefault);
  }

}//Function EnableDisableInsert(_Enable:boolean);

//------------------------------------
// Запретить/разрешить удаление
//------------------------------------

Procedure SetDocStateStart;
{ EnableDisableInsert(true);
}

Procedure LoadInterface; {  //-----------------------------
boVisibleRun := TRUE;

  //timelog(GetInterfaceName+'->LoadInterface:003 ');
  //------------------------------
  boDataProtector:=false;
  if boVisibleRun
  {
  }
  Status_Init;
  //if not NullVipRef(Status)
  pStatus_GetDefault:=GetStatus_Default();
  //------------------
  //timelog(GetInterfaceName+'->LoadInterface:006');
  //-----------------------------
  //-----------------------------
  //-------------------------
  fCurMainFormatEdit:=GetCurrentFormat;
  SetDocStateStart;
                       sTitle_InterFace := 'Ввод заявлений на отказ от питания';
                       sTitle_Window  := 'Редактирование заявления на отказ от питания';

  if boVisibleRun
  {
    if(cfsSetCurrentContainer(cfsGetCurrentContainerSelf) <> cfOk)
    {
    }

  }

//  cfsSetProp('EM_IIKO::EM_ZAYAVPITANIE','Title',sTitle_InterFace);
//  cfsSetProp('BRDOC','Title',sTitle_InterFace);
  cfsSetProp('WNEDIT','Title',sTitle_Window);
  SetWindowTitle(wnMainWindow,sTitle_InterFace);
} //Procedure LoadInterface(_wVisibleRun:boolean);


procedure AgreeZayavka; {
    if zayavka.STATUS <> pStatus_GetDefault exit;// 'ОФОРМЛЯЕМЫЙ'

      if Zayavka.cPersons = 0 {
         Message('Не выбран сотрудник',error);
         exit;
       }

      set zayavka.STATUS       := 1;
      set zayavka.CUSERAPPROVE := userID;
      set zayavka.APPROVE_DATE := _CurDateTime;
     update current Zayavka;
     SetEditMode(CanEditTbl);
    ReReadRecord(#Zayavka);
//    oGP_Log.Done(true);
}

Procedure PrintDoc; {
/*  if zayavka.status = pStatus_GetDefault {
        Message('Печать возможна только в статусе "На утверждении"',error);
        exit;
    }
*/
  RunFReport(CancelPitanie_DTS, '', False);
}


  //---------------------------------------------
  // Загрузчик интерфейса
  //---------------------------------------------
Browse brDoc '' (,,sci1478Esc);
//show at (,,,15);
Table Zayavka;
Fields {Font={Color=if(Zayavka.output_DATE = _datetime(0,0,0,0,0,0,0)
                       ,if(zayavka.APPROVE_DATE = _datetime(0,0,0,0,0,0,0)
                          , 0
                          , 13
                          )
                       ,3)}};
  zayavka.DocDate      'Дата'  ('Дата документа')  : [12] ,Protect,NoDel;
  zayavka.NoDoc        'Номер' ('номер документа') : [10] ,Protect,NoDel;
  StatusName          'Статус' ('статус документа ',,sci13Esc): [10],Protect,NoDel;
  zayavka.INPUT_DATE   'Дата ввода'  ('Дата ввода документа')  : [12] ,Protect,NoDel;
  zayavka.APPROVE_DATE 'Дата утверждения'  ('Дата утверждения документа')  : [12] ,Protect,NoDel;
  zayavka.output_DATE 'Дата передачи в IIKO'  ('Дата передачи в IIKO')  : [12] ,Protect,NoDel;
  PersonsFio           'ФИО'  ('ФИО сотрудника')  : [12] ,Protect,NoDel;
  Pers.sex             'Пол'  ('Пол сотрудника')  : [2] ,Protect,NoDel;
  podr.code             'Подр.' ('Код подразделения') : [10] ,Protect,NoDel;

end;//Browse
//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table Zayavka;
cmSetDefault:
{ //if GP_SCUD_Doc.cStatus<>pStatus_GetDefault
  //{ exit;
  //}
  MakeBufferZayavka;
  Insert current Zayavka;
  SetNew(false);
  SetEditMode(CanEditTbl());
  PutCommand(cmEdit)
}
cmCheckRecord:
{
  //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmDoGetNext:
{ //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmDoGetPrev:
{ //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmCheckField:
{
   updatetable;
}
cmInsertRecord:
{ Insert Current Zayavka;
}
cmUpdateRecord:
{ Update Current Zayavka;
}
cmDeleteRecord:
{ if Zayavka.Status<>pStatus_GetDefault
  { message('Удаление доступно только в оформляемом статусе')
  }
  else
  { if message('Удалить документ '+Zayavka.NoDoc+'?', YesNo)=cmYes
    {  if not true //проверить есть ли уже питание по человеку
       { message(  'По сотруднику есть суммы питания'
          +chr(13)+'Удаление запрещено!');
         exit;
       }
       delete Current Zayavka;
    }
  }
}

cmPositionChanged:
{ PositionChanged;
}
end; //GP_SCUD_Doc

/*
Window wnGetLimitpitanie 'Выбор категории питания' (,,sci1Esc) ,DoAccept,Cyan;
Show at (,,60,15);
Browse brGetLimitpitanie;
Table tmp_Limitpitanie;
Fields
  tmp_Limitpitanie.name 'Наименование':[40],Protect,NoDel;
  tmp_Limitpitanie.Code 'Код':[20],Protect,NoDel;
end;//Browse brReason;
end;//Window wnGetReason
*/
//------------------------------
//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    //-----------------------------
    cmInit: {
      LoadInterFace;
      ClearFuncCache;
      //--------------------------

     //--------------------------

      if cRec>0
      { if getfirst Zayavka where (( cRec == Zayavka.nrec ))=tsok {}
      }

      //-------------------------

      rereadrecord(#Zayavka);
    }
    //-----------------------------
    cmOnVipLoad:
    { //LoadInterFace(false);
    }
    //-----------------------------
    cmDone:
    {
      //UnLoadInterFace(true);
    }
    //-----------------------------
    cmOnVipUnLoad:
    { //UnLoadInterFace(false);
    }
    //-----------------------------
    cmDefault:
    {
      PutCommand(cmEdit);
    }
    cmEdit:
    {  RunWindowModal(wnEdit);
    }
    cmPick:
    {
      case curField of
      #PersonsFio:
      {
       if //RunInterface(GP_STAFF::GP_SCUD_PersVib,cgiPick,Zayavka.CGP_SCUD_PERS,0,0)<>cmCancel
       iGetKau.GetCodeKau(cgiPick,cgKau_Persons,Zayavka.cpersons)<>cmCancel
        {
          Set Zayavka.cpersons := Zayavka.cpersons;
          if getfirst Pers = tsOK then set zayavka.cPodr := pers.department;
          SetModified(true);
          UpdateTable;// ломает базу;
        }
      }

      end;
    }

    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #Zayavka: RunInterface('C_EXTCLASS::ExClassifier', coGP_ZAYAVKA_PITANIE, Zayavka.nRec);
      end;
      ClearFuncCache;
    }
    //--------------------------
    //--------------------------
    cmPrintDoc : PrintDoc;
    cmFilterSave:
    {

    }
    //--------------------------
    cmPickAttr:// внешние аттрибуты
    {
      if UpdateTable
      case CurTable of
      #Zayavka: RunInterface('C_EXTCLASS::Attribute', coGP_ZAYAVKA_PITANIE, Zayavka.nRec);
      end;
      ClearFuncCache;
    }
    //--------------------------
    cmHotKeys:
    {
      case CurTable of
      #Zayavka: {
        ProcessCommand(RunMenu('GP_IIKO_ZAYAVKA_Main_HotKey_Adm'));
       /*
        if pr_CurUserAdmin
        { ProcessCommand(RunMenu('GP_SCUD_DocEdit_Main_HotKey_Adm'));
        }
        else
        { ProcessCommand(RunMenu('GP_SCUD_DocEdit_Main_HotKey'));
        }
        */
      }
      end;
    }
    cmdelonprotect: {
      stop;abort;exit;

    }
    cmValue2 : {
      if getfirst Zayavka where ((1 == Zayavka.status)) <> tsOK {
        message('нет заявок в статусе "'+ GetStatusName(1)+'"', error);
        stop;abort;exit
      }
      var _outFile : string = GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'Pitanie_cancel_outfile_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.csv';
//В каждой строке <постоянный номер>, <код RFID чипа пропуска>, <табельный номер>, <код вида питания>, <инициалы сотрудника>, <номер столовой>
      _loop Zayavka where ((1 == Zayavka.status)) {
        var _outStr : string = '';
        _outStr := string(pers.nrec,0,0);
        _outStr := _outStr + ';' + pers.PASSNMB;
        _outStr := _outStr + ';' + if(wgettune('FORMATCLOCKNUMBER') = 1,pers.strtabn,string(pers.tabnmb));
        _outStr := _outStr + ';' + SubStr(pers.fio,1,1) + ' ' + SubStr(extractdelimitedword(pers.fio,2,' '),1,1)  +  ' ' + SubStr(extractdelimitedword(pers.fio,3,' '),1,1);
        _outStr := _outStr + ';' +'***';
        _outStr := shortstrtowin(_outStr);
        logstrtofile(_outFile,_outStr)
      }

      ProcessText(_outFile, vfEscable or vfNewTitle or vfMacroSize, 'Экспорт данных для эМэФСи');

      putfiletoclient(_outFile, false);
    }
  end;

end.
GP_IIKO_ZAYAVKA_Main_HotKey_Adm Menu
{
// - 'Фильтр на данные'     , cmFilterSave, 'Фильтр на данные', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;
- 'Экспортировать данные для эМэФСи'     , cmValue2 , 'Экспортировать данные для эМэФСи',     ,'',,sci1Esc;
}
