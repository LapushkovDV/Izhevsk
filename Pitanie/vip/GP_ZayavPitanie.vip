/*************************************************************************************************\
* Наименование: СКУД Заявление на отсутствие                                                       *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/
#include GetKau.vih
#include GP_ZayavPitanie.vih
#include odecl.vih             // Функции склонения ФИО



#doc
Заявления на питание сотрудников
#end

//************************************************************
Interface GP_ZayavPitanie '' (,,sci17EnEsc), EscClose;
//************************************************************
Show At (,,120,30)
//----------------------------------------
#Include ShowKau.Vpp
//----------------------------------------
// Forward
//----------------------------------------

//------------------------------------
// декларация сложного фильтра
//------------------------------------
#include GetKau.Var
//-------------------------------
//-------------------
//-------------------
//-----------------------------------------
// Фильтры
//-----------------------------------------
table struct tmp_Limitpitanie
(
   nrec : comp
  ,code : String
  ,name : String
)
with index
(
 ind0 = nrec
)
;
/*table struct tPodr
(
  nrec : comp
)
with index
(
 ind0 = nrec
)
;
*/
Create View
var
   iGP_Odecl:GP_ODecl;
    iOdecl:declension;
   _ee: EmpElements;
   cRec
 , pGP_IIKO_Doc
 , pUserId : Comp;
   isProtect :boolean; //защищенный выбор
   isProtect_Set :boolean=false;// признак первой установки

  fCurMainFormatEdit:longint; // окно редактирования - определить в CmInit
  sTitle_InterFace
  ,sTitle_Window : string;
  _typeZayav : word;
    boVisibleRun:boolean; //тип запуска - false как объект
  boDataProtector : boolean;
  UserAccessService   : GP_UserAccessService NoAuto;//cgiSingleEdit
  StatusChange        : GP_StatusChange NoAuto;
  Status              : GP_Status NoAuto;
    DataProtector       : IGP_Protector2;//защита полей от модификации
   pStatus_GetDefault  : comp; // статус по умолчанию
  _Kau_IIKOLIMIT : word;
as select
  Zayavka.Nrec
 ,If(Zayavka.CGP_SCUD_PERS  = 0h, '--выберите сотрудника--', #ShowKau(cgKau_Persons,Pers.nrec)) (Fieldname = PersonsFio, FieldTitle='ФИО сорудника')
 ,If(Zayavka.CLIMITCATEGORY = 0h, '--выберите категорию лимита питания--', #ShowKau(_Kau_IIKOLIMIT,Zayavka.CLIMITCATEGORY)) (Fieldname=limitcategory, FieldTitle='Лимит категория питания')
// ,if(isValid(tneMail), eMail.eMail,' -у сотрудника нет почты- ')  (fieldname = PERSEMAIL)
From
  persons ScudPers
, GP_ZAYAVKA_PITANIE zayavka
, KatPOdr Podr
, x$users UserInput
, x$users UserApprove
, Persons Pers
, KatOrg
, GP_StatusChangeLog
, COMMUNICATIONS eMail
, tmp_Limitpitanie
//, ZAR_USER ZU
//, tPodr

where
((             _typeZayav == zayavka.wTypeDoc
and _datetime(0,0,0,0,0,0,0) <<= zayavka.INPUT_DATE (noindex)
and zayavka.CGP_SCUD_PERS == ScudPers.nrec
and ScudPers.CPERSONS     == Pers.nrec
and  zayavka.cPodr        == podr.nrec
and  zayavka.CUSERINPUT   == Userinput.Atl_nrec
and  zayavka.STATUS       == Gp_Status.nrec
and  zayavka.CUSERAPPROVE == UserApprove.atl_nrec
and             Pers.nrec == eMail.PERSON
and                     3 == eMail.OBJTYPE
and     000A00000003995Dh == eMail.COMTYPE (noindex)// eMail
))
Bounds byNrec      pGP_IIKO_Doc == Zayavka.Nrec(noindex) ordered by TableOrder
Bounds byUserID    pUserId == Zayavka.Atl_owner(noindex)  ordered by TableOrder
//bounds buZarPodr   zayavka.cPodr /== tPodr.nrec
/*
(upper('CB\'+ZU.OWNNAME) = upper(XU.xu$loginname))
 inner join x$users XU on (#userid = XU.Atl_nrec)
 inner join ZAR_USER ZU on (upper('CB\'+ZU.OWNNAME) = upper(XU.xu$loginname))

bounds
     or  (kP.nrec in (Select UR.crecds
           from USERRIGHTS UR
           where ZU.OWNNAME = UR.OWNNAME
         )
    )
*/

;
Parameters _typeZayav
          ,cRec ;

Create view FindTypeDocs
var _typeZayav1 : word;
as select Gp_TypeDocs_Find.nrec
From
  Gp_TypeDocs Gp_TypeDocs_Find
, GP_StatusChangeLog
//, ZAR_USER ZU
where ((
                _typeZayav1 == Gp_TypeDocs_Find.wType(noindex)
//---------------
))
;
//---------------------------
//
//---------------------------
#include GP_ZayavPitanie_FRDTS.vpp
//******************************************************************************
// Функции
//******************************************************************************
Procedure LoadProtector;
{  if boDataProtector then exit;
   boDataProtector:=true;
   LoadVipRef(DataProtector, 'GP_Protector');
   DataProtector.LinkToExt(cfsGetCurrentContainerSelf, '', true);
   DataProtector.ProtectedStatusCtx := sci1EscIns;
   DataProtector.AutoPalette := true;
   if (UserAccessService.CanIns(_typeZayav))
   { DataProtector.ProtectedStatusCtx := sci17EnIns;
   }
}
Procedure EnableDisableDelete(_Enable:boolean);
{ if _Enable
  { EnableCommand(cmDelete);
    EnableCommand(cmDeleteRecord);
  }
  else
  { DisableCommand(cmDelete);
    DisableCommand(cmDeleteRecord);
  }
} //Function EnableDisableDelete(_Enable:boolean);

Function SetDocFieldsState: boolean;
{ Result:=true;
  var _StatusDoc:comp = Zayavka.status;
  if  _StatusDoc=0 then exit;
  var _FieldStatus:longint=#GP_Status.Name;
  if  _FieldStatus=0 then Exit;
  var _CanDel   :boolean=true;
  var _CanChange:boolean=true;


  _CanDel:=False;
  _CanDel:=UserAccessService.CanDel(_StatusDoc);
  EnableDisableDelete(_CanDel);
  _CanChange := StatusChange.CanChangeStatus(_StatusDoc);
  if(zayavka.TRANSTOIIKO_DATE <> _datetime(0,0,0, 0,0,0,0))
   {
    cfsSetProp('i_SCREDIT_GP_STATUS.NAME','SKIP',TRUE);
    _CanChange := false;
    _CanDel := false;
   }
   else
   {
    cfsSetProp('i_SCREDIT_GP_STATUS.NAME','SKIP',false);
   }


  //if timelog_status>2 timelog('GP_SCUD_BASE->SetDocFieldsState:_CanChange='+string(_CanChange)+', CanDel='+string(_CanDel) );
  if _CanChange
  { if _CanDel
      SetHelpAndStatusContext(fCurMainFormatEdit, _FieldStatus, sci13478Esc, hcKeepCurrent);
    else
       SetHelpAndStatusContext(fCurMainFormatEdit, _FieldStatus, sci1478EscIns, hcKeepCurrent);
    SetInputLineFlags(fCurMainFormatEdit, _FieldStatus, inPickButton);
    cfsSetProp('i_SCREDIT_GP_STATUS.NAME','ButtonType',inPickButton);
  }
  else
  { if _CanDel
      SetHelpAndStatusContext(fCurMainFormatEdit, _FieldStatus, sci178Esc, hcKeepCurrent);
    else
      SetHelpAndStatusContext(fCurMainFormatEdit, _FieldStatus, sci1Esc, hcKeepCurrent);
    SetInputLineFlags(fCurMainFormatEdit, _FieldStatus, 0);
  }
} //Function SetDocFieldsState: boolean;

procedure SetEditMode(Value: boolean);
{
  //timelog(GetInterfaceName+'->SetEditMode:Value='+string(Value));
  if (isProtect=(not Value)) and isProtect_Set
  { SetDocFieldsState;
    exit; // не будем повторно ставить
  }
  if boVisibleRun
  { LoadProtector;
    DataProtector.SetProtected(not Value);
  }
  else
  { ProtectRecord(CurTable,Not Value);
  }
  if Value
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpBlueWindow);
  else
    cfsSetProp(cfsGetCurrentContainerSelf, cfpPalette, wpCyanWindow);
  isProtect:=not Value;
  isProtect_Set:=true;
  SetDocFieldsState;
  //timelog(GetInterfaceName+'->SetEditMode finish=');
} //Procedure SetEditMode(_isEdit:boolean);

Function CanEditTbl:boolean;
{
  result:=UserAccessService.CanEdit(Zayavka.status);
  if not Result exit;
} //Function CanEditTbl:boolean;

Function Status_Init:boolean;
{ Result:=False;
  if _typeZayav=0 then exit;
  if FindTypeDocs._typeZayav1 <>_typeZayav
  or (Status=NullRef)
  { FindTypeDocs._typeZayav1 :=_typeZayav;
    if FindTypeDocs.getfirst Gp_TypeDocs_Find <>tsok then
    { Message('Не нашли запись в справочнике документов для типа '+string(_typeZayav)
       +chr(13)+'Зайдите в  Управление персоналом - Столовая - Настройки - Настройки доступа к документам' );
      exit;
    }
    //if (Status=NullRef)
    Status:=New(GP_Status,InitForTypeDoc(FindTypeDocs.GP_TypeDocs_Find.Name));
  }
  else Result:=True;
} //Function Status_Init(_wType:word):boolean;

  //-----------------------------------------------------

  // Поиск следующего номера документа
  //-----------------------------------------------------

  function GetNextDocNumber(InYear:word):string;
  var _DTBeg,_DTEnd:_datetime;
      _wTypeDoc:word;
  { _DTBeg:=_DateTime(1,1,InYear,0,0,0,0);
    _DTEnd:=_DateTime(31,12,InYear,23,59,0,0);
    _wTypeDoc:=_typeZayav;
    result:='';
    sql
      select max(GP_ZAYAVKA_PITANIE.NoDOC)
      from GP_ZAYAVKA_PITANIE
    where(:(_DTBeg)<=GP_ZAYAVKA_PITANIE.DocDate
      and GP_ZAYAVKA_PITANIE.wTypeDoc=:(_wTypeDoc))
    into (result);

    if (Trim(result)='')
      result:='000001'
    else
      result:=NextNumStr(result);
  } //function GetNextDocNumber(InYear:word):string;


  //============================================
  // Получить статус по умолчанию
  //============================================
  Function GetStatus_Default:comp;
  { Result:=Status.GetDefault;
  } //Function GetStatus_Default:comp;




  //-------------------------------------------
  #doc
    Установить ограничения
  #end

//---------------------------------------------
// Тип документа
//---------------------------------------------

//---------------------------------------------

//-------------------------------------
// Защитить данные
//-------------------------------------


//-------------------------------------
// Защитить данные
//-------------------------------------
//-------------------------------------
//
//-------------------------------------
Procedure PositionChanged;
{
  SetEditMode(CanEditTbl);
  ReScanPanel(#Zayavka);
} //Function PositionChanged;

Procedure MakeBufferZayavka;
  { ClearBuffer(#Zayavka);
    Zayavka.Nrec       := GetNextNrec(#Zayavka,0) ;
    Zayavka.INPUT_DATE := _CurDateTime;
    Zayavka.wTypeDoc   := _typeZayav;
    Zayavka.noDoc      := GetNextDocNumber(year(Cur_Date));
    Zayavka.CUSERINPUT := UserID(); //UserAccessService.UserPersonsNRec;
    Zayavka.DocDate    := Cur_date;
    Zayavka.Status     := pStatus_GetDefault;

    IF _typeZayav = coWdocType_ZayavDel{
      ZAYAVKA.climitcategory := 000A000000000142h; // Запрет питания
    }
    if _typeZayav = coWdocType_ZayavZarList{
     ZAYAVKA.ADDWORD[1] := 3;
    }
  } //Procedure MakeBufferGP_SCUD_Doc;

//========================================================
// Визуальная часть
//========================================================
//------------------------------------------------------------------------------
// Задание подписантов
//------------------------------------------------------------------------------

//------------------------------------------------------
// Окно редактирования документа
//------------------------------------------------------
Window wnEdit  '';
Show at (,,120,24);
Screen ScrEdit (,,sci18Esc);
//Show at (,,,7);
Table zayavka;
Fields
  zayavka.DocDate  ('Дата документа ',,sci138Esc): [12] ,NoProtect;
  zayavka.NoDoc    ('Номер документа')           : [10] ,NoProtect;
  GP_Status.Name   ('статус документа ',,sci138Esc):[10] ,Protect,PickButton;
  Userinput.XU$FULLNAME  ('Автор документа - кто занес в систему') : Protect, Skip;
  zayavka.INPUT_DATE ('Дата внесения в систему' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip;
  UserApprove.XU$FULLNAME ('Утвердивший документа - кто утвердил') : Protect, Skip;
  zayavka.APPROVE_DATE ('Дата утверждения документа' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip, {Font={Color=if(zayavka.APPROVE_DATE = _datetime(0,0,0,0,0,0,0), 0, 13)}};
  zayavka.TRANSTOIIKO_DATE ('Дата передачи в IIKO' ,,sci138Esc): [12] ,Protect, NoPickButton, Skip, {Font={Color=if(Zayavka.TRANSTOIIKO_DATE = _datetime(0,0,0,0,0,0,0),0,14)}};
  PersonsFio         ('Сотрудник',,sci138Esc):Protect,PickButton,NoDel, {Font={BackColor=if(Zayavka.CGP_SCUD_PERS<> 0h,0,ColorNeed)}};
  podr.Kod           ('Подразделение код') : Protect;
  podr.name          ('Подразделение наименование') : Protect;
  limitcategory      ('Категория лимита питания',,sci138Esc):Protect,PickButton,NoDel, {Font={BackColor=if(Zayavka.CLIMITCATEGORY<>0h,0,ColorNeed)}};
  zayavka.ADDWORD[1] : NoProtect;
  zayavka.ADDSTR[1]  : NoProtect, { inputmask = '"+7"(999)999"-"9999' }, {Font={BackColor=if(trim(zayavka.ADDSTR[1]) <> '',0,ColorNeed)}};
  zayavka.ADDSTR[2]  : NoProtect, {Font={BackColor=if(trim(zayavka.ADDSTR[2]) <> '',0,ColorNeed)}};
<<
  `Дата документа`  .@@@@@@@@@@@ `Номер` .@@@@@@@@@ `Статус`  .@@@@@@@@@@@@@@@@@@@
   `Автор `   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `Дата создания   ` .@@@@@@@@@@@@@@@
   `Утвердил` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ `Дата утверждения` .@@@@@@@@@@@@@@@
                                            `Дата передачи в IIKO` .@@@@@@@@@@@@@@@

  `Сотрудник    `   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Подразделение`   .@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  `Категория лимита`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   Уведомить по:
    [.] - телефон ` .@@@@@@@@@@@@@@@@@@  (Для получения через портал)
    [.] - E-Mail  ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (Для получения на E-MAIL)

>>
end;
Handleevent
  cmPrintDoc: {
        processcommand(cmPrintDoc);
      }
end;
end;
//------------------------------------------------------
/*
Function MakeDoc(  _CGP_SCUD_PERS  : comp//.Nrec
                    ;_DOCDATE        : date
                    ;_CLIMITCATEGORY : comp
                    ;_WTYPEDOC       : word
                    ):boolean;
{

}
*/
  //-------------------------------------
  #doc
    Редактировать документ
  #end
  Function EditDoc (_pGP_IIKO_Doc:comp) :boolean;
  { Result:=false;
    if getfirst Zayavka where (( _pGP_IIKO_Doc == Zayavka.Nrec ))<>tsok exit;
    pGP_IIKO_Doc :=_pGP_IIKO_Doc;
    //mAddBounds(tbbyNrec)
    if not BoundActive(tbbyNrec) PushBounds(tbbyNrec);

//    SetVisibleRun(true);
    PositionChanged;
    RunWindowModal(wnEdit);
    Result:=true;
  } //Function EditDoc (_pGP_SCUD_Doc:comp) :boolean;





Procedure EnableDisableInsert(_Enable:boolean);
{ if _Enable
  { EnableCommand(cmInsert);
    EnableCommand(cmEdit);
    EnableCommand(cmAddNewRec);
    EnableCommand(cmInsertRecord);
    EnableCommand(cmSetDefault);


  }
  else
  { DisableCommand(cmInsert);
    DisableCommand(cmEdit);
    DisableCommand(cmAddNewRec);
    DisableCommand(cmInsertRecord);
    DisableCommand(cmSetDefault);
  }

}//Function EnableDisableInsert(_Enable:boolean);

//------------------------------------
// Запретить/разрешить удаление
//------------------------------------

Procedure SetDocStateStart;
{ EnableDisableInsert(UserAccessService.CanIns(_typeZayav));
}

Procedure LoadInterface;
{  //-----------------------------
boVisibleRun := TRUE;
var RoleGroupName : string;
  RoleGroupName:=if(coWdocType_ZayavZarList <> _typeZayav,'IIKO','Мотивация персонала');

  _Kau_IIKOLIMIT := 0;
  _Kau_IIKOLIMIT := wgettune('GP_OWN.GP_OWN.PITANIE.KAULIMIT');

  if _Kau_IIKOLIMIT = 0
   {
     message('В настройке не указана аналитика лимитов питания',error)
   }
  UserAccessService:=New(GP_UserAccessService,InitForRoleGroup(RoleGroupName));
  //timelog(GetInterfaceName+'->LoadInterface:003 ');
  if (UserAccessService=NullRef) {
        abort;
        exit;
  }
  //------------------------------
  boDataProtector:=false;
  if boVisibleRun
  { LoadProtector;
  }
  Status_Init;
  if not NullVipRef(Status)
  pStatus_GetDefault:=GetStatus_Default();
  //------------------
  //timelog(GetInterfaceName+'->LoadInterface:006');
  //-----------------------------
  StatusChange:=New(GP_StatusChange,InitForRoleGroup(UserAccessService.RoleGroup));
  //-----------------------------
  //-------------------------
  fCurMainFormatEdit:=GetCurrentFormat;
  SetDocStateStart;
  //-------------------------
  /*  20190911 Фролова Е.С. сказала убрать ограничения по подразделениям ЗП
   if(getfirst ZU where upcase(USERNAME) = upcase(ZU.OWNNAME) and ZU.podrshare = '+')= tsOK
   {
   _try
    {
     delete all tPodr;
     sql
      select
       UR.crecds
      from USERRIGHTS UR
       inner join ZAR_USER ZU on upper('CB\'+ZU.OWNNAME) = upper('CB\'+:(USERNAME))
                                           and ZU.OWNNAME = UR.OWNNAME
      into tPodr;
    }
    _except
     else {}
    addbounds(tbbuZarPodr);
   }
   */
  CASE _typeZayav of
    coWdocType_ZayavIns :
                     {
                       sTitle_InterFace := 'Ввод заявлений на питание';
                       sTitle_Window  := 'Редактирование заявления на питание';
                       cfsSetProp('T_SCREDIT_(Для_получения_через_портал)','VISIBLE',false)
                       cfsSetProp('T_SCREDIT_(Для_получения_на_E-MAIL)','VISIBLE',false)
                     }
    coWdocType_ZayavDel :
                     {
                      sTitle_InterFace := 'Ввод заявлений на прекращение питания';
                      sTitle_Window := 'Редактирование заявления на прекращение питания';
                      cfsSetProp('c_BRDOC_LIMITCATEGORY_Лимит_питания','SKIP',TRUE);
                      //cfsSetProp('i_SCREDIT_LIMITCATEGORY','Visible',false);
                     }
    coWdocType_ZayavZarList:
                     {
                      sTitle_InterFace := 'Ввод заявлений на пересылку расчетного листка на почту';
                      sTitle_Window := 'Редактирование заявления на пересылку расчетного листка на почту';
                      cfsSetProp('c_BRDOC_LIMITCATEGORY_Лимит_питания','Visible',false);
                      cfsSetProp('i_SCREDIT_LIMITCATEGORY','Visible',false);
                      cfsSetProp('L_SCREDIT_Дата_передачи_в_IIKO','Visible',false);
                      cfsSetProp('i_SCREDIT_ZAYAVKA.TRANSTOIIKO_DATE','Visible',false);
                      //cfsSetProp('i_SCREDIT_ZAYAVKA.ADDSTR[2]','Protect',false);
//                      cfsSetProp('i_SCREDIT_ZAYAVKA.ADDSTR[2]','SKIP',false);
                      cfsSetProp('T_SCREDIT_Уведомить_по:','Title','Контакты');
//                      cfsSetProp('ci_SCREDIT_ZAYAVKA.ADDWORD[1]_-_телефон','SKIP',true);
//                      cfsSetProp('ci_SCREDIT_ZAYAVKA.ADDWORD[1]_-_E-Mail','SKIP' ,true);
                      cfsSetProp('c_BRDOC_ZAYAVKA.TRANSTOIIKO_DATE_Дата_передачи_в_IIKO','Visible' ,false);
                      cfsSetProp('L_SCREDIT_Категория_лимита','VISIBLE' ,false);
                      //ZAYAVKA.ADDWORD[1] := 3
                     }
   else sTitle_InterFace := '"!!!!!!!!!!!!!!!! неизвестный тип '
  end;
  if boVisibleRun
  {
    if(cfsSetCurrentContainer(cfsGetCurrentContainerSelf) <> cfOk)
    {
    }

  }

//  cfsSetProp('EM_IIKO::EM_ZAYAVPITANIE','Title',sTitle_InterFace);
//  cfsSetProp('BRDOC','Title',sTitle_InterFace);
  cfsSetProp('WNEDIT','Title',sTitle_Window)
  SetWindowTitle(wnMainWindow,sTitle_InterFace);
   _try
   {
     delete all tmp_Limitpitanie;
     var _codeLike : string = 'limit%'
    sql
      select
        spkau.nrec
      , spkau.code
      , spkau.name
      from spkau
      where
          spkau.kodgrkau = :(_Kau_IIKOLIMIT)
      and spkau.code like :(_codeLike)
      into tmp_Limitpitanie;
   }
  _except
   else {}
  _finally{}

  //timelog(GetInterfaceName+'->LoadInterface:Final');
} //Procedure LoadInterface(_wVisibleRun:boolean);

Function Check_Status_Change_Before(_pStatus:comp):boolean;
{ Result:=true;
  _pStatus:=_pStatus;
} //Function Check_Status_Change_Before:boolean;

//--------- выполнить проверку после изменения статуса
Function Check_Status_Change_After(_pStatus:comp;_pStatusTo:comp):boolean;
{ Result:=True;
  _pStatus:=_pStatus;
} //Function Check_Status_Change_After:boolean;

function ChangeStatus(pDoc:comp;StatusChangeLog:type$GP_StatusChangeLog):comp;
var Rez:integer;
{
  result:=0;
  if not Check_Status_Change_Before(StatusChangeLog.cStatusFrom)
  {
    exit;
  }
  Status_Init;
  //Начало транзакции
  Rez:=BeginConcurrentTransaction(trNoLock);
  if (Rez<>tsok)
    message('Ошибка открытия транзакции - '+string(Rez),error);
  else {
    GP_StatusChangeLog.buffer   := StatusChangeLog;
    GP_StatusChangeLog.NRec     := 0;
    GP_StatusChangeLog.wTbl     := co_ZAYAVKA_PITANIE;
    GP_StatusChangeLog.cDoc     := pDoc;
    GP_StatusChangeLog.DateOper := _CurDateTime;
    GP_StatusChangeLog.cUser    := UserId;
    Rez:=insert current GP_StatusChangeLog;
    if (Rez<>tsok)
      message('Ошибка вставки записи в таблицу GP_StatusChangeLog - '+string(Rez),error);

    if (Rez=tsok) {
      Result:=StatusChangeLog.cStatusTo;
      if (Rez<>tsok)
        message('Ошибка модификации записи в таблице '+string(Rez),error);
    }

    if (Rez=tsok) {//Запись в БД
      Rez:=EndTransaction;
      if (Rez<>tsOK)
      {  message('Ошибка завершения транзакции - '+string(Rez),error);
         result:=0;
      }
    } else {//Откат
      Rez:=AbortTransaction;
      if (Rez<>tsOK)
      { message('Ошибка отката транзакции - '+string(Rez),error);
        Result:=0
      }
    }
  }
  if Result<>0
  { //Check_Status_Change_After(Result); - будем проверять только если переведен с дефалта
    Check_Status_Change_After(StatusChangeLog.cStatusFrom,Result);

  }
} //function ChangeStatus(pDoc:comp;StatusChangeLog:type$GP_StatusChangeLog):comp;

function MyPickStatus: boolean;
{
  var _sStatus_Prev:string;
  var _Status_Prev : comp;
  var  StatusChangeLog:type$GP_StatusChangeLog;
  {
    if zayavka.STATUS =  pStatus_GetDefault // 'ОФОРМЛЯЕМЫЙ'
     {
      if _typeZayav = coWdocType_ZayavIns
      if Zayavka.CLIMITCATEGORY = 0
       {
         Message('Не выбран лимит питания',error);
         exit;
       }
      if Zayavka.CGP_SCUD_PERS = 0
       {
         Message('Не выбран сотрудник',error);
         exit;
       }
      if _typeZayav = coWdocType_ZayavZarList
       {
        if zayavka.ADDWORD[1] = 0
        {
         Message('Не выбран ни телефон ни EMAIL',error);
         exit;
        }

        if trim(zayavka.ADDSTR[1]) = '' and (zayavka.ADDWORD[1] = 3 or zayavka.ADDWORD[1] = 1)
         {
           Message('Не указан телефон',error);
           exit;
         }
        if trim(zayavka.ADDSTR[2]) = '' and (zayavka.ADDWORD[1] = 3 or zayavka.ADDWORD[1] = 2)
         {
           Message('Не указан e-Mail',error);
           exit;
         }
       }
     }
    _sStatus_Prev:='';
    Result:=false;
     ClearAdvRecord(StatusChangeLog);
     _Status_Prev  := Zayavka.Status;
     _sStatus_Prev := GP_Status.Name;

//     oGP_Log.Init('IIKO_ZayavkaPitanie.log', true, true, true);

      StatusChangeLog.cStatusFrom := Zayavka.Status;


         if (StatusChange.PickStatus(Zayavka.Status))
          {
            var pTmp : comp;
            pTmp:=ChangeStatus(Zayavka.NRec,StatusChange.StatusChangeLog);
            if PTmp<>0
            { set Zayavka.Status:=StatusChange.StatusChangeLog.cStatusTo;

               if _Status_Prev <> Zayavka.Status
               {
                 if upcase(GP_Status.Name) = 'УТВЕРЖДЕН'
                 {
                  set zayavka.CUSERAPPROVE := userID;
                  set zayavka.APPROVE_DATE := _CurDateTime;
                 }
                 if upcase(_sStatus_Prev) = 'УТВЕРЖДЕН'
                 {
                  set zayavka.CUSERAPPROVE := 0h;
                  set zayavka.APPROVE_DATE := _datetime(0,0,0, 0,0,0,0);
                 }
               }
              update current Zayavka;
              SetEditMode(CanEditTbl);
              Result:=true;
            }
          }
      ReReadRecord(#Zayavka);
//    oGP_Log.Done(true);
  }// MyPickStatus
}
Procedure PrintDoc;
{
  if zayavka.wTypeDoc = coWdocType_ZayavZarList then
   if upcase(GP_Status.Name) = upcase('На утверждении')
     then {RunFReport(ZayavZarList_DTS, '', False);}
     else
      {
        Message('Печать возможна только в статусе "На утверждении"',error)
      }
}


  //---------------------------------------------
  // Загрузчик интерфейса
  //---------------------------------------------
Browse brDoc '' (,,sci1478Esc)
//show at (,,,15);
Table Zayavka;
Fields {Font={Color=if(Zayavka.TRANSTOIIKO_DATE = _datetime(0,0,0,0,0,0,0)
                       ,if(zayavka.APPROVE_DATE = _datetime(0,0,0,0,0,0,0)
                          , 0
                          , 13
                          )
                       ,3)}};
  zayavka.DocDate     'Дата'  ('Дата документа')  : [12] ,Protect,NoDel;
  zayavka.NoDoc       'Номер' ('номер документа') : [10] ,Protect,NoDel;
  GP_Status.Name      'Статус' ('статус документа ',,sci13Esc): [10],Protect,NoDel;
  zayavka.INPUT_DATE   'Дата ввода'  ('Дата ввода документа')  : [12] ,Protect,NoDel;
  zayavka.APPROVE_DATE 'Дата утверждения'  ('Дата утверждения документа')  : [12] ,Protect,NoDel;
  zayavka.TRANSTOIIKO_DATE 'Дата передачи в IIKO'  ('Дата передачи в IIKO')  : [12] ,Protect,NoDel;
  PersonsFio           'ФИО'  ('ФИО сотрудника')  : [12] ,Protect,NoDel;
  Pers.sex             'Пол'  ('Пол сотрудника')  : [2] ,Protect,NoDel;
  podr.Kod             'Подр.' ('Код подразделения') : [10] ,Protect,NoDel;
  limitcategory        'Лимит питания' ('Категория лимита питания') : [10] ,Protect,NoDel;

end;//Browse
//******************************************************************************
// HandleEvent таблиц
//******************************************************************************
TableEvent table Zayavka
cmSetDefault:
{ //if GP_SCUD_Doc.cStatus<>pStatus_GetDefault
  //{ exit;
  //}
  MakeBufferZayavka;
  Insert current Zayavka;
  SetNew(false);
  SetEditMode(CanEditTbl());
  PutCommand(cmEdit)
}
cmCheckRecord:
{
  //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmDoGetNext:
{ //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmDoGetPrev:
{ //if boWinEdit
  //  if Not MyCheckRecord abort;
}
cmCheckField:
{
   updatetable;
}
cmInsertRecord:
{ Insert Current Zayavka;
}
cmUpdateRecord:
{ Update Current Zayavka;
}
cmDeleteRecord:
{ if Zayavka.Status<>pStatus_GetDefault
  { message('Удаление доступно только в оформляемом статусе')
  }
  else
  { if message('Удалить документ '+Zayavka.NoDoc+'?', YesNo)=cmYes
    {  if not true //проверить есть ли уже питание по человеку
       { message(  'По сотруднику есть суммы питания'
          +chr(13)+'Удаление запрещено!');
         exit;
       }
       delete Current Zayavka;
    }
  }
}

cmPositionChanged:
{ PositionChanged;
}
end; //GP_SCUD_Doc


Window wnGetLimitpitanie 'Выбор категории питания' (,,sci1Esc) ,DoAccept,Cyan;
Show at (,,60,15);
Browse brGetLimitpitanie;
Table tmp_Limitpitanie;
Fields
  tmp_Limitpitanie.name 'Наименование':[40],Protect,NoDel;
  tmp_Limitpitanie.Code 'Код':[20],Protect,NoDel;
end;//Browse brReason;
end;//Window wnGetReason

//------------------------------
//******************************************************************************
// HandleEvent самого интерфейса
//******************************************************************************
  HandleEvent
    //-----------------------------
    cmInit:
    {
      LoadInterFace;
      ClearFuncCache;
      //--------------------------
      if UserAccessService.OnlyUserDoc(_typeZayav)
      { AddBounds(tbByUserID);
      }

      //--------------------------
      if getfirst Zayavka where (( cRec == Zayavka.nrec ))=tsok {}
      if cRec>0
      { if getfirst Zayavka where (( cRec == Zayavka.nrec ))=tsok {}
      }

      //-------------------------

      rereadrecord(#Zayavka);
    }
    //-----------------------------
    cmOnVipLoad:
    { //LoadInterFace(false);
    }
    //-----------------------------
    cmDone:
    {
      //UnLoadInterFace(true);
    }
    //-----------------------------
    cmOnVipUnLoad:
    { //UnLoadInterFace(false);
    }
    //-----------------------------
    cmDefault:
    {
      PutCommand(cmEdit);
    }
    cmEdit:
    {  RunWindowModal(wnEdit);
    }
    cmPick:
    {
      case curField of
      #GP_Status.Name:
      {

        MyPickStatus;
      }
      #PersonsFio:
      {
       if RunInterface(GP_STAFF::GP_SCUD_PersVib,cgiPick,Zayavka.CGP_SCUD_PERS,0,0)<>cmCancel
        {
          Set Zayavka.CGP_SCUD_PERS := Zayavka.CGP_SCUD_PERS;
          set zayavka.cPodr := ScudPers.cKatPodr
          set zayavka.ADDSTR[2]  :=if(isValid(tneMail), eMail.eMail,'');
          SetModified(true);
          UpdateTable;// ломает базу;
        }
      }
      #limitcategory:
       {
         if _Kau_IIKOLIMIT = 0
         {
           message('В настройке не указана аналитика лимитов питания',error)
         }
         else
         {
           IF _typeZayav = coWdocType_ZayavDel
           {
            message('В запрете питания выбор категории запрещен',error)
           }
           else
           {
             if RunWindowModal(wnGetLimitpitanie)=cmDefault
              {
                set Zayavka.CLIMITCATEGORY := tmp_Limitpitanie.nrec
                SetModified(true);
                UpdateTable;// ломает базу;
              }
             /*
             if iGetKau.GetCodeKau(cgiPick,_Kau_IIKOLIMIT,Zayavka.CLIMITCATEGORY)<>cmCancel
             {
              set Zayavka.CLIMITCATEGORY := Zayavka.CLIMITCATEGORY
              SetModified(true);
              UpdateTable;// ломает базу;
             }
             */
           }
         }
       }
      end;
    }

    //--------------------------
    cmPickClass:// внешние классификаторы
    {
      if UpdateTable
      case CurTable of
      #Zayavka: RunInterface('C_EXTCLASS::ExClassifier', coGP_ZAYAVKA_PITANIE, Zayavka.nRec);
      end;
      ClearFuncCache;
    }
    //--------------------------
    //--------------------------
    cmPrintDoc : PrintDoc;
    cmFilterSave:
    {

    }
    //--------------------------
    cmPickAttr:// внешние аттрибуты
    {
      if UpdateTable
      case CurTable of
      #Zayavka: RunInterface('C_EXTCLASS::Attribute', coGP_ZAYAVKA_PITANIE, Zayavka.nRec);
      end;
      ClearFuncCache;
    }
    //--------------------------
    cmHotKeys:
    {
      case CurTable of
      #Zayavka:
      {
        ProcessCommand(RunMenu('GP_IIKO_ZAYAVKA_Main_HotKey_Adm'));
       /*
        if pr_CurUserAdmin
        { ProcessCommand(RunMenu('GP_SCUD_DocEdit_Main_HotKey_Adm'));
        }
        else
        { ProcessCommand(RunMenu('GP_SCUD_DocEdit_Main_HotKey'));
        }
        */
      }
      end;
    }
    cmdelonprotect:
    {
      stop;abort;exit;

    }
  end;

end.
GP_IIKO_ZAYAVKA_Main_HotKey_Adm Menu
{
// - 'Фильтр на данные'     , cmFilterSave, 'Фильтр на данные', hcProc_NagrKaf, 'Alt+B',kbAltB, scMenuCtx;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты'     , cmPickAttr , 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;

}
