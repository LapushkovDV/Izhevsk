/*************************************************************************************************\
* Наименование: Ведение телефонного справочника                                                   *
* Контур/Модуль: Кадры                                                                            *
* Примечание:                                                                                     *
*                                                                                                 *
* Вид работы  |Номер         |Дата    |Исполнитель              |Проект                           *
* ----------------------------------------------------------------------------------------------- *

\*************************************************************************************************/

const
end;
#include Import_plan.vih
#component "M_MnPlan"
Interface Import_plan 'Импорт плана';
#include VarsTypes.var
Table Struct tRows
(
    nrow        : longint
  , npp         : longint
  , detal_nomer : string
  , cDetal      : comp
  , kolvo       : double
  , data        : date
  , postavschik : string
  , tsikl       : string
  , poluchatel  : string
  , KatMarshKod : string
  , cKATMARSH   : comp

  , FlagErr : byte
  , Descr   : string

)
with index
(
   Index1 = nrow
  ,Index2 = npp
)
;


procedure MyLog(_log : string); forward;
procedure Insert_mnplan_sp; forward;
create view
var
  dateformat : string = 'DD.MM.YYYY' ;
  ListName   : string = 'Лист1';

  File_input : string;
  _logFile     : string= '';
  typeTable    : word = 0;

  _cMnPlan : comp;

from
   KatMc
 , mnplan
 , spmnplan
 , spmnpl
 , valspmnp
 , KATMARSH
 , KATMARSH KATMARSH_br
 , KatMc KatMc_br
 , groupmc groupmc_br
 , groupmc
 , mnanal

 , trows trows_br
 , trows
where ((
            trows_br.cDetal == katmc_br.nrec
     and  katmc_br.CGROUPMC == groupmc_br.nrec
     and trows_br.cKatMarsh == KatMarsh_br.nrec
      ))
;

PROCEdURE ClearAll;
{
 delete all tRows;
 rereadrecord;
} // PROCEdURE ClearAll;

PROCEdURE fillrecArrayByTypeTable;
{
    var _npp: byte;
        _npp := 1;
    SetLimit(_recArray, 0);
    SetLimit(_recArray, 1);
    _recArray[_npp].def := 'Номер детали'; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Количество'  ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Дата'        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Пост.'       ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Цикл'        ; SetLimit(_recArray, GetLimit(_recArray) + 1); _npp++;
    _recArray[_npp].def := 'Получ'       ;
}

Function getColor(_FlagErr: byte) : word;
{
  case _FlagErr of
   0 : Result := 0
   1 : Result := ColorNeed
   2 : Result := ColorError
  else
  {
   Result := 0;
  }
  end;
}


#declare seterror(_str)
  tRows.FlagErr := 2 ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

#declare setwarning(_str)
  tRows.FlagErr := 1 ;
  tRows.Descr   := tRows.Descr + #_str;
//  mylog(#_str);
#end

Procedure CheckErrors_tRows;
{
   setvisualheader('определение ошибок -_- ');

  update tRows set tRows.FlagErr := 0, tRows.Descr := '';

  StartNewVisual(vtIndicatorVisual , vfTimer, 'определение ошибок',recordsintable(tntRows));
  _loop tRows {
      nextvisual;
      if tRows.data = to_date(0,0,0) {
         #seterror('|пустая дата')
      }
      if tRows.cDetal = 0h {
         #seterror('|не найдена ТМЦ')
      }
      if tRows.cKATMARSH = 0h {
         #setwarning('|не найдена маршрутная карта по коду "' + tRows.KatMarshKod+'"')
      }
/*
      if tRows.kolvo = 0 {
         #seterror('|нулевое количество')
      }
*/
    update current tRows;
   }
  if visualizationactive  StopVisual('The End',vfTimer);
}


#include OpenFileExcelSearchCells.vpp

function getmc(_barkod : string) : comp;
{
  result := 0h;
   if getfirst katmc where ((_barkod == katmc.barkod)) = tsOK then {
     result := katmc.nrec;
    }
}

/*
function getKatEd(_edIzm: string): comp;
{
  result := 0h;
 if(getfirst KATED where KATED.NAME = _edIzm) =tsOK{
   result := KATED.nrec
 }
 else {
   if(getfirst KATED where KATED.ABBR = _edIzm) =tsOK{
     result := KATED.nrec
   }
 }
}
*/
/*
function getOtpEdbyName(_cmc : comp; _edIzm : string) : comp; {
   var _ced : comp = getKatEd(_edIzm);
   if getfirst KatOtpEd where ((1 == KatOtpEd.prmc
                   and katmc.nrec == KatOtpEd.cMcUsl
                        and _cEd  == KatOtpEd.CKATED)) = tsOk {
                   result := KatOtpEd.nrec
                   }
  if result <> getOtpEdEqUchet(_cmc) then result := 0h;
}
*/
function getKatMarch(_cmc : comp; _postavschik, _tsikl, _poluchatel : string) : comp; {
  result := 0h;
  if getfirst katmc where ((_cMc == katmc.nrec)) <> tsOK then exit;
  if getfirst GroupMC where ((katmc.CGROUPMC == groupmc.nrec)) <> tsOK then exit;

  var _KatMarshKod : string = '';

   if groupmc.kod = '1002'
    then _KatMarshKod := Katmc.barkod + '_L_'+ _poluchatel + '_' + LPadCh(_tsikl+'00', '0', 4);
    else _KatMarshKod := Katmc.barkod + '_'+ _postavschik + '_' + LPadCh(_tsikl+'00', '0', 4);

     update current tRows set tRows.KatMarshKod := _KatMarshKod;

  if getfirst katmarsh where ((_KatMarshKod == KATMARSH.SHIFR)) = tsOK then {
      result := katmarsh.nrec;
    }
    else {
      _KatMarshKod := Katmc.barkod;
       if getfirst katmarsh where ((_KatMarshKod == KATMARSH.SHIFR)) = tsOK then {
       result := katmarsh.nrec;
       update current tRows set tRows.KatMarshKod := _KatMarshKod;
    }
   }
}

Procedure prtInserttRows(_nrow : longint; _file : string); {
  var _i: byte;

  clearBuffer(tntRows);
  tRows.nrow := _nrow;

  for(_i := 1; _I <= getLimit(_recArray); _i++)
  {
    case upcase(_recArray[_i].def) of
       Upcase( 'Номер детали') : tRows.detal_nomer := Trim(_recArray[_i].value);
       Upcase( 'Количество'  ) : tRows.kolvo       := Double(replace(replace(Trim(_recArray[_i].value),',','.'),' ',''));
       Upcase( 'Дата'        ) : tRows.data        := StrToDate(Trim(_recArray[_i].value),dateformat);
       Upcase( 'Пост.'       ) : tRows.postavschik := Trim(_recArray[_i].value);
       Upcase( 'Цикл'        ) : tRows.tsikl       := Trim(_recArray[_i].value);
       Upcase( 'Получ'       ) : tRows.poluchatel  := Trim(_recArray[_i].value);
    end;
  }
//   if tInsertBaseDocSP.cMc <> 0h
   if tRows.detal_nomer <> '' then Insert Current tRows;
   tRows.cDetal    := getmc(tRows.detal_nomer);
   tRows.cKATMARSH := getKatMarch(tRows.cDetal, tRows.postavschik, tRows.tsikl, tRows.poluchatel);
   update Current tRows;
}  // tInsertSaldoMC


procedure MyLog(_log : string); {
  if _logFile = '' then _logFile := GetStringParameter('Files', 'OutputFilesDirectory', 0) + 'ImportOstatki_'+DateToStr(Cur_date, 'YYYYMMDD') + '_' + timetostr(Cur_time, 'HH.MM.SS') + '_' + UserName + '.log';
//  logstrtofile(_logFile,ShortStrToWin(_log));
  logstrtofile(_logFile,_log);
}

PROCEdURE FillInsertTables(_nrow : longint; _file : string); {
   prtInserttRows(_nrow, _file)
} // PROCEdURE FillInsertTableeNaklSFO(_log: string);



Window winImportPlanSP;
Screen scrImportPlanSP ;
  show at (,,, 4);
  Fields
    dateformat   : NoProtect,{Font = {backcolor = if(dateformat = '', colorneed,0);}};
    ListName     : NoProtect,{Font = {backcolor = if(ListName = '', colorneed,0);}};
    File_input :  Protect, PickButton,{Font = {backcolor = if(File_input = '', colorneed,0);}};
  buttons
    cmOK,,,;
    cmCreateDocs,,,;
    cmCancel,,,;
<<'Импорт спецификации План сбыта из EXCEL'
       Формат даты.@@@@@@@@@@@
Наименование листа.@@@@@@@@@@@@@@@@
        EXCEL Файл.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <.Загрузить файл.>            <.Заполнить спецификацию плана.>            <. Отмена .>
>>
end;
browse brtRows_br('',,sci1Esc);
 show at(,5,,);
table tRows_br;
fields
 {Font = {backcolor = getColor(tRows_br.FlagErr);}};
  tRows_br.nrow        'Строка','в файле'  headerAlign = centered:protect,[4];
  tRows_br.detal_nomer 'Деталь','в файле'  headerAlign = centered:protect,[4];
  katmc_br.name        'Деталь','наименование' headerAlign = centered:protect,[4];
  groupmc_br.kod       'Деталь','Группа МЦ' headerAlign = centered:protect,[4];
  tRows_br.kolvo       'Кол-во','в файле'  headerAlign = centered:protect,[4];
  tRows_br.data        'Дата','в файле'    headerAlign = centered:protect,[4];
  tRows_br.postavschik 'Поставщ','в файле' headerAlign = centered:protect,[4];
  tRows_br.tsikl       'Цикл','в файле'    headerAlign = centered:protect,[4];
  tRows_br.poluchatel  'Получ','в файле'   headerAlign = centered:protect,[4];
  KATMARSH_br.name     'МК','наименование' headerAlign = centered:protect,[4];
  tRows_br.Descr       'Описание',''   headerAlign = centered:protect,[8];
end;
end;
windowevent winImportPlanSP;
cmOK: {
    if File_input = '' {
     message('не выбран файл шаблона',error) ;
     stop;abort;exit;
    }
    if dateformat = '' {
     message('не указан формат даты',error);
     stop;abort;exit;
    }
    if ListName = '' {
     message('не указан EXCEL лист',error);
     stop;abort;exit;
    }
  StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    ClearAll;
    fillrecArrayByTypeTable;
    var _isError : boolean = false;
    MyLog( '***********************************************************************');
    _isError := not CheckFileFillValues(File_input);

    if _isError then {
      ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол обработки файлов и загрузки данных');
    }
  CheckErrors_tRows;
 if visualizationactive  StopVisual('The End',vfTimer);
 if visualizationactive  StopVisual('The End',vfTimer);
  rereadrecord(tntRows_br);
} // cmOK
cmCreateDocs: {
  if getfirst tRows <> tsOK {
    Message('Сначала загрузите файл',error);
    stop; abort; exit;
  }
  if(getfirst tRows where tRows.FlagErr = 2 )= tsOK {
    Message('В файле есть ошибки. Загрузка невозможна',error);
    stop; abort; exit;
  }
  var _isError : boolean = false;
   StartNewVisual(vtRotateVisual, vfTimer, 'Он сказал поехали и махнул рукой', 1);
    Insert_mnplan_sp;
   if visualizationactive  StopVisual('The End',vfTimer);
    //ProcessText(_logFile, vfEscable or vfNewTitle or vfMacroSize, 'Протокол работы');
    rereadrecord(tntRows_br);
}
end;

procedure Insert_mnplan_sp; {
  var _npp : longint = 0;
  SetVisualHeader('Заполнение спецификации' +
       ''#13''+ 'Обработано записей ' + string(_npp));
    if getfirst mnanal where ((mnplan.cSloj == mnanal.cSloj
                            and mnplan.nrec == mnanal.FLDAN1(noindex))) <> tsOK {
        insert mnanal set
           mnanal.cSloj := mnplan.cSloj
         , mnanal.FLDAN1 := mnplan.nrec
        ;
       }
   _loop trows {
      if _npp mod 137 = 0 {
         SetVisualHeader('Заполнение спецификации' +
          ''#13''+ 'Обработано записей ' + string(_npp));
       }
     _npp++;

     insert spmnplan set
        spmnplan.cMnPlan  := _cMnPlan
      , spmnplan.number   := LPADCH(string(_npp),'0',5)
      , spmnplan.canval1  := tRows.cKATMARSH
      , spmnplan.typeizd  := 1
      , spmnplan.cIzd     := tRows.cDetal
      , spmnplan.enddate  := tRows.data
      , spmnplan.NUMSORT  := 0000000000000001h
      , spmnplan.CROLEAN1 := 4000FA4E54D10FEDh
      , spmnplan.WKODGR1  := 24
      , spmnplan.EDTIME   := 1
      , spmnplan.CSLOJ    := 0000000000000004h

     ;
     insert spmnpl set
        spmnpl.cspmnplan := spmnplan.nrec
      , spmnpl.enddate   := tRows.data
      , spmnpl.CROLEAN1  := 4000FA4E54D10FEDh
      , spmnpl.WKODGR1   := 24
      , spmnpl.CROLEAN4  := 40005BFB30245655h
      , spmnpl.WKODGR4   := 30
      , spmnpl.CANVAL4   := mnplan.nrec
      , spmnpl.TYPEIZD   := 1
      , spmnpl.EDTIME    := 1
      , spmnpl.CMNANAL   := mnanal.nrec
      , spmnpl.WKOLAN    := 26
      , spmnpl.RECOMDATE := tRows.data
      , spmnpl.CSLOJ     := 0000000000000004h
      , spmnpl.cmnplan   := _cMnPlan
     ;
     insert valspmnp set
        valspmnp.cSpMnPl       := spmnpl.nrec
      , valspmnp.kol           := tRows.kolvo
      , valspmnp.NUM           := 1
      , valspmnp.EDTIME        := 1
      , valspmnp.TYPEFIELD[1]  := 1
      , valspmnp.TYPEFIELD[2]  := 1
      , valspmnp.TYPEFIELD[3]  := 1
      , valspmnp.TYPEFIELD[4]  := 1
      , valspmnp.TYPEFIELD[5]  := 1
      , valspmnp.TYPEFIELD[6]  := 1
      , valspmnp.TYPEFIELD[7]  := 1
      , valspmnp.TYPEFIELD[8]  := 1
      , valspmnp.TYPEFIELD[9]  := 1
      , valspmnp.TYPEFIELD[10] := 1
      , valspmnp.TYPEFIELD[11] := 1
      , valspmnp.TYPEFIELD[12] := 1
      , valspmnp.TYPEFIELD[13] := 1
      , valspmnp.TYPEFIELD[14] := 1
     ;
   }
  closewindow(winImportPlanSP) ;
}

Procedure importPLanSP( __cMnPlan : comp);{
  set _cMnPlan := __cMnPlan;

  if getfirst mnplan where ((_cMnPlan == mnplan.nrec)) <> tsOK then exit;

  runwindowmodal(winImportPlanSP);
}

handleevent
cminit:{
 rereadrecord;
}
cmpick:{
  case curfield of
   #File_input: {
      File_input := GetFileName('*.xlsx;*.xls', 'Выбор шаблона для загрузки плана');
      ClearAll;
    }
  end;
rereadrecord;
}

end;
end.
