#include need_domestic_production.vih

#component "M_MnPlan"
Interface need_domestic_production 'Потребность внутреннего производства';

table struct tDateNameColumn (
    DateColumn : date
  , NameColumn : string
)
with index (
 ind0 = DateColumn
)
;
table struct tDateColumnsNpp (
   npp        : longint
 , NameColumn : string
)
with index (
   ind0 = npp
 , ind1 = NameColumn
)
;

table struct tBRMC (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;

table struct tBRcex (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;

table struct tBRplanovik (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;


table struct tMC (
    nRec         : comp
  , cMc          : comp
  , cModel       : comp
  , MCName       : string
  , MCCode       : string
  , ModelName    : string
  , edizm        : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = cMc + cModel
)
;

table struct tVidProduct (
   nRec    : comp
 , ctmc    : comp
 , cVid    : comp
 , NameVid : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctmc + cVid
)
;

table struct tCexSklad (
   nRec           : comp
 , ctmc           : comp
 , cSklad         : comp
 , SkladName      : string
 , ccex           : comp
 , cexname        : string
 , PlanovikProizv : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctmc + ccex + cSklad
)
;

table struct tValueMCVidProduct (
   ctmc : comp
 , value       : double
 , ColumnNPP   : longint
)
with index (
    ind0 = ctmc + ColumnNPP
)
;

table struct tValueVidProduct (
   cVidProduct : comp
 , value       : double
 , ColumnNPP   : longint
)
with index (
    ind0 = cVidProduct + ColumnNPP
)
;

table struct tValueCexSklad (
   cCexSklad : comp
 , value     : double
 , ColumnNPP : longint
)
with index (
    ind0 = cCexSklad + ColumnNPP
)
;


create view
 var
   _cMnPlan : comp;
   _dateB
 , _dateE : date;
  _LineReport : byte;
  column0 : word = 1;
   mid
 , fMarkermc
 , fMarkerCex
 , fMarkerplanovik    : longint;
   _fmc
 , _fcex
 , _fplanovik : string;

  _needmacros : boolean = false;

   pMarkerMC: IMarker(marker) new;
   pMarkerCex: IMarker(marker) new;
   pMarkerplanovik: IMarker(marker) new;

from
   MnPlan
 , SpMnPlan
 , SpMnPl
 , KatMC
 , ValSpMnP
 , spkau Model
 , KatParty
 , KatPodr Sklad
 , KatPodr Cex

 , attrnam AN_cex
 , attrval AV_cex
 , spkau PlanovikProizv

 , tDateColumnsNpp
 , tDateNameColumn
 , tBRplanovik
 , tBRcex
 , tBRMC
 , tMC
 , tVidProduct
 , tCexSklad
 , tValueMCVidProduct
 , tValueVidProduct
 , tValueCexSklad

where ((         _cMnPlan == MnPlan.Nrec
          and MnPlan.Nrec == SpMnPlan.cMnPlan
        and SpMnPlan.Nrec == SpMnPl.cSpMnPlan
          and SpMnPl.Nrec == ValSpMnP.cSpMnPl

        and SpMnPlan.cIzd == KatMC.Nrec
      and SpMnPlan.cOtpEd == KatOtpEd.Nrec


     and SpMnPlan.CANVAL2 == Sklad.nrec
     and SpMnPlan.CANVAL3 == Cex.nrec
     and SpMnPlan.CANVAL4 == Model.nrec
     and SpMnPlan.CANVAL5 == KatParty.nrec

  and                  coKatpodr == AN_CEX.wtable
     and 'Плановик производства' == AN_CEX.NAME
   and             AN_CEX.wtable == AV_CEX.wtable
      and               CEX.nrec == AV_CEX.cRec
   and               AN_CEX.nrec == AV_CEX.cAttrnam
    and              AV_cex.vComp == PlanovikProizv.nrec
  ))
;




window wintBRMC 'Выбор номенклатуры', cyan;
browse tBRMC;
 table tBRMC;
 recMarker = pMarkerMC{tBRMC.nrec}; // по умолчанию итак nrec юзается...
fields
 tBRMC.name  : [10],protect, nopickbutton;
 tBRMC.code  : [5], protect, nopickbutton;
end;
end;
windowevent wintBRMC ;
 cminit: {
  pMarkerMC.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBRMC <> tsOK {
      _Try
      {
         SQL
           select distinct
               KatMC.nrec   as nrec
             , KatMC.name   as name
             , katmc.barkod as code
           From spmnplan
           join KatMC on KatMC.Nrec = SpMnPlan.cIzd
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBRMC;
      }
      _Except
      else
      {
      }

    }
  if getfirst tBRMC = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBRMC, cmDefault)
 }
end;

window wintBRcex 'Выбор цеха', cyan;
browse tBRcex;
 table tBRcex;
 recMarker = pMarkercex{tBRcex.nrec}; // по умолчанию итак nrec юзается...
fields
 tBRcex.name  : [10],protect, nopickbutton;
 tBRcex.code  : [5], protect, nopickbutton;
end;
end;
windowevent wintBRcex ;
 cminit: {
  pMarkercex.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBRcex <> tsOK {
      _Try
      {
         SQL
           select distinct
               cex.nrec   as nrec
             , cex.name   as name
             , cex.kod as code
           From spmnplan
           join Katpodr cex on cex.Nrec = SpMnPlan.CANVAL3
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBRcex;
      }
      _Except
      else {
      }
    }
  if getfirst tBRcex = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBRcex, cmDefault)
 }
end;

window wintplanovik 'Выбор плановика производства';
browse tBRplanovik;
 table tBRplanovik;
 recMarker = pMarkerplanovik{tbrplanovik.nrec}; // по умолчанию итак nrec юзается...
fields
 tbrplanovik.name  :[10], protect, nopickbutton;
 tbrplanovik.code  :[5],  protect, nopickbutton;
end;
end;
windowevent wintplanovik;
 cminit: {
  pMarkerplanovik.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tbrplanovik <> tsOK {
      _Try
      {
         SQL
           select distinct
               spkau.nrec as nrec
             , spkau.name as name
             , spkau.code as code
           From spmnplan
           join katpodr cex on cex.Nrec = SpMnPlan.canval3
           join attrnam AN_cex on AN_cex.wtable = :(cokatpodr) and AN_cex.NAME = 'Плановик производства'
           join attrval AV_cex on AV_cex.wtable = AN_cex.wtable
                                and AV_cex.cRec = cex.nrec
                            and AV_cex.cAttrnam = AN_cex.nrec
           join spkau on spkau.nrec = AV_cex.vComp
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tbrplanovik;
      }
      _Except
      else {
      }
    }
  if getfirst tbrplanovik = tsOK {}
 }
 cmdefault: {
   closewindowex(wintplanovik, cmDefault)
 }
end;
window winSetParam 'Параметры отчета';
Screen scrSetParam;
  Fields
    _dateB      : NoProtect, {Font={BackColor=if(_dateB = date(0,0,0),ColorNeed,0)}};
    _dateE      : NoProtect, {Font={BackColor=if(_dateE = date(0,0,0),ColorNeed,0)}};
    _fmc        : Pickbutton, Protect;
    _fcex       : Pickbutton, Protect;
    _fplanovik  : Pickbutton, Protect;
    _LineReport : NoProtect;
  buttons
    cmOK,,,;
    cmCancel,,,;
<<'Внешняя потребность на основании плана снабжения'

Период с .@@@@@@@@@@ по .@@@@@@@@@@
   Фильтры
      `номенклатура`.@@@@@@@@@@@@@@@@@@@@@@
               `цех`.@@@@@@@@@@@@@@@@@@@@@@
       `исполнитель`.@@@@@@@@@@@@@@@@@@@@@@

 [.] - выгрузить "линейный" отчет`

  <.Сформировать.>        <. Отмена .>

>>
end;
end;
windowevent winSetParam ;
cminit:{
  _fmc      := '--все--';
  _fcex     := '--все--';
  _fplanovik := '--все--';

  fMarkermc      := InitMarker('need_domestic_production_fMarkermc', 8, 10, 100, true);
  clearmarker(fMarkermc);
  fMarkerCex     := InitMarker('need_domestic_production_fMarkerCex', 8, 10, 100, true);
  clearmarker(fMarkerCex);
  fMarkerplanovik := InitMarker('need_domestic_production_fMarkerplanovik', 8, 10, 100, true);
  clearmarker(fMarkerplanovik);

}
 cmOK: {
   if _dateB = date(0,0,0) or _dateE = date(0,0,0) {
     message('отчет не может быть сформирован по пустой дате',error);
     stop; abort; exit;
   }

   closewindowex(winSetParam, cmDefault)
 }
end;

function CreateExcel (FExcelName : string) : boolean;
{
  setvisualheader('Инициализация EXCEL');
    result := true;

    DeleteFile(FExcelName);

    if (not xlCreateExcel(FExcelName, true))
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit;
    }

    if (not xlIsExcelValid)
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit
    }
  var xlCount : word;
  xlCount := 0;
   Do
   {
    xlGetSheetsCount(xlCount);
    xlDeleteSheet(xlCount);
   } while xlCount > 1

    xlSetActiveSheet(1);
    xlSetSheetName(1, 'Потребность вненей поставки_'+UserName);

}
Procedure MyPrintMatrixToExcel(var nrow, nrowReal : longint);
{
 if nrow = 500 then
  {
   SetVisualheader('Формирование отчета'+
            ''#13'' + 'Выгружено строк ' + string(nrowReal));
   xlWritematrixToExcel(nrowReal,1+column0);
   xlclearMatrix;
   nrowReal := nrowReal + nrow-1;
   nrow := 1;
  }
}

function getnameColumnByDate(_date : date) : string; cacheable;{
// первые 4 месяца по дням, потом по неделям, а с 10 месяца по месяцам
  var _BegDateWeeks  : date = add_months(to_date(01, month(_dateB), year(_dateB)), 4);
  var _BegDateMonths : date = add_months(to_date(01, month(_dateB), year(_dateB)), 9);

  if _date < _BegDateWeeks {
    result := datetostr(_date,'DD.MM.YY');
    exit;
  }
  if _date < _BegDateMonths {
    result := 'КН'+String((CalcDaysBetweenDates(_BegDateWeeks, _date, false) -1) div 7  + 16);
    exit;
  }
 result := 'М'+String(months_between(_BegDateMonths, _date)+10);
}

procedure fill_tDateNameColumn;{
 delete all tDateColumnsNpp;
 delete all tDateNameColumn;

 if _dateB > _dateE exit;

 var _date : date = _dateB;
  do {
      insert tDateNameColumn set
           tDateNameColumn.DateColumn := _date
         , tDateNameColumn.NameColumn := getnameColumnByDate(_date)
       ;
        if getfirst tDateColumnsNpp where ((getnameColumnByDate(_date) == tDateColumnsNpp.NameColumn)) <> tsOK {
           insert tDateColumnsNpp set
             tDateColumnsNpp.npp        := recordsintable(tntDateColumnsNpp) + 7 + 1
           , tDateColumnsNpp.NameColumn := getnameColumnByDate(_date)
         ;
        }
    _date := Add_Day(_date,1);
  } while _date < _dateE
}

function getcolumnnpp(_date : date) : longint; cacheable; {
  result := 0;
  if getfirst tDateNameColumn where ((_date == tDateNameColumn.DateColumn)) = tsOK
  if getfirst tDateColumnsNpp where ((tDateNameColumn.NameColumn == tDateColumnsNpp.NameColumn)) = tsOK
  result := tDateColumnsNpp.npp;
}


function CheckMC(_cmc : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkermc) = 0 then exit;
  if not SearchMarker(fMarkermc, _cmc, mid) then result := false;
}

function CheckCex(_ccex : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkercex) = 0 then exit;
  if not SearchMarker(fMarkercex, _ccex, mid) then result := false;
}

function Checkplanovik(_cPlanovik : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkerplanovik) = 0 then exit;
  if not SearchMarker(fMarkerplanovik, _cplanovik, mid) then result := false;
}


Procedure PrintLineReport_Matrix; {
  var column_count : longint = 0;
  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'need_domestic_production_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 setvisualheader('Печать заголовка');

 column_count := 9 + recordsintable(tntDateColumnsNpp);
 xlCreateMatrix(500,column_count);

 var Nrow0, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;


 XlSetColumnWidth(1,1,1,1,1);
 Nrow++;
 Nrow0 := Nrow;
 xlStWriteToMatrix(nrow, 1,'Фильтр по номенклатуре:' + _fmc);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по цеху: ' + _fcex);
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по исполнителю: ' + _fplanovik);
 column := 1;
 xlStWriteToMatrix(nrow, column,'Номенклатура');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Вид продукции');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Модель');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Цех');
 XlSetColumnWidth(8,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 xlStWriteToMatrix(nrow+1, column,'Склад');
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow+1, column,'код исполнителя');
 XlSetColumnWidth(20,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column-1+column0,nrow,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'ЕИ');
 XlSetColumnWidth(7,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Потребность');
 xlMergeCells(nrow,column+column0,nrow,column_count+column0);
  Nrow++;
  _loop tDateColumnsNpp ordered by tDateColumnsNpp.npp {
      xlStWriteToMatrix(nrow, tDateColumnsNpp.npp,chr(39) + tDateColumnsNpp.NameColumn);
   }

  xlSetFontStyle(1,1,1,nrow,column_count+column0);
  xlAlignCells(xlCenter,nrow-1,1,nrow,column_count+column0);


  Nrow++;

 _loop SpMnPlan {

   if not CheckMC(katmc.nrec) continue;
   if not CheckCex(cex.nrec) continue;
   if getmarkercount(fMarkerplanovik) != 0 {// надо проверить фильтр
     if getfirst AN_cex <> tsOK continue;
     if getfirst AV_cex <> tsOK continue;
     if getfirst PlanovikProizv <> tsOK continue;
     if not Checkplanovik(PlanovikProizv.nrec) continue;
   }


   if not nextvisual {
      if VisualizationActive then stopvisual;
      xlKillExcel;
      exit;
    }

   column := 1;
   MyPrintMatrixToExcel(Nrow,NrowReal);
   xlStWriteToMatrix(nrow, column, chr(39) + KatMC.name);
   column++;
   xlStWriteToMatrix(nrow, column, chr(39) + KatParty.name); //if (GetAnyKau(cgAk, SpMnPlan.WKODGR1, SpMnPlan.CANVAL1), GivenAnName(cgAn), '')); // виды продукции
   column++;
   xlStWriteToMatrix(nrow, column, chr(39) + Model.name); //if (GetAnyKau(cgAk, SpMnPlan.WKODGR4, SpMnPlan.CANVAL4), GivenAnName(cgAn), '')); // модель
   column++;
   xlStWriteToMatrix(nrow, column, chr(39) + cex.name);
   column++;
   xlStWriteToMatrix(nrow, column, chr(39) + sklad.name);
   column++;
   if getfirst AN_cex = tsOK
     if getfirst AV_cex = tsOK
       if getfirst PlanovikProizv = tsOK {
         xlStWriteToMatrix(nrow, column, PlanovikProizv.name)
       }
   column++;
   xlStWriteToMatrix(nrow, column, KatOtpEd.abbr);

   _loop SpMnPl {
     if SpMnPl.STARTDATE >= _dateB and SpMnPl.STARTDATE <= _dateE then {
       xlDoWriteToMatrix(nrow, getcolumnnpp(SpMnPl.STARTDATE), ValSpMnP.KOL);
      }
    }

   Nrow++;
 }

  xlwraptext(1, 1, nrow+nrowreal-2, column_count + 1);
  setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, Nrow0, 1, nrow+nrowreal-2, column_count+column0);

 xlSetNumberFormat('# ##0,00',3,7,nrow+nrowreal-2, column_count+column0);

 xlWriteMatrixToExcel(NrowReal,1+column0);
 var _filemacros : string = GetStringParameter('Files','TmpFilesDirectory',0)+'need_domestic_production_Macros_freeze'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
   logstrtofile(_filemacros,'Sub FreezePanes()');
   logstrtofile(_filemacros,'  Range("C7").Select');
   logstrtofile(_filemacros,'  ActiveWindow.FreezePanes = True');
   logstrtofile(_filemacros,'End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('FreezePanes');

 xlKillExcel;
}

Procedure PrintReport_Matrix; {
  var column_count : longint = 0;
  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'need_domestic_production_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 setvisualheader('Печать заголовка');

 column_count := 7 + recordsintable(tntDateColumnsNpp);
 xlCreateMatrix(500,column_count);

 var Nrow0, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;

 Nrow++;
 column := 1;
 xlStWriteToMatrix(nrow, column,'Фильтр по номенклатуре: '+ _fmc);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 xlStWriteToMatrix(nrow, column,'Фильтр по цеху: ' + _fcex);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 xlStWriteToMatrix(nrow, column,'Фильтр по исполнителю: ' + _fplanovik);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 column := 1;
 XlSetColumnWidth(0,1,1,1,1);
 Nrow0 := Nrow;
 xlStWriteToMatrix(nrow, column,'Номенклатура');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Вид продукции');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Модель');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Цех');
 XlSetColumnWidth(8,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow +1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Склад');
 XlSetColumnWidth(20,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Код исполнителя');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'ЕИ');
 XlSetColumnWidth(7,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Потребность');
 xlMergeCells(nrow,column+column0,nrow,column_count+column0);
  Nrow++;
  _loop tDateColumnsNpp ordered by tDateColumnsNpp.npp {
      xlStWriteToMatrix(nrow, tDateColumnsNpp.npp,chr(39) + tDateColumnsNpp.NameColumn);
   }
  xlSetFontStyle(1,1,1,nrow,column_count+column0);
  xlAlignCells(xlCenter,nrow-1,1,nrow,column_count+column0);
  Nrow++;
#declare printrowvalues(tablevalues,filedwhere,tablewhere)
           _loop #tablevalues where (( #tablewhere.nrec == #tablevalues.#filedwhere)){
              xlDoWriteToMatrix(nrow, #tablevalues.columnnpp, #tablevalues.value);
           }
/*
 , tValueVidProduct
 , tValueOrgSklad
 , tValueMCVidProduct
 , tValueMCOrg

*/
#end
 setvisualheader('Печать отчета');
 _loop tMC {

     if not nextvisual {
      if VisualizationActive then stopvisual;
      xlKillExcel;
      exit;
    }


    _loop tCexSklad where ((tmc.nRec == tCexSklad.ctmc)) {
     MyPrintMatrixToExcel(Nrow,NrowReal);
     xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
     xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
     xlStWriteToMatrix(nrow, 4, chr(39) + tCexSklad.cexname);
     xlStWriteToMatrix(nrow, 5, chr(39) + tCexSklad.skladname);
     xlStWriteToMatrix(nrow, 6, chr(39) + tCexSklad.PlanovikProizv);
     xlStWriteToMatrix(nrow, 7, tmc.edizm);
     #printrowvalues(tValueCexSklad,ccexsklad,tCexSklad)
      nrow++ ;
    }
    var _count_vidproduct : byte =0;
    _loop tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) {
      _count_vidproduct++;
      if _count_vidproduct > 1 then break;
    }
   if getfirst tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) =tsOK {}

   MyPrintMatrixToExcel(Nrow,NrowReal);
   xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
   xlStWriteToMatrix(nrow, 2, 'Всего' + if(_count_vidproduct = 1,': '+tVidProduct.NameVid,''));
   xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
   xlStWriteToMatrix(nrow, 9, tmc.edizm);
   #printrowvalues(tValueMCVidProduct,ctmc,tMc)
   Nrow++;


   var _formula : string = '=';
   var _nrowFormula : longint = Nrow+NrowReal-2 ;
   xlSetBackColor(0BFBFBFh,_nrowFormula,1,_nrowFormula,column_count+column0);

   if _count_vidproduct > 1 {
       _loop tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) {
          _formula := _formula + ' +A'+ string(Nrow+NrowReal-1);
          MyPrintMatrixToExcel(Nrow,NrowReal);
          xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
          xlStWriteToMatrix(nrow, 2, tVidProduct.NameVid);
          xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
          xlStWriteToMatrix(nrow, 9, tmc.edizm);
          #printrowvalues(tValueVidProduct,cVidProduct,tVidProduct)
          nrow++;
         }
         if _formula != '=' then {
           _needmacros := true;
           xlSetCellFormula(_formula, _nrowFormula,1,_nrowFormula,1);
         }
    }


 }
 xlWriteMatrixToExcel(NrowReal,1+column0);

  xlwraptext(1, 1, nrow+nrowreal-2, 17);
  setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, Nrow0, 1, nrow+nrowreal-2, column_count+column0);

 xlSetNumberFormat('# ##0,00',3,7,nrow+nrowreal-2, column_count+column0);

 var _filemacros : string = GetStringParameter('Files','TmpFilesDirectory',0)+'need_domestic_production_Macros_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
 if _needmacros {
   logstrtofile(_filemacros,'Sub CreateStructure()');
   logstrtofile(_filemacros,'    ActiveSheet.Outline.AutomaticStyles = False');
   logstrtofile(_filemacros,'    Selection.AutoOutline');
   logstrtofile(_filemacros,'    ActiveSheet.Outline.ShowLevels RowLevels:=1');
   logstrtofile(_filemacros,' End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('CreateStructure');
 }
 _filemacros := GetStringParameter('Files','TmpFilesDirectory',0)+'need_domestic_production_Macros_freeze'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
   logstrtofile(_filemacros,'Sub FreezePanes()');
   logstrtofile(_filemacros,'  Range("C7").Select');
   logstrtofile(_filemacros,'  ActiveWindow.FreezePanes = True');
   logstrtofile(_filemacros,'End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('FreezePanes');

 xlKillExcel;
}


procedure fill_tReportValues; {
 var _kolvo : longint;
 _loop SpMnPlan {
   _kolvo++;
   if _kolvo mod 137 = 0 {
     setvisualheader('Сбор и группировка данных'+
     +''#13'' + 'Строк обработано ' + string(_kolvo));
   }
    if not nextvisual {
      if VisualizationActive then stopvisual;
      exit;
    }

   if not CheckMC(katmc.nrec) continue;
   if not CheckCex(cex.nrec) continue;
   if getmarkercount(fMarkerplanovik) != 0 {// надо проверить фильтр
     if getfirst AN_cex <> tsOK continue;
     if getfirst AV_cex <> tsOK continue;
     if getfirst PlanovikProizv <> tsOK continue;
     if not Checkplanovik(PlanovikProizv.nrec) continue;
   }
   if getfirst tMc where ((                 KatMC.nrec == tMc.cMc
             and if(isvalidall(tnModel),Model.nrec,0h) == tMc.cModel)) <> tsOK {
     insert tMc set
        tMc.cMc          := KatMC.nrec
      , tMc.cModel       := if(isvalidall(tnModel),Model.nrec,0h)
      , tMc.MCName       := KatMC.name
      , tMc.MCCode       := KatMC.barkod
      , tMc.ModelName    := if(isvalidall(tnModel),Model.name,'')
      , tMc.edizm        := katotped.abbr
     ;
   }

   if getfirst tVidProduct where ((                 tMc.nrec == tVidProduct.ctmc
             and if(isvalidall(tnKatParty),KatParty.nrec,0h) == tVidProduct.cVid)) <> tsOK {
     insert tVidProduct set
       tVidProduct.ctmc    := tMc.nrec
     , tVidProduct.cVid    := if(isvalidall(tnKatParty),KatParty.nrec,0h)
     , tVidProduct.NameVid := if(isvalidall(tnKatParty),KatParty.name,'')
    ;
   }


   if getfirst tCexSklad where ((tMc.nrec == tCexSklad.ctmc
            and if(isvalidall(tncex),cex.nrec,0h) == tCexSklad.ccex
            and if(isvalidall(tnsklad),sklad.nrec,0h) == tCexSklad.cSklad)) <> tsOK {
       insert tCexSklad set
          tCexSklad.ctmc           := tMc.nrec
        , tCexSklad.cSklad         := if(isvalidall(tnsklad),sklad.nrec,0h)
        , tCexSklad.SkladName      := if(isvalidall(tnsklad),sklad.name,'')
        , tCexSklad.ccex           := if(isvalidall(tncex),cex.nrec,0h)
        , tCexSklad.cexname        := if(isvalidall(tncex),cex.name,'')
        , tCexSklad.PlanovikProizv := if(isvalidall(tnPlanovikProizv),PlanovikProizv.name,'')
       ;
   }


#declare insertupdatevalues(maintable,wheretable,wherefield)
       if getfirst #maintable where ((#wheretable.nRec == #maintable.#wherefield and _columnNPP == #maintable.ColumnNPP)) <> tsOK {
         insert #maintable set
           #maintable.#wherefield := #wheretable.nRec
         , #maintable.ColumnNPP   := _columnNPP
        ;
       }
       update current #maintable set #maintable.value := #maintable.value + ValSpMnP.KOL;
#end
   _loop SpMnPl {
     var _columnNPP : longint = getcolumnnpp(SpMnPl.STARTDATE);
     if SpMnPl.STARTDATE >= _dateB and SpMnPl.STARTDATE <= _dateE then {

       #insertupdatevalues(tValueVidProduct,tVidProduct,cVidProduct)
       #insertupdatevalues(tValueCexSklad,tCexSklad,cCexSklad)
       #insertupdatevalues(tValueMCVidProduct,tMC,cTmc)
      }
    }
  }

}


procedure printreport(__cMnPlan : comp; _TypeReport : string = 'EXCEL'); {
 set _cMnPlan := __cMnPlan;
 if getfirst MnPlan <> tsOK exit;
 set _dateB := MNPLAN.startdate;
 set _dateE := MNPLAN.enddate;
 if RunWindowModal(winSetParam) != cmDefault exit;
 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Формирование отчета' , 1);

 fill_tDateNameColumn;

 if _TypeReport = 'EXCEL' then {
     if _LineReport = 1
     then PrintLineReport_Matrix
     else {
         fill_tReportValues;
         PrintReport_Matrix;
       }
   }
if VisualizationActive then stopvisual;
}




handleevent
cminit:{
}
cmOnVipUnload:{
  DoneMarker(fMarkermc,'');
  DoneMarker(fMarkerCex,'');
  DoneMarker(fMarkerplanovik,'');
}
cmpick:{
  case curfield of
  #_fmc      : {
      if runwindowmodal(wintBRMC) = cmDefault {
        pMarkerMC.ExportTo(fMarkermc);
        _fmc := 'Выбрано '+string(getmarkercount(fMarkermc));
      }
    }
  #_fcex     : {
      if runwindowmodal(wintBRcex) = cmDefault {
        pMarkerCex.ExportTo(fMarkerCex);
        _fcex := 'Выбрано '+string(getmarkercount(fMarkerCex));
      }

    }
  #_fplanovik : {
      if runwindowmodal(wintplanovik) = cmDefault {
        pMarkerplanovik.ExportTo(fMarkerplanovik);
        _fplanovik := 'Выбрано '+string(getmarkercount(fMarkerplanovik));
      }
    }
  end;
  rereadrecord;
}
cmdelonprotect:{
  case curfield of
  #_fmc      : {
      _fmc      := '--все--';
      clearmarker(fMarkermc);
    }
  #_fcex     : {
      _fcex     := '--все--';
      clearmarker(fMarkerCex);
    }
  #_fplanovik : {
      _fplanovik := '--все--';
      clearmarker(fMarkerplanovik);
    }
  end;
  rereadrecord;
}
end;
end.
