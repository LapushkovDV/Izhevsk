#include demand_report.vih
#component "M_MnPlan"
Interface demand_report 'отчет о внешней потребности на основании плана снабжения';

table struct tDateNameColumn (
    DateColumn : date
  , NameColumn : string
)
with index (
 ind0 = DateColumn
)
;
table struct tDateColumnsNpp (
   npp        : longint
 , NameColumn : string
)
with index (
   ind0 = npp
 , ind1 = NameColumn
)
;
table struct tMC (
    nRec         : comp
  , cMc          : comp
  , cModel       : comp
  , MCName      : string
  , MCCode      : string
  , ModelName   : string
  , kodPlanovika : string
  , edizm        : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = cMc + cModel
)
;

table struct tVidProduct (
   nRec    : comp
 , ctmc    : comp
 , cVid    : comp
 , NameVid : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctmc + cVid
)
;

table struct tOrgSklad (
   nRec      : comp
 , ctmcOrg   : comp
 , cSklad    : comp
 , SkladName : string
 , quota     : double
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctmcOrg + cSklad
)
;

table struct tMCOrg(
   nRec      : comp
 , ctmc      : comp
 , cOrg      : comp
 , OrgName   : string
 , OrgCode   : string
 , SkladName : string
 , quota     : double
 , cnt_OrgSklad : word
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctmc + cOrg
)
;

table struct tValueMCVidProduct (
   ctmc : comp
 , value       : double
 , ColumnNPP   : longint
)
with index (
    ind0 = ctmc + ColumnNPP
)
;

table struct tValueMCOrg (
   ctmcorg        : comp
 , value       : double
 , ColumnNPP   : longint
)
with index (
    ind0 = ctmcorg + ColumnNPP
)
;
table struct tValueVidProduct (
   cVidProduct : comp
 , value       : double
 , ColumnNPP   : longint
)
with index (
    ind0 = cVidProduct + ColumnNPP
)
;
table struct tValueOrgSklad (
   cOrgSklad : comp
 , value     : double
 , ColumnNPP : longint
)
with index (
    ind0 = cOrgSklad + ColumnNPP
)
;

table struct tBROrg (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;
table struct tBRMC (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;
table struct tkodplan (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;



create view
 var
   _cMnPlan : comp;
   _dateB
 , _dateE : date;
  _LineReport : byte;
  column0 : word = 1;
   mid
 , fMarkermc
 , fMarkerOrg
 , fMarkerkodplan    : longint;
   _fmc
 , _forg
 , _fkodplan : string;

  _needmacros : boolean = false;

   pMarkerMC: IMarker(marker) new;
   pMarkerOrg: IMarker(marker) new;
   pMarkerkodplan: IMarker(marker) new;

from
   MnPlan
 , SpMnPlan
 , SpMnPl
 , KatMC
 , ValSpMnP
 , spkau Model
 , KatOrg
 , KatParty
 , KatPodr

 , attrnam AN_MC
 , attrval AV_MC
 , spkau KodPlanPostavk

 , tDateColumnsNpp
 , tDateNameColumn
 , tMC
 , tVidProduct
 , tOrgSklad
 , tMCOrg
 , tValueVidProduct
 , tValueOrgSklad
 , tValueMCVidProduct
 , tValueMCOrg


 , tBROrg
 , tBRMC
 , tkodplan



where ((         _cMnPlan == MnPlan.Nrec
          and MnPlan.Nrec == SpMnPlan.cMnPlan
        and SpMnPlan.Nrec == SpMnPl.cSpMnPlan
          and SpMnPl.Nrec == ValSpMnP.cSpMnPl

        and SpMnPlan.cIzd == KatMC.Nrec
      and SpMnPlan.cOtpEd == KatOtpEd.Nrec

     and SpMnPlan.CANVAL1 == KatParty.nrec
     and SpMnPlan.CANVAL2 == KatOrg.nrec
     and SpMnPlan.CANVAL3 == KatPodr.nrec
     and SpMnPlan.CANVAL4 == Model.nrec

     and                  coKatMc == AN_MC.wtable
     and 'Код Плановика поставки' == AN_MC.NAME
     and             AN_MC.wtable == AV_MC.wtable
     and               katmc.nrec == AV_MC.cRec
     and               AN_MC.nrec == AV_MC.cAttrnam
     and              AV_MC.vComp == KodPlanPostavk.nrec
  ))
;

function CheckMC(_cmc : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkermc) = 0 then exit;
  if not SearchMarker(fMarkermc, _cmc, mid) then result := false;
}

function CheckOrg(_corg : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkerOrg) = 0 then exit;
  if not SearchMarker(fMarkerOrg, _corg, mid) then result := false;
}

function Checkkodplanovika(_ckodplan : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkerkodplan) = 0 then exit;
  if not SearchMarker(fMarkerkodplan, _ckodplan, mid) then result := false;
}

window wintBRMC 'Выбор номенклатуры', cyan;
browse tBRMC;
 table tBRMC;
 recMarker = pMarkerMC{tBRMC.nrec}; // по умолчанию итак nrec юзается...
fields
 tBRMC.name  : [10],protect, nopickbutton;
 tBRMC.code  : [5], protect, nopickbutton;
end;
end;
windowevent wintBRMC ;
 cminit: {
  pMarkerMC.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBRMC <> tsOK {
      _Try
      {
         SQL
           select distinct
               KatMC.nrec   as nrec
             , KatMC.name   as name
             , katmc.barkod as code
           From spmnplan
           join KatMC on KatMC.Nrec = SpMnPlan.cIzd
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBRMC;
      }
      _Except
      else
      {
      }

    }
  if getfirst tBRMC = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBRMC, cmDefault)
 }
end;

window wintBROrg 'Выбор поставщика';
browse tBROrg;
 table tBROrg;
 recMarker =pMarkerOrg{tBROrg.nrec}; // по умолчанию итак nrec юзается...
fields
 tBROrg.name  :[10], protect, nopickbutton;
 tBROrg.code  :[5],  protect, nopickbutton;
end;
end;
windowevent wintBROrg;
 cminit: {
  pMarkerOrg.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBROrg <> tsOK {
      _Try
      {
         SQL
           select distinct
               KatOrg.nrec as nrec
             , KatOrg.name as name
             , KatOrg.code as code
           From spmnplan
           join KatOrg on SpMnPlan.CANVAL2 = KatOrg.nrec
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBROrg;
      }
      _Except
      else
      {
      }

   }
  if getfirst tBROrg = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBROrg, cmDefault)
 }
end;

window wintkodplan 'Выбор плановика поставки';
browse tkodplan;
 table tkodplan;
 recMarker = pMarkerkodplan{tkodplan.nrec}; // по умолчанию итак nrec юзается...
fields
 tkodplan.name  :[10], protect, nopickbutton;
 tkodplan.code  :[5],  protect, nopickbutton;
end;
end;
windowevent wintkodplan;
 cminit: {
  pMarkerkodplan.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tkodplan <> tsOK {
      _Try
      {
         SQL
           select distinct
               spkau.nrec as nrec
             , spkau.name as name
             , spkau.code as code
           From spmnplan
           join KatMC on KatMC.Nrec = SpMnPlan.cIzd
           join attrnam AN_MC on AN_MC.wtable = :(coKatMc) and AN_MC.NAME = 'Код Плановика поставки'
           join attrval AV_MC on AV_MC.wtable = AN_MC.wtable
                               and AV_MC.cRec = katmc.nrec
                           and AV_MC.cAttrnam = AN_MC.nrec
           join spkau on spkau.nrec = AV_MC.vComp
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tkodplan;
      }
      _Except
      else {
      }
    }
  if getfirst tkodplan = tsOK {}
 }
 cmdefault: {
   closewindowex(wintkodplan, cmDefault)
 }
end;

window winSetParam 'Параметры отчета';
Screen scrSetParam;
  Fields
    _dateB    : NoProtect;
    _dateE    : NoProtect;
    _fmc      : Pickbutton, Protect;
    _forg     : Pickbutton, Protect;
    _fkodplan : Pickbutton, Protect;
    _LineReport : NoProtect;
  buttons
    cmOK,,,;
    cmCancel,,,;
<<'Внешняя потребность на основании плана снабжения'

Период с .@@@@@@@@@@ по .@@@@@@@@@@
   Фильтры
          `номенклатура`.@@@@@@@@@@@@@@@@@@@@@@
             `поставщик`.@@@@@@@@@@@@@@@@@@@@@@
     `плановик поставки`.@@@@@@@@@@@@@@@@@@@@@@

 [.] - выгрузить "линейный" отчет`

  <.Сформировать.>        <. Отмена .>

>>
end;
end;
windowevent winSetParam ;
cminit:{
  _fmc      := '--все--';
  _forg     := '--все--';
  _fkodplan := '--все--';

  fMarkermc      := InitMarker('demand_report_fMarkermc', 8, 10, 100, true);
  clearmarker(fMarkermc);
  fMarkerOrg     := InitMarker('demand_report_fMarkerOrg', 8, 10, 100, true);
  clearmarker(fMarkerOrg);
  fMarkerkodplan := InitMarker('demand_report_fMarkerkodplan', 8, 10, 100, true);
  clearmarker(fMarkerkodplan);

}
 cmOK: {
   closewindowex(winSetParam, cmDefault)
 }
end;

function CreateExcel (FExcelName : string) : boolean;
{
  setvisualheader('Инициализация EXCEL');
    result := true;

    DeleteFile(FExcelName);

    if (not xlCreateExcel(FExcelName, true))
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit;
    }

    if (not xlIsExcelValid)
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit
    }
  var xlCount : word;
  xlCount := 0;
   Do
   {
    xlGetSheetsCount(xlCount);
    xlDeleteSheet(xlCount);
   } while xlCount > 1

    xlSetActiveSheet(1);
    xlSetSheetName(1, 'Потребность вненей поставки_'+UserName);

}
Procedure MyPrintMatrixToExcel(var nrow, nrowReal : longint);
{
 if nrow = 500 then
  {
   SetVisualheader('Формирование отчета'+
            ''#13'' + 'Выгружено строк ' + string(nrowReal));
   xlWritematrixToExcel(nrowReal,1+column0);
   xlclearMatrix;
   nrowReal := nrowReal + nrow-1;
   nrow := 1;
  }
}

function getquota(_MC, _cKatOrg, _cKatPodr : comp) :double ;{
  #__UNUSED__(_MC)
  #__UNUSED__(_cKatOrg)
  #__UNUSED__(_cKatPodr)

  result := 100;
}

function getnameColumnByDate(_date : date) : string; cacheable;{
// первые 4 месяца по дням, потом по неделям, а с 10 месяца по месяцам
  var _BegDateWeeks  : date = add_months(to_date(01, month(_dateB), year(_dateB)), 4);
  var _BegDateMonths : date = add_months(to_date(01, month(_dateB), year(_dateB)), 9);

  if _date < _BegDateWeeks {
    result := datetostr(_date,'DD.MM.YY');
    exit;
  }
  if _date < _BegDateMonths {
    result := 'КН'+String((CalcDaysBetweenDates(_BegDateWeeks, _date, false) -1) div 7  + 16);
    exit;
  }
 result := 'М'+String(months_between(_BegDateMonths, _date)+10);
}

procedure fill_tDateNameColumn;{
 delete all tDateColumnsNpp;
 delete all tDateNameColumn;

 if _dateB > _dateE exit;

 var _date : date = _dateB;
  do {
      insert tDateNameColumn set
           tDateNameColumn.DateColumn := _date
         , tDateNameColumn.NameColumn := getnameColumnByDate(_date)
       ;
        if getfirst tDateColumnsNpp where ((getnameColumnByDate(_date) == tDateColumnsNpp.NameColumn)) <> tsOK {
           insert tDateColumnsNpp set
             tDateColumnsNpp.npp        := recordsintable(tntDateColumnsNpp) + 9 + 1
           , tDateColumnsNpp.NameColumn := getnameColumnByDate(_date)
         ;
        }
    _date := Add_Day(_date,1);
  } while _date < _dateE
}

function getcolumnnpp(_date : date) : longint; cacheable; {
  result := 0;
  if getfirst tDateNameColumn where ((_date == tDateNameColumn.DateColumn)) = tsOK
  if getfirst tDateColumnsNpp where ((tDateNameColumn.NameColumn == tDateColumnsNpp.NameColumn)) = tsOK
  result := tDateColumnsNpp.npp;
}

Procedure PrintLineReport_Matrix; {
  var column_count : longint = 0;
  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 setvisualheader('Печать заголовка');

 column_count := 9 + recordsintable(tntDateColumnsNpp);
 xlCreateMatrix(500,column_count);

 var Nrow0, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;


 XlSetColumnWidth(1,1,1,1,1);
 Nrow++;
 Nrow0 := Nrow;
 xlStWriteToMatrix(nrow, 1,'Фильтр по номенклатуре:' + _fmc);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по поставщику: ' + _forg);
  Nrow++;
 xlStWriteToMatrix(nrow, 1,'Фильтр по Плановику поставки: ' + _fkodplan);
 column := 1;
 xlStWriteToMatrix(nrow, column,'Номенклатура');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Вид продукции');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Модель');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Поставщик');
 XlSetColumnWidth(8,1,column+column0,1,column+column0);
 xlStWriteToMatrix(nrow+1, column,'Код');
 column++;
 xlStWriteToMatrix(nrow+1, column,'Наименование');
 XlSetColumnWidth(20,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column-1+column0,nrow,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Квота');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Склад внешней поставки');
 XlSetColumnWidth(15,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Код Плановика поставки');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'ЕИ');
 XlSetColumnWidth(7,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Потребность');
 xlMergeCells(nrow,column+column0,nrow,column_count+column0);
  Nrow++;
  _loop tDateColumnsNpp ordered by tDateColumnsNpp.npp {
      xlStWriteToMatrix(nrow, tDateColumnsNpp.npp,chr(39) + tDateColumnsNpp.NameColumn);
   }

  xlSetFontStyle(1,1,1,nrow,column_count+column0);
  xlAlignCells(xlCenter,nrow-1,1,nrow,column_count+column0);


  Nrow++;

 _loop SpMnPlan {

   if not CheckMC(katmc.nrec) continue;
   if not CheckOrg(katorg.nrec) continue;
   if getmarkercount(fMarkerkodplan) != 0 {// надо проверить фильтр
     if getfirst AN_MC <> tsOK continue;
     if getfirst AV_MC <> tsOK continue;
     if getfirst KodPlanPostavk <> tsOK continue;
     if not Checkkodplanovika(KodPlanPostavk.nrec) continue;
   }


   if not nextvisual {
      if VisualizationActive then stopvisual;
      xlKillExcel;
      exit;
    }

   column := 1;
   MyPrintMatrixToExcel(Nrow,NrowReal);
   xlStWriteToMatrix(nrow, column, chr(39) + KatMC.name);
   column++;
   xlStWriteToMatrix(nrow, column, KatParty.name); //if (GetAnyKau(cgAk, SpMnPlan.WKODGR1, SpMnPlan.CANVAL1), GivenAnName(cgAn), '')); // виды продукции
   column++;
   xlStWriteToMatrix(nrow, column, Model.name); //if (GetAnyKau(cgAk, SpMnPlan.WKODGR4, SpMnPlan.CANVAL4), GivenAnName(cgAn), '')); // модель
   column++;
   xlStWriteToMatrix(nrow, column, chr(39) + KatOrg.code);
   column++;
   xlStWriteToMatrix(nrow, column, KatOrg.name);
   column++;
   xlDoWriteToMatrix(nrow, column, getquota(KatMC.nrec, KatOrg.nrec, KatPodr.nrec));
   column++;
   xlStWriteToMatrix(nrow, column, KatPodr.name);
   column++;
   if getfirst AN_MC = tsOK
     if getfirst AV_MC = tsOK
       if getfirst KodPlanPostavk = tsOK {
         xlStWriteToMatrix(nrow, column, KodPlanPostavk.name)
       }
   column++;
   xlStWriteToMatrix(nrow, column, KatOtpEd.abbr);

   _loop SpMnPl {
     if SpMnPl.STARTDATE >= _dateB and SpMnPl.STARTDATE <= _dateE then {
       xlDoWriteToMatrix(nrow, getcolumnnpp(SpMnPl.STARTDATE), ValSpMnP.KOL);
      }
    }

   Nrow++;
 }

  xlwraptext(1, 1, nrow+nrowreal-2, column_count + 1);
  setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, Nrow0, 1, nrow+nrowreal-2, column_count+column0);

 xlSetNumberFormat('# ##0,00',3,7,nrow+nrowreal-2, column_count+column0);

 xlWriteMatrixToExcel(NrowReal,1+column0);
 var _filemacros : string = GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_Macros_freeze'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
   logstrtofile(_filemacros,'Sub FreezePanes()');
   logstrtofile(_filemacros,'  Range("C7").Select');
   logstrtofile(_filemacros,'  ActiveWindow.FreezePanes = True');
   logstrtofile(_filemacros,'End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('FreezePanes');

 xlKillExcel;
}


Procedure PrintReport_Matrix; {
  var column_count : longint = 0;
  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 setvisualheader('Печать заголовка');

 column_count := 9 + recordsintable(tntDateColumnsNpp);
 xlCreateMatrix(500,column_count);

 var Nrow0, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;

 Nrow++;
 column := 1;
 xlStWriteToMatrix(nrow, column,'Фильтр по номенклатуре: '+ _fmc);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 xlStWriteToMatrix(nrow, column,'Фильтр по поставщику: ' + _forg);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 xlStWriteToMatrix(nrow, column,'Фильтр по Плановику поставки: ' + _fkodplan);
 xlMergeCells(nrow,column+column0,nrow,column+column0+3);
  Nrow++;
 column := 1;
 XlSetColumnWidth(0,1,1,1,1);
 Nrow0 := Nrow;
 xlStWriteToMatrix(nrow, column,'Номенклатура');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Вид продукции');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Модель');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Поставщик');
 XlSetColumnWidth(8,1,column+column0,1,column+column0);
 xlStWriteToMatrix(nrow+1, column,'Код');
 column++;
 xlStWriteToMatrix(nrow+1, column,'Наименование');
 XlSetColumnWidth(20,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column-1+column0,nrow,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Квота');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Склад внешней поставки');
 XlSetColumnWidth(15,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Код Плановика поставки');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'ЕИ');
 XlSetColumnWidth(7,1,column+column0,1,column+column0);
 xlMergeCells(nrow,column+column0,nrow+1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Потребность');
 xlMergeCells(nrow,column+column0,nrow,column_count+column0);
  Nrow++;
  _loop tDateColumnsNpp ordered by tDateColumnsNpp.npp {
      xlStWriteToMatrix(nrow, tDateColumnsNpp.npp,chr(39) + tDateColumnsNpp.NameColumn);
   }
  xlSetFontStyle(1,1,1,nrow,column_count+column0);
  xlAlignCells(xlCenter,nrow-1,1,nrow,column_count+column0);
  Nrow++;
#declare printrowmcorgsklad(tablesklad)
           MyPrintMatrixToExcel(Nrow,NrowReal);
           xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
           xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
           xlStWriteToMatrix(nrow, 4, chr(39) +tmcorg.OrgCode);
           xlStWriteToMatrix(nrow, 5, chr(39) +tmcorg.OrgName);
           xlDoWriteToMatrix(nrow, 6, tmcorg.quota);
           xlStWriteToMatrix(nrow, 7, chr(39)+#tablesklad.SkladName);
           xlStWriteToMatrix(nrow, 8, chr(39)+tmc.kodPlanovika );
           xlStWriteToMatrix(nrow, 9, tmc.edizm);
#end
#declare printrowvalues(tablevalues,filedwhere,tablewhere)
           _loop #tablevalues where (( #tablewhere.nrec == #tablevalues.#filedwhere)){
              xlDoWriteToMatrix(nrow, #tablevalues.columnnpp, #tablevalues.value);
           }
/*
 , tValueVidProduct
 , tValueOrgSklad
 , tValueMCVidProduct
 , tValueMCOrg

*/
#end
 setvisualheader('Печать отчета');
 _loop tMC {

     if not nextvisual {
      if VisualizationActive then stopvisual;
      xlKillExcel;
      exit;
    }


    _loop tmcorg where ((tmc.nRec == tmcorg.ctmc)) {
     #printrowmcorgsklad(tmcorg)
     #printrowvalues(tValueMCOrg,ctmcorg,tmcorg)

      nrow++ ;
      var _formula : string = '=';
      var _nrowFormula : longint = Nrow+NrowReal-2;
      if tmcorg.cnt_OrgSklad > 1 then {
          _loop tOrgSklad where ((tmcorg.nrec == tOrgSklad.ctmcOrg)) {
            _formula := _formula + ' +A'+ string(Nrow+NrowReal-1);
            #printrowmcorgsklad(tOrgSklad)
            #printrowvalues(tValueOrgSklad,cOrgSklad,tOrgSklad)
            nrow++
          }
         if _formula != '=' then {
          _needmacros := true;
          xlSetCellFormula(_formula, _nrowFormula,1,_nrowFormula,1);
          xlSetBackColor(0F2F2F2h,_nrowFormula,1,_nrowFormula,column_count+column0);
         }
      }
    }
    var _count_vidproduct : byte =0;
    _loop tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) {
      _count_vidproduct++;
      if _count_vidproduct > 1 then break;
    }
   if getfirst tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) =tsOK {}

   MyPrintMatrixToExcel(Nrow,NrowReal);
   xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
   xlStWriteToMatrix(nrow, 2, 'Всего' + if(_count_vidproduct = 1,': '+tVidProduct.NameVid,''));
   xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
   xlStWriteToMatrix(nrow, 9, tmc.edizm);
   #printrowvalues(tValueMCVidProduct,ctmc,tMc)
   Nrow++;


   var _formula : string = '=';
   var _nrowFormula : longint = Nrow+NrowReal-2 ;
   xlSetBackColor(0BFBFBFh,_nrowFormula,1,_nrowFormula,column_count+column0);

   if _count_vidproduct > 1 {
       _loop tVidProduct where ((tmc.nRec == tVidProduct.ctmc)) {
          _formula := _formula + ' +A'+ string(Nrow+NrowReal-1);
          MyPrintMatrixToExcel(Nrow,NrowReal);
          xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
          xlStWriteToMatrix(nrow, 2, tVidProduct.NameVid);
          xlStWriteToMatrix(nrow, 3, chr(39) + tMC.ModelName);
          xlStWriteToMatrix(nrow, 9, tmc.edizm);
          #printrowvalues(tValueVidProduct,cVidProduct,tVidProduct)
          nrow++;
         }
         if _formula != '=' then {
           _needmacros := true;
           xlSetCellFormula(_formula, _nrowFormula,1,_nrowFormula,1);
         }
    }


 }
 xlWriteMatrixToExcel(NrowReal,1+column0);

  xlwraptext(1, 1, nrow+nrowreal-2, 17);
  setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, Nrow0, 1, nrow+nrowreal-2, column_count+column0);

 xlSetNumberFormat('# ##0,00',3,7,nrow+nrowreal-2, column_count+column0);

 var _filemacros : string = GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_Macros_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
 if _needmacros {
   logstrtofile(_filemacros,'Sub CreateStructure()');
   logstrtofile(_filemacros,'    ActiveSheet.Outline.AutomaticStyles = False');
   logstrtofile(_filemacros,'    Selection.AutoOutline');
   logstrtofile(_filemacros,'    ActiveSheet.Outline.ShowLevels RowLevels:=1');
   logstrtofile(_filemacros,' End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('CreateStructure');
 }
 _filemacros := GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_Macros_freeze'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
   logstrtofile(_filemacros,'Sub FreezePanes()');
   logstrtofile(_filemacros,'  Range("C7").Select');
   logstrtofile(_filemacros,'  ActiveWindow.FreezePanes = True');
   logstrtofile(_filemacros,'End Sub');
   xlImportModule(_filemacros);
   xlRunMacro('FreezePanes');

 xlKillExcel;
}

procedure fill_tReportValues; {
 var _kolvo : longint;
 _loop SpMnPlan {
   _kolvo++;
   if _kolvo mod 137 = 0 {
     setvisualheader('Сбор и группировка данных'+
     +''#13'' + 'Строк обработано ' + string(_kolvo));
   }
    if not nextvisual {
      if VisualizationActive then stopvisual;
      exit;
    }

   if not CheckMC(katmc.nrec) continue;
   if not CheckOrg(katorg.nrec) continue;
   if getmarkercount(fMarkerkodplan) != 0 {// надо проверить фильтр
     if getfirst AN_MC <> tsOK continue;
     if getfirst AV_MC <> tsOK continue;
     if getfirst KodPlanPostavk <> tsOK continue;
     if not Checkkodplanovika(KodPlanPostavk.nrec) continue;
   }


   if getfirst tMc where ((KatMC.nrec == tMc.cMc and if(isvalidall(tnModel),Model.nrec,0h) == tMc.cModel)) <> tsOK {
     if getfirst AN_MC = tsOK
       if getfirst AV_MC = tsOK
         if getfirst KodPlanPostavk = tsOK {
         }
     insert tMc set
        tMc.cMc          := KatMC.nrec
      , tMc.cModel       := if(isvalidall(tnModel),Model.nrec,0h)
      , tMc.MCName       := KatMC.name
      , tMc.MCCode       := KatMC.barkod
      , tMc.ModelName    := if(isvalidall(tnModel),Model.name,'')
      , tMc.kodPlanovika := if(isValidall(tnKodPlanPostavk),KodPlanPostavk.name,'')
      , tMc.edizm        := katotped.abbr
     ;
   }

   if getfirst tVidProduct where ((tMc.nrec == tVidProduct.ctmc and KatParty.nrec == tVidProduct.cVid)) <> tsOK {
     insert tVidProduct set
       tVidProduct.ctmc    := tMc.nrec
     , tVidProduct.cVid    := KatParty.nrec
     , tVidProduct.NameVid := KatParty.name
    ;
   }

   if getfirst tMCOrg where ((tMc.nrec == tMCOrg.ctmc  and KatOrg.nrec == tMCOrg.cOrg)) <> tsOK {
     insert tMCOrg set
         tMCOrg.ctmc      := tMc.nrec
       , tMCOrg.cOrg      := KatOrg.nrec
       , tMCOrg.OrgName   := KatOrg.name
       , tMCOrg.OrgCode   := KatOrg.code
       , tMCOrg.quota     := getquota(KatMC.nrec, KatOrg.nrec, KatPodr.nrec)
       , tMCOrg.cnt_OrgSklad := 0
      ;
    }

   if getfirst tOrgSklad where ((tMc.nrec == tOrgSklad.ctmcOrg and KatPodr.nrec == tOrgSklad.cSklad)) <> tsOK {
     insert tOrgSklad set
         tOrgSklad.ctmcOrg   := tMcOrg.nrec
       , tOrgSklad.cSklad    := KatPodr.nrec
       , tOrgSklad.SkladName := KatPodr.name
       , tOrgSklad.quota     := getquota(KatMC.nrec, KatOrg.nrec, KatPodr.nrec)
      ;
      update current tMcOrg set
         tMcOrg.cnt_OrgSklad := tMcOrg.cnt_OrgSklad + 1
       , tMcOrg.SkladName    := tMcOrg.SkladName + if(tMcOrg.SkladName = '','','/')+KatPodr.name
      ;
    }

#declare insertupdatevalues(maintable,wheretable,wherefield)
       if getfirst #maintable where ((#wheretable.nRec == #maintable.#wherefield and _columnNPP == #maintable.ColumnNPP)) <> tsOK {
         insert #maintable set
           #maintable.#wherefield := #wheretable.nRec
         , #maintable.ColumnNPP   := _columnNPP
        ;
       }
       update current #maintable set #maintable.value := #maintable.value + ValSpMnP.KOL;
#end
   _loop SpMnPl {
     var _columnNPP : longint = getcolumnnpp(SpMnPl.STARTDATE);
     if SpMnPl.STARTDATE >= _dateB and SpMnPl.STARTDATE <= _dateE then {

       #insertupdatevalues(tValueVidProduct,tVidProduct,cVidProduct)
       #insertupdatevalues(tValueOrgSklad,tOrgSklad,cOrgSklad)
       #insertupdatevalues(tValueMCVidProduct,tMC,cTmc)
       #insertupdatevalues(tValueMCOrg,tMCOrg,cTmcorg)

      }
    }
  }

}

procedure printreport(__cMnPlan : comp; _TypeReport : string = 'EXCEL'); {
 set _cMnPlan := __cMnPlan;
 if getfirst MnPlan <> tsOK exit;
 set _dateB := MNPLAN.startdate;
 set _dateE := MNPLAN.enddate;
 if RunWindowModal(winSetParam) != cmDefault exit;
 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Формирование отчета' , 1);

 fill_tDateNameColumn;

 if _TypeReport = 'EXCEL' then {
     if _LineReport = 1
     then PrintLineReport_Matrix
     else {
         fill_tReportValues;
         PrintReport_Matrix;
       }
   }
if VisualizationActive then stopvisual;
}


handleevent
cminit:{
}
cmOnVipUnload:{
  DoneMarker(fMarkermc,'');
  DoneMarker(fMarkerOrg,'');
  DoneMarker(fMarkerkodplan,'');
}
cmpick:{
  case curfield of
  #_fmc      : {
      if runwindowmodal(wintBRMC) = cmDefault {
        pMarkerMC.ExportTo(fMarkermc);
        _fmc := 'Выбрано '+string(getmarkercount(fMarkermc));
      }
    }
  #_forg     : {
      if runwindowmodal(wintBROrg) = cmDefault {
        pMarkerOrg.ExportTo(fMarkerOrg);
        _forg := 'Выбрано '+string(getmarkercount(fMarkerOrg));
      }

    }
  #_fkodplan : {
      if runwindowmodal(wintkodplan) = cmDefault {
        pMarkerkodplan.ExportTo(fMarkerkodplan);
        _fkodplan := 'Выбрано '+string(getmarkercount(fMarkerkodplan));
      }
    }
  end;
  rereadrecord;
}
cmdelonprotect:{
  case curfield of
  #_fmc      : {
      _fmc      := '--все--';
      clearmarker(fMarkermc);
    }
  #_forg     : {
      _forg     := '--все--';
      clearmarker(fMarkerOrg);
    }
  #_fkodplan : {
      _fkodplan := '--все--';
      clearmarker(fMarkerkodplan);
    }
  end;
  rereadrecord;
}
end;
end.
