#include interactive_report.vih

#component "M_MnPlan"
Interface interactive_report 'Интерактивный отчет по плану - рабочее место снабженца';


table struct tMcOrgPodr (
   cMC    : comp
 , cOrg   : comp
 , cPodr  : comp
// , cParty : comp
// , cModel : comp
)
with index (
 ind0 = cMC
)
;

table struct tMcOrgPodrClaim (
    cmc          : comp
  , corg         : comp
  , cpodr        : comp
  , ZakazNumber  : string
  , zakazDate    : date
  , KolZakaz     : double
  , KolZakazAvto : double
)
with index (
 ind0 = cmc + corg + ZakazNumber
)
;
table struct tColumn (
   cMC : comp
)
with index (
 ind0 = cMC
)
;
table struct tMcOrgPodrClaimAvto (
    cmc     : comp
  , corg    : comp
  , cpodr   : comp
  , zakazDate : date
  , ZakazNumber : string
  , ZakazNumberAvto : string
  , KolZakazAvto : double
)
with index (
 ind0 = cmc + corg + ZakazNumber
);

table struct tMcOrgPodrPlanKol (
    cmc      : comp
  , corg     : comp
  , cpodr    : comp
//  , plandate : date
  , value0   : double
  , value1   : double
  , value2   : double
  , value3   : double
  , value4   : double
  , value5   : double
  , value6   : double
  , value7   : double
  , value8   : double
  , value9   : double
  , value10  : double
  , value11  : double
  , value12  : double
  , value13  : double
  , value14  : double
  , value15  : double
  , value16  : double
  , value17  : double
  , value18  : double
  , value19  : double
  , value20  : double
/*
  , value21  : double
  , value22  : double
  , value23  : double
  , value24  : double
  , value25  : double
  , value26  : double
  , value27  : double
  , value28  : double
  , value29  : double
  , value30  : double
*/
)
with index (
 ind0 = cmc + corg
);
//function getplankol(_cmc, _corg, _cpodr : comp; _date : date) : double; forward;
create view
 var
   _cMnPlan : comp;
   _dBeg : date;
  _LineReport : byte;

  _needPodr : word = 0;

   mid
 , fMarkermc
 , fMarkerOrg
 , fMarkerkodplan    : longint;
   _fmc
 , _forg
 , _fkodplan : string;

  _needmacros : boolean = false;

   pMarkerMC: IMarker(marker) new;
   pMarkerOrg: IMarker(marker) new;
   pMarkerkodplan: IMarker(marker) new;
/*as select
  getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,0))  (fieldname = valueday0)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,1))  (fieldname = valueday1)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,2))  (fieldname = valueday2)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,3))  (fieldname = valueday3)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,4))  (fieldname = valueday4)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,5))  (fieldname = valueday5)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,6))  (fieldname = valueday6)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,7))  (fieldname = valueday7)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,8))  (fieldname = valueday8)
, getplankol(tMcOrgPodrPlanKol.cmc, tMcOrgPodrPlanKol.corg,tMcOrgPodrPlanKol.cpodr, add_day(_dBeg,9))  (fieldname = valueday9)
*/
from
   MnPlan
 , SpMnPlan
 , SpMnPl
 , KatMC
 , ValSpMnP
 , spkau Model
 , KatOrg
 , KatParty
 , KatPodr
 , KatPodr KatPodr_cllaim
 , attrnam AN_MC
 , attrval AV_MC
 , spkau KodPlanPostavk
 , normas
 , Marsh_SP
 , Marsh_SP Marsh_SP_Next


 , tMcOrgPodr
 , tMcOrgPodrClaim
 , tMcOrgPodr      tMcOrgPodr_1
 , tMcOrgPodrClaim tMcOrgPodrClaim_1
 , tMcOrgPodrClaimAvto
 , tMcOrgPodrClaimAvto tMcOrgPodrClaimAvto_1
 , tMcOrgPodrPlanKol
 , tMcOrgPodrPlanKol tMcOrgPodrPlanKol_1
 , tMcOrgPodrPlanKol tMcOrgPodrPlanKol_2


where ((         tMcOrgPodr.cMc   == KatMc.Nrec
           and  tMcOrgPodr.cOrg   == KatOrg.nrec
           and  tMcOrgPodr.cPodr  == katPodr.nrec
//           and  tMcOrgPodr.cParty == KatParty.nrec
//           and  tMcOrgPodr.cModel == Model.nrec
           and tMcOrgPodr.cmc   == tMcOrgPodrClaimAvto.cmc
           and tMcOrgPodr.corg  == tMcOrgPodrClaimAvto.corg


           and tMcOrgPodrClaimAvto.cmc         == tMcOrgPodrClaim.cmc
           and tMcOrgPodrClaimAvto.corg        == tMcOrgPodrClaim.corg
           and tMcOrgPodrClaimAvto.ZakazNumber == tMcOrgPodrClaim.ZakazNumber

           and tMcOrgPodrClaim.cpodr == KatPodr_cllaim.nrec

           and tMcOrgPodr.cMc  == tMcOrgPodrPlanKol.cmc
           and tMcOrgPodr.cOrg == tMcOrgPodrPlanKol.corg
      ))
bounds byPodr      tMcOrgPodr.cpodr == tMcOrgPodrClaimAvto.cpodr (noindex)
          and tMcOrgPodrClaimAvto.cpodr == tMcOrgPodrClaim.cpodr (noindex)
          and     tMcOrgPodr.cPodr  == tMcOrgPodrPlanKol.cpodr (noindex)
;

/*function getplankol(_cmc, _corg, _cpodr : comp; _date : date) : double;  cacheable; {
  result := 0;
  if getfirst  tMcOrgPodrPlanKol_2 where  ((_cmc == tMcOrgPodrPlanKol_2.cmc
                                      and  _corg == tMcOrgPodrPlanKol_2.corg
                                      and  _date == tMcOrgPodrPlanKol_2.plandate
                                          )) = tsOK
              and if(_needPodr = 0, true, tMcOrgPodrPlanKol_2.cpodr = _cpodr) {
      result := tMcOrgPodrPlanKol_2.planKol;
    }
}
*/
procedure filltmpTable; {
  if _dBeg = 0 then _dBeg := to_date(01,01,2024);
 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Он сказал поехали и махнул рукой' , 1);
 setvisualheader('Очистка временных таблиц');
 if getfirst tMcOrgPodr_1 <> tsOK {
    setvisualheader('Заполнение tMcOrgPodr');
      _Try
      {
         SQL
           select distinct
              SpMnPlan.cIzd    as cMC
             ,SpMnPlan.CANVAL2 as cOrg
             , case when 1 = :(_needPodr) then SpMnPlan.CANVAL3 else #comp(0) end as cPodr
//             ,SpMnPlan.CANVAL1 as cParty
//             ,SpMnPlan.CANVAL4 as cModel
           From spmnplan
          where SpMnPlan.cMnPlan = :(_cMnPlan)
          into tMcOrgPodr_1;
      }
      _Except
      else{
      }
 }
 //delete all tMcOrgPodr_1;
 delete all tMcOrgPodrClaim_1;
 delete all tMcOrgPodrClaimAvto_1;
 delete all tMcOrgPodrPlanKol_1;
 var dateBeg : date = _dBeg;
 var dateEnd : date = add_day(_dBeg,20);


  setvisualheader('Заполнение tMcOrgPodrClaim');
      _Try
      {
        sql
        select
            tspmnplan.cMc  as cmc
          , tspmnplan.corg as corg
          , tspmnplan.cPodr as cpodr
          , claim.name     as ZakazNumber
          , indent.dPlan   as zakazDate
          , sum(claim.kol) as KolZakaz
          , sum(SpObjAcc.kolcpos) as KolZakazAvto
        from (
         select distinct
                      SpMnPlan.cIzd    as cMC
                     ,SpMnPlan.CANVAL2 as cOrg
                     ,SpMnPlan.CANVAL3 as cPodr
                     ,SpMnPl.STARTDATE as startdate
                   From spmnplan
                     join spmnpl on spmnpl.cspmnplan = SpMnPlan.nrec
                                and SpMnPl.STARTDATE >= :(dateBeg)
                                and SpMnPl.STARTDATE <= :(dateEnd)

                  where SpMnPlan.cMnPlan = :(_cMnPlan)
        ) tspmnplan
        join katmc on katmc.nrec = tspmnplan.cmc
        join Indent on Indent.itis = 1
                and Indent.iam = 0
                and Indent.cOrder = tspmnplan.cPodr
                and Indent.cPerform = tspmnplan.corg
                and Indent.dPlan = tspmnplan.startdate
        join claim on Claim.cIndent = Indent.nrec
                and Claim.prmc = 1
                and Claim.cmcusl = tspmnplan.cmc
        left join SpObjAcc on SpObjAcc.typepos = 13
                          and SpObjAcc.typeHier = 0
                          and SpObjAcc.cPos = claim.nrec
        left join ObjAcct on ObjAcct.nrec = SpObjAcc.cObjAcct
                         and ObjAcct.TypeOwn = 112
        left join KatZak on KatZak.nrec = ObjAcct.cowner

        group by tspmnplan.cmc, indent.dPlan, claim.name, tspmnplan.corg, tspmnplan.cPodr
        into tMcOrgPodrClaim_1;
      }
      _Except
      else{
      }
     setvisualheader('Заполнение tMcOrgPodrClaimAvto');
      _Try
      {
          sql
          select
              tspmnplan.cMc   as cmc
            , tspmnplan.corg  as corg
            , tspmnplan.cPodr as cpodr
            , indent.dPlan    as zakazDate
            , claim.name      as ZakazNumber
            , KatZak.NomZak   as ZakazNumberAvto
            , sum(SpObjAcc.kolcpos) as KolZakazAvto
          from (
           select distinct
                        SpMnPlan.cIzd    as cMC
                       ,SpMnPlan.CANVAL2 as cOrg
                       ,SpMnPlan.CANVAL3 as cPodr
                       ,SpMnPl.STARTDATE as startdate
                     From spmnplan
                     join spmnpl on spmnpl.cspmnplan = SpMnPlan.nrec
                             and SpMnPl.STARTDATE >= :(dateBeg)
                             and SpMnPl.STARTDATE <= :(dateEnd)
                  where SpMnPlan.cMnPlan = :(_cMnPlan)
          ) tspmnplan
          join katmc on katmc.nrec = tspmnplan.cmc
          join Indent on Indent.itis = 1
                  and Indent.iam = 0
                  and Indent.cOrder = tspmnplan.cPodr
                  and Indent.cPerform = tspmnplan.corg
                and Indent.dPlan = tspmnplan.startdate
          join claim on Claim.cIndent = Indent.nrec
                  and Claim.prmc = 1
                  and Claim.cmcusl = tspmnplan.cmc
          join SpObjAcc on SpObjAcc.typepos = 13
                            and SpObjAcc.typeHier = 0
                            and SpObjAcc.cPos = claim.nrec
          join ObjAcct on ObjAcct.nrec = SpObjAcc.cObjAcct
                           and ObjAcct.TypeOwn = 112
          join KatZak on KatZak.nrec = ObjAcct.cowner
          group by tspmnplan.cmc, indent.dPlan, claim.name, tspmnplan.corg, tspmnplan.cPodr,KatZak.NomZak
        into tMcOrgPodrClaimAvto_1;
      }
      _Except
      else{
      }

  setvisualheader('Заполнение tMcOrgPodrPlanKol');

  var dateBeg1 : date = add_day(dateBeg,1);
#declare setprop(npp)
cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE#npp_Поле_#npp',cfpTitle,datetostr(dateBeg#npp,'DD.MM.YYYY'));
#end
  var dateBeg2 : date = add_day(dateBeg,2);
  var dateBeg3 : date = add_day(dateBeg,3);
  var dateBeg4 : date = add_day(dateBeg,4);
  var dateBeg5 : date = add_day(dateBeg,5);
  var dateBeg6 : date = add_day(dateBeg,6);
  var dateBeg7 : date = add_day(dateBeg,7);
  var dateBeg8 : date = add_day(dateBeg,8);
  var dateBeg9 : date = add_day(dateBeg,9);
  var dateBeg10 : date = add_day(dateBeg,10);
  var dateBeg11 : date = add_day(dateBeg,11);
  var dateBeg12 : date = add_day(dateBeg,12);
  var dateBeg13 : date = add_day(dateBeg,13);
  var dateBeg14 : date = add_day(dateBeg,14);
  var dateBeg15 : date = add_day(dateBeg,15);
  var dateBeg16 : date = add_day(dateBeg,16);
  var dateBeg17 : date = add_day(dateBeg,17);
  var dateBeg18 : date = add_day(dateBeg,18);
  var dateBeg19 : date = add_day(dateBeg,19);
  var dateBeg20 : date = add_day(dateBeg,20);
  var dateBeg21 : date = add_day(dateBeg,21);
  var dateBeg22 : date = add_day(dateBeg,22);
  var dateBeg23 : date = add_day(dateBeg,23);
  var dateBeg24 : date = add_day(dateBeg,24);
  var dateBeg25 : date = add_day(dateBeg,25);
  var dateBeg26 : date = add_day(dateBeg,26);
  var dateBeg27 : date = add_day(dateBeg,27);
  var dateBeg28 : date = add_day(dateBeg,28);
  var dateBeg29 : date = add_day(dateBeg,29);
  var dateBeg30 : date = add_day(dateBeg,30);
  #setprop(1)
  #setprop(2)
  #setprop(3)
  #setprop(4)
  #setprop(5)
  #setprop(6)
  #setprop(7)
  #setprop(8)
  #setprop(9)
  #setprop(10)
  #setprop(11)
  #setprop(12)
  #setprop(13)
  #setprop(14)
  #setprop(15)
  #setprop(16)
  #setprop(17)
  #setprop(18)
  #setprop(19)
  #setprop(20)
  #setprop(21)
  #setprop(22)
  #setprop(23)
  #setprop(24)
  #setprop(25)
  #setprop(26)
  #setprop(27)
  #setprop(28)
  #setprop(29)
  #setprop(30)
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE0_Поле_0',cfpTitle,datetostr(dateBeg,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE1_Поле_1',cfpTitle,datetostr(dateBeg1,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE2_Поле_2',cfpTitle,datetostr(dateBeg2,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE3_Поле_3',cfpTitle,datetostr(dateBeg3,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE4_Поле_4',cfpTitle,datetostr(dateBeg4,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE5_Поле_5',cfpTitle,datetostr(dateBeg5,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE6_Поле_6',cfpTitle,datetostr(dateBeg6,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE7_Поле_7',cfpTitle,datetostr(dateBeg7,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE8_Поле_8',cfpTitle,datetostr(dateBeg8,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE9_Поле_9',cfpTitle,datetostr(dateBeg9,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE10_Поле_10',cfpTitle,datetostr(dateBeg10,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE11_Поле_11',cfpTitle,datetostr(dateBeg11,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE12_Поле_12',cfpTitle,datetostr(dateBeg12,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE13_Поле_13',cfpTitle,datetostr(dateBeg13,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE14_Поле_14',cfpTitle,datetostr(dateBeg14,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE15_Поле_15',cfpTitle,datetostr(dateBeg15,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE16_Поле_16',cfpTitle,datetostr(dateBeg16,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE17_Поле_17',cfpTitle,datetostr(dateBeg17,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE18_Поле_18',cfpTitle,datetostr(dateBeg18,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE19_Поле_19',cfpTitle,datetostr(dateBeg19,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE20_Поле_20',cfpTitle,datetostr(dateBeg20,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE21_Поле_21',cfpTitle,datetostr(dateBeg21,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE22_Поле_22',cfpTitle,datetostr(dateBeg22,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE23_Поле_23',cfpTitle,datetostr(dateBeg23,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE24_Поле_24',cfpTitle,datetostr(dateBeg24,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE25_Поле_25',cfpTitle,datetostr(dateBeg25,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE26_Поле_26',cfpTitle,datetostr(dateBeg26,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE27_Поле_27',cfpTitle,datetostr(dateBeg27,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE28_Поле_28',cfpTitle,datetostr(dateBeg28,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE29_Поле_29',cfpTitle,datetostr(dateBeg29,'DD.MM.YY'));
  cfsSetProp('c_BRPLANVALUE_TMCORGPODRPLANKOL.VALUE30_Поле_30',cfpTitle,datetostr(dateBeg30,'DD.MM.YY'));

      _Try
      {
         sql
          select
              SpMnPlan.cIzd    as cmc
            , SpMnPlan.CANVAL2 as corg
            , SpMnPlan.CANVAL3 as cpodr
            , sum(case when SpMnPl.STARTDATE =:(dateBeg) then valspmnp.kol else 0 end) as Value0
            , sum(case when SpMnPl.STARTDATE =:(dateBeg1) then valspmnp.kol else 0 end) as Value1
            , sum(case when SpMnPl.STARTDATE =:(dateBeg2) then valspmnp.kol else 0 end) as Value2
            , sum(case when SpMnPl.STARTDATE =:(dateBeg3) then valspmnp.kol else 0 end) as Value3
            , sum(case when SpMnPl.STARTDATE =:(dateBeg4) then valspmnp.kol else 0 end) as Value4
            , sum(case when SpMnPl.STARTDATE =:(dateBeg5) then valspmnp.kol else 0 end) as Value5
            , sum(case when SpMnPl.STARTDATE =:(dateBeg6) then valspmnp.kol else 0 end) as Value6
            , sum(case when SpMnPl.STARTDATE =:(dateBeg7) then valspmnp.kol else 0 end) as Value7
            , sum(case when SpMnPl.STARTDATE =:(dateBeg8) then valspmnp.kol else 0 end) as Value8
            , sum(case when SpMnPl.STARTDATE =:(dateBeg9) then valspmnp.kol else 0 end) as Value9
            , sum(case when SpMnPl.STARTDATE =:(dateBeg10) then valspmnp.kol else 0 end) as Value10
            , sum(case when SpMnPl.STARTDATE =:(dateBeg11) then valspmnp.kol else 0 end) as Value11
            , sum(case when SpMnPl.STARTDATE =:(dateBeg12) then valspmnp.kol else 0 end) as Value12
            , sum(case when SpMnPl.STARTDATE =:(dateBeg13) then valspmnp.kol else 0 end) as Value13
            , sum(case when SpMnPl.STARTDATE =:(dateBeg14) then valspmnp.kol else 0 end) as Value14
            , sum(case when SpMnPl.STARTDATE =:(dateBeg15) then valspmnp.kol else 0 end) as Value15
            , sum(case when SpMnPl.STARTDATE =:(dateBeg16) then valspmnp.kol else 0 end) as Value16
            , sum(case when SpMnPl.STARTDATE =:(dateBeg17) then valspmnp.kol else 0 end) as Value17
            , sum(case when SpMnPl.STARTDATE =:(dateBeg18) then valspmnp.kol else 0 end) as Value18
            , sum(case when SpMnPl.STARTDATE =:(dateBeg19) then valspmnp.kol else 0 end) as Value19
            , sum(case when SpMnPl.STARTDATE =:(dateBeg20) then valspmnp.kol else 0 end) as Value20
/*
            , sum(case when SpMnPl.STARTDATE =:(dateBeg21) then valspmnp.kol else 0 end) as Value21
            , sum(case when SpMnPl.STARTDATE =:(dateBeg22) then valspmnp.kol else 0 end) as Value22
            , sum(case when SpMnPl.STARTDATE =:(dateBeg23) then valspmnp.kol else 0 end) as Value23
            , sum(case when SpMnPl.STARTDATE =:(dateBeg24) then valspmnp.kol else 0 end) as Value24
            , sum(case when SpMnPl.STARTDATE =:(dateBeg25) then valspmnp.kol else 0 end) as Value25
            , sum(case when SpMnPl.STARTDATE =:(dateBeg26) then valspmnp.kol else 0 end) as Value26
            , sum(case when SpMnPl.STARTDATE =:(dateBeg27) then valspmnp.kol else 0 end) as Value27
            , sum(case when SpMnPl.STARTDATE =:(dateBeg28) then valspmnp.kol else 0 end) as Value28
            , sum(case when SpMnPl.STARTDATE =:(dateBeg29) then valspmnp.kol else 0 end) as Value29
            , sum(case when SpMnPl.STARTDATE =:(dateBeg30) then valspmnp.kol else 0 end) as Value30
*/
            From spmnplan
             join spmnpl on spmnpl.cspmnplan = SpMnPlan.nrec
                             and SpMnPl.STARTDATE >= :(dateBeg)
                             and SpMnPl.STARTDATE <= :(dateEnd)
             join valspmnp on valspmnp.cspmnpl = spmnpl.nrec
           where SpMnPlan.cMnPlan = :(_cMnPlan)
          group by SpMnPlan.cIzd
            , SpMnPlan.CANVAL2, SpMnPlan.CANVAL3
        into tMcOrgPodrPlanKol_1;
      }
      _Except
      else{
      }

 if VisualizationActive then stopvisual;

 message('McOrgPodrClaim_1 ' +recordsintable(tntMcOrgPodrClaim_1)+ '| tMcOrgPodrClaimAvto_1 ' + recordsintable(tntMcOrgPodrClaimAvto_1)+ '| tMcOrgPodrPlanKol_1 '+recordsintable(tntMcOrgPodrPlanKol_1));
}

window winInteractiveReport 'Параметры отчета';
Screen scrInteractiveReport;
  show at (,,, 3);
  Fields
    _needPodr : NoProtect;
    _dBeg    : NoProtect, {Font={BackColor=if(_dBeg = date(0,0,0),ColorNeed,0)}};
    add_day(_dBeg,30) : skip;
<<'Внешняя потребность на основании плана снабжения'
  [.] -в разрезе подразделений`
  Период с .@@@@@@@@@@ по .@@@@@@@@@@
>>
end;
browse brtHead ('',,sci1Esc);
 show at(,4,30,10);
table tMcOrgPodr;
fields
  Katmc.barkod  'МЦ баркод' headerAlign = centered:protect,[4];
  Katmc.name    'МЦ наименование' headerAlign = centered:protect,[4];
  KatOrg.name   'Изготовитель'    headerAlign = centered:protect,[4];
  KatPodr.name  'Потребитель'     headerAlign = centered:protect,[4];
//  Model.name       'Модель'          headerAlign = centered:protect,[4];
end;

Browse brPlanValue ('',,sci1Esc);
Show at (31,4,,10);//  alwaysShowhScroll ;//excelColumns, ,manualHScroll
Table tMcOrgPodr;
Fields
  tMcOrgPodrPlanKol.value0 'Поле 0' :[8,2],Protect;  //,noAutoSize
  tMcOrgPodrPlanKol.value1 'Поле 1' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value2 'Поле 2' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value3 'Поле 3' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value4 'Поле 4' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value5 'Поле 5' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value6 'Поле 6' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value7 'Поле 7' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value8 'Поле 8' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value9 'Поле 9' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value10 'Поле 10' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value11 'Поле 11' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value12 'Поле 12' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value13 'Поле 13' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value14 'Поле 14' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value15 'Поле 15' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value16 'Поле 16' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value17 'Поле 17' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value18 'Поле 18' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value19 'Поле 19' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value20 'Поле 20' :[8,2],Protect; // ,noAutoSize
/*  tMcOrgPodrPlanKol.value21 'Поле 21' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value22 'Поле 22' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value23 'Поле 23' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value24 'Поле 24' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value25 'Поле 25' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value26 'Поле 26' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value27 'Поле 27' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value28 'Поле 28' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value29 'Поле 29' :[8,2],Protect; // ,noAutoSize
  tMcOrgPodrPlanKol.value30 'Поле 30' :[8,2],Protect; // ,noAutoSize
*/
end;// Browse brPremR#(wNum)


browse brtMcOrgPodrClaimAvto ('',,sci1Esc);
 show at(,11,30,);
table tMcOrgPodrClaimAvto;
fields
  tMcOrgPodrClaimAvto.zakazDate       'Грузовик заказ','дата' headerAlign = centered:protect,[4];
  tMcOrgPodrClaimAvto.ZakazNumberAvto 'Грузовик заказ','номер' headerAlign = centered:protect,[4];
  tMcOrgPodrClaimAvto.KolZakazAvto    'Грузовик заказ','кол-во'     headerAlign = centered:protect,[4];
end;

browse brtMcOrgPodrClaim ('',,sci1Esc);
 show at(31,11,,);
table tMcOrgPodrClaim;
fields
  tMcOrgPodrClaim.ZakazNumber 'Заказ','номер' headerAlign = centered:protect,[4];
  tMcOrgPodrClaim.zakazDate   'Заказ','дата'   headerAlign = centered:protect,[4];
  tMcOrgPodrClaim.KolZakaz    'Заказ','кол-во'     headerAlign = centered:protect,[4];
  KatPodr_cllaim.name         'Потребитель'     headerAlign = centered:protect,[4];
end;

end;
windowevent winInteractiveReport ;
cminit:{
  filltmpTable;
}
end;
/*
function getnameColumnByDate(_date : date) : string; cacheable;{
// первые 4 месяца по дням, потом по неделям, а с 10 месяца по месяцам
  var _BegDateWeeks  : date = add_months(to_date(01, month(_dBeg), year(_dateB)), 4);
  var _BegDateMonths : date = add_months(to_date(01, month(_dateB), year(_dateB)), 9);

  if _date < _BegDateWeeks {
    result := datetostr(_date,'DD.MM.YY');
    exit;
  }
  if _date < _BegDateMonths {
    result := 'КН'+String((CalcDaysBetweenDates(_BegDateWeeks, _date, false) -1) div 7  + 16);
    exit;
  }
 result := 'М'+String(months_between(_BegDateMonths, _date)+10);
}
*/
/*
procedure fill_tDateNameColumn;{
 delete all tDateColumnsNpp;
 delete all tDateNameColumn;

 if _dateB > _dateE exit;

 var _date : date = _dateB;
  do {
      insert tDateNameColumn set
           tDateNameColumn.DateColumn := _date
         , tDateNameColumn.NameColumn := getnameColumnByDate(_date)
       ;
        if getfirst tDateColumnsNpp where ((getnameColumnByDate(_date) == tDateColumnsNpp.NameColumn)) <> tsOK {
           insert tDateColumnsNpp set
             tDateColumnsNpp.npp        := recordsintable(tntDateColumnsNpp) + 9 + 1
           , tDateColumnsNpp.NameColumn := getnameColumnByDate(_date)
         ;
        }
    _date := Add_Day(_date,1);
  } while _date < _dateE
}

function getcolumnnpp(_date : date) : longint; cacheable; {
  result := 0;
  if getfirst tDateNameColumn where ((_date == tDateNameColumn.DateColumn)) = tsOK
  if getfirst tDateColumnsNpp where ((tDateNameColumn.NameColumn == tDateColumnsNpp.NameColumn)) = tsOK
  result := tDateColumnsNpp.npp;
}
*/

procedure run(__cMnPlan : comp); {
 set _cMnPlan := __cMnPlan;
 set _dBeg := mnplan.startdate;
 if getfirst MnPlan <> tsOK exit;
 if RunWindowModal(winInteractiveReport) != cmDefault exit;
 if VisualizationActive then stopvisual;
}


handleevent
cminit:{
}
cmOnVipUnload:{
  DoneMarker(fMarkermc,'');
  DoneMarker(fMarkerOrg,'');
  DoneMarker(fMarkerkodplan,'');
}
 cmcheckfield: {
   case curfield of
   #_needPodr : {
     popbounds(tbbyPodr);
      var _cmc : comp = 0h;
     if isvalidall(tntMcOrgPodr) then {
        _cmc := tMcOrgPodr.cmc;
      }
     filltmpTable;
     if _needPodr = 1 then addBounds(tbbyPodr);

     if getfirst tMcOrgPodr where ((_cmc == tMcOrgPodr.cmc)) = tsOK { }
     if getfirst tMcOrgPodrClaim = tsOK { }
     rereadrecord;
     rescanpanel(tntMcOrgPodr);
     rescanpanel(tntMcOrgPodrClaim);
   }
   #_dBeg : {
     popbounds(tbbyPodr);
      var _cmc : comp = 0h;
     if isvalidall(tntMcOrgPodr) then {
        _cmc := tMcOrgPodr.cmc;
      }
     filltmpTable;
     if _needPodr = 1 then addBounds(tbbyPodr);

     if getfirst tMcOrgPodr where ((_cmc == tMcOrgPodr.cmc)) = tsOK { }
     if getfirst tMcOrgPodrClaim = tsOK { }
     rereadrecord;
     rescanpanel(tntMcOrgPodr);
     rescanpanel(tntMcOrgPodrClaim);

   }
   end;
 }
/*
cmpick:{
  case curfield of
  #_fmc      : {
      if runwindowmodal(wintBRMC) = cmDefault {
        pMarkerMC.ExportTo(fMarkermc);
        _fmc := 'Выбрано '+string(getmarkercount(fMarkermc));
      }
    }
  #_forg     : {
      if runwindowmodal(wintBROrg) = cmDefault {
        pMarkerOrg.ExportTo(fMarkerOrg);
        _forg := 'Выбрано '+string(getmarkercount(fMarkerOrg));
      }

    }
  #_fkodplan : {
      if runwindowmodal(wintkodplan) = cmDefault {
        pMarkerkodplan.ExportTo(fMarkerkodplan);
        _fkodplan := 'Выбрано '+string(getmarkercount(fMarkerkodplan));
      }
    }
  end;
  rereadrecord;
}
cmdelonprotect:{
  case curfield of
  #_fmc      : {
      _fmc      := '--все--';
      clearmarker(fMarkermc);
    }
  #_forg     : {
      _forg     := '--все--';
      clearmarker(fMarkerOrg);
    }
  #_fkodplan : {
      _fkodplan := '--все--';
      clearmarker(fMarkerkodplan);
    }
  end;
  rereadrecord;
}
*/
end;
end.
