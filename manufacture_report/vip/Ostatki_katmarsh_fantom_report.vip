#include Query.vih
#include SaldoFuncs.vih
#include GetKau.vih            // Обьектный интерфес выбора КАУ


#component "M_MnPlan"
Interface Ostatki_katmarsh_report 'Отчет по наличию МЦ с учетом маршрутов';
const
  coAllSelect = '<<--ВСЕ-->>';
end;
table struct tMC (
   cMc      : comp
 , barkod   : string
 , mcname   : string
 , cPodr    : comp
 , podr     : string
 , kol      : double
 , kated    : string
)
with index (
   ind0 = cMc + cPodr
 , ind1 = barkod
)
;
table struct tMcforSaldo (
 cmc : comp
)
with index (
 ind0 = cmc
);
/*
table struct tMCwasPrint (
   cMc      : comp
 , cPodr    : comp
)
with index (
 ind0 = cMc + cPodr
)
;
*/
#include GetKau.var     // Переменная типа "Интерфеса выбора КАУ"
create view

var
    _fltDate : date;
    _fltMC
  , _fltPodr
  , __log : string;
    Nrow0
  , Nrow
  , column
  , nrowreal
  ,column0  : longint = 0;
  _serviceLog, _LongStringLog : tptr;

 as
 select
 tMc.cmc

from
   tMc
// , tMc tMc_print
 , tmpsaldo1
 , katmc
 , katpodr
 , kated
 //, tMCwasPrint
 , tMcforSaldo
 , pick
;

screen scrOstatki_katmarsh_report;
 fields
   _fltDate : noprotect;
   _fltMC   : protect, pickbutton;
   _fltPodr : protect, pickbutton;
  buttons
    cmOK,,,;
    cmCancel,,,;

<<'Отчет по наличию МЦ с учетом маршрутов'

     `Дата`.@@@@@@@@@@
      `ТМЦ`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    `Склад`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  <. Продолжить .>   <. Отмена .>
>>
end;
Function GenerateNewFile: string; {
 result := GetStringParameter('Files','OutputFilesDirectory',0)+ '\Ostatki_katmarsh_report_'+DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS-SSS');
 result := replace(result,'\\','\');
}
function getFileLog : string; {
  if __log = '' then __log  := GenerateNewFile+'.log';
  result := __log;
}
procedure disableLog; {
  HttpConnect_DestroyLongString(_serviceLog, _LongStringLog);
  HttpConnect_Free(_serviceLog);
}
procedure enableLog; {
   disableLog;

  _serviceLog    := HttpConnect_CreateEx('http://ya.ru', '', '', true);
  _LongStringLog := HttpConnect_CreateLongString(_serviceLog);
}

function GetLogFile : string; {

  var _log_OUT : string = GenerateNewFile+'.log';
  HttpConnect_SaveToFileEx(_serviceLog, _LongStringLog, _log_OUT, cpUTF8, false);
  result := _log_OUT;
}

Procedure MyLog(_str: string); {
//  LogStrToFile(GetLogFile_debug, DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': ' + _str);
  _str := DateToStr(cur_date,'YYYYMMDD')+'_'+timetostr(cur_time,'HHMMSS') + ': '+_str + ''#13'';
  HttpConnect_AddValueToLongString(_serviceLog, _str, _LongStringLog);
}

Procedure MysqlAddStr(var query_handle: tptr; add_query_str: string); {
   sqlAddStr(query_handle, add_query_str);
   MyLog('sql: ' + add_query_str);
} //Function MysqlAddStr(var query_handle: longInt; add_query_str: string): longInt;

procedure fill_tMc; {
   delete all tMC;
   delete all tMcforSaldo;
   var _tmpMarker, _i : longint = 0;
   var _tmpMarkerName : string;
   var _c : comp = 0h;

 if _fltMC <> coAllSelect {
       SqlDropTmpTable('TmpFltKatMC');
      if (sqlCreateTmpTable('TABLE TmpFltKatMC (NRec: COMP) WITH INDEX (TmpFltKatMC01 = NRec);', ctmNormal) != tsOk) {
        message('Ошибка создания временной "TmpFltKatMC" таблицы в СУБД', error);
        stop; abort; exit;
      }
      _tmpMarkerName :=   iGetKau.GetMarkerName(cgKau_KatMc);
      _tmpMarker := InitMarker(_tmpMarkerName, 8, 10, 100, true);
       _i := 0;
      while getmarker(_tmpMarker, _i, _c) {
        sqlExecDirect('insert into TmpFltKatMC (NRec) values (#comp('+string(_c)+'))');
        _i++;
      }
      DoneMarker(_tmpMarker, _tmpMarkerName);
   }

   if _fltPodr <> coAllSelect {
       SqlDropTmpTable('TmpFltKatPodr');
      if (sqlCreateTmpTable('TABLE TmpFltKatPodr (NRec: COMP) WITH INDEX (TmpFltKatPodr01 = NRec);', ctmNormal) != tsOk) {
        message('Ошибка создания временной "TmpFltKatPodr" таблицы в СУБД', error);
        stop; abort; exit;
      }
      _tmpMarkerName :=   iGetKau.GetMarkerName(cgKau_KatPodr);
      _tmpMarker := InitMarker(_tmpMarkerName, 8, 10, 100, true);
       _i := 0;
      while getmarker(_tmpMarker, _i, _c) {
         sqlExecDirect('insert into TmpFltKatPodr (NRec) values (#comp('+string(_c)+'))');
        _i++;
      }
      DoneMarker(_tmpMarker, _tmpMarkerName);
   }




  setvisualheader('Сбор данных по МК');

 var objQuery: iQuery;
  var _qryID   : tPtR;
  var oResultSet : IResultSet;

  sqlFreeStr(_qryID);
  _qryID := 0;

  MysqlAddStr(_qryID, '   select distinct         ');
  MysqlAddStr(_qryID, '//     mcKM.name           ');
  MysqlAddStr(_qryID, '//   , km.shifr            ');
  MysqlAddStr(_qryID, '//   , kmsp.NUM            ');
  MysqlAddStr(_qryID, '     mcsp.nrec as CMC             ');
  MysqlAddStr(_qryID, '   , coalesce(kp.nrec, #comp(0)) as CPODR');
  MysqlAddStr(_qryID, '  from katmc mcKM                 ');
  MysqlAddStr(_qryID, '  join katmarsh km on km.cobject = mcKM.nrec               ');
  MysqlAddStr(_qryID, '                  and km.tobject = 4                       ');
  MysqlAddStr(_qryID, '                  and (km.DTBEG <= #date('+datetostr(_fltDate,'DD,MM,YYYY')+'))      ');
  MysqlAddStr(_qryID, '                  and (km.DTEND >= #date('+datetostr(_fltDate,'DD,MM,YYYY')+') or km.DTEND = 0 )  ');
  MysqlAddStr(_qryID, '  join marsh_sp kmsp on kmsp.cmarsh = km.nrec and kmsp.tdep = 1         ');
  MysqlAddStr(_qryID, '  join normas norm on norm.tmaster = 11005                              ');
  MysqlAddStr(_qryID, '                and NORM.CMASTER = kmSP.NREC                            ');
  MysqlAddStr(_qryID, '                AND NORM.TRESOURCE = 4                                  ');
  MysqlAddStr(_qryID, '                AND NORM.RASX > 0                                       ');
  MysqlAddStr(_qryID, '                AND NORM.DNORMED > 0                                    ');
  MysqlAddStr(_qryID, '                and ( norm.DTBEG <= #date('+datetostr(_fltDate,'DD,MM,YYYY')+') )                 ');
  MysqlAddStr(_qryID, '                and (NORM.DTEND >= #date('+datetostr(_fltDate,'DD,MM,YYYY')+') or NORM.DTEND = 0 )');
  MysqlAddStr(_qryID, '  join katmc mcsp on mcsp.nrec = NORM.CRESOURCE                         ');
  MysqlAddStr(_qryID, '  outer apply ( select top 1                                            ');
  MysqlAddStr(_qryID, '                     kmsppodr.cdep                                      ');
  MysqlAddStr(_qryID, '                    ,kmsppodr.cmarsh                                    ');
  MysqlAddStr(_qryID, '              from marsh_sp kmsppodr                                    ');
  MysqlAddStr(_qryID, '              where  kmsppodr.tdep = 2                                  ');
  MysqlAddStr(_qryID, '              and kmsppodr.cmarsh = km.nrec                             ');
  MysqlAddStr(_qryID, '              order by kmsppodr.NUM                                     ');
  MysqlAddStr(_qryID, '            ) kmsppodr                                                  ');
  MysqlAddStr(_qryID, '  left join katpodr kp on kp.nrec = kmsppodr.cdep                       ');
  MysqlAddStr(_qryID, 'where mcKM.kind = 3                                                     ');
  if _fltMC <> coAllSelect {
    MysqlAddStr(_qryID, 'and mcsp.nrec in (select TmpFltKatMC.nrec from TmpFltKatMC) ');
  }
  if _fltPodr <> coAllSelect {
    MysqlAddStr(_qryID, 'and kp.nrec in (select TmpFltKatPodr.nrec from TmpFltKatPodr) ');
  }
//  MysqlAddStr(_qryID, '//and mcKM.name = '00001000902821_L'                                    ');
//  MysqlAddStr(_qryID, '//order by mcKM.name                                                    ');

  objQuery := queryManager.createQuery(_qryID);
  if (objQuery.execute.errorCode != tsOk) then {
    var _err : string = 'Ошибка проверки записей в запросе '+ objQuery.ErrorCode;
    message(_err, error);
    mylog(_err);
    sqlFreeStr(_qryID);
    Exit;
  }
  if VisualizationActive then setvisualheader('SQL передача запроса в объект');
 var _iRes : iResultSet = objQuery.getResultSet;
  if NullVipRef(_iRes) then {
       var _err : string = 'ОШИБКА ВЫПОЛНЕНИЯ ЗАПРОСА В БД';
       message(_err, error);
       mylog(_err);
       exit;
      }

   if _iRes.getFirst <>  tsOk {
     var _err : string = 'В результате запроса нет данных';
     //message(_err, error);
     mylog(_err);
     exit;
    }



   StartNewVisual(vtIndicatorVisual ,vfTimer,'Передача результатов запроса во временную таблицу', _iRes.count);
   do {
     nextvisual;
      clearbuffer(tntMC);
         tMC.cmc   := _iRes.row.val('CMC');
         tMC.cpodr := _iRes.row.val('CPODR');
      if tMC.cpodr = 0h then continue;
       insert current tMC;
     if getfirst fastfirstrow katmc where ((tMC.cmc == katmc.nrec)) = tsOK {
            tMC.barkod := katmc.barkod;
            tMC.mcname := katmc.name ;
       if getfirst fastfirstrow kated where ((katmc.cEd == kated.nrec)) = tsOK {
           tmc.kated := kated.name
       }
     }
     if getfirst fastfirstrow katpodr where ((tMC.cpodr == katpodr.nrec)) = tsOK {
          tMC.podr := katpodr.name
       }
       update current tMC;

        /*
         if getfirst tMcforSaldo where ((tMC.cmc == tMcforSaldo.cmc)) <> tsOK {
         insert tMcforSaldo set tMcforSaldo.cmc := tMC.cmc;
         }
      */
   } while _iRes.getNext = tsOk;
   if VisualizationActive then stopvisual;
if VisualizationActive then stopvisual;
}

procedure filltmpsaldo1; {

   var iSaldoFun : SaldoFuncs;
   var _tmpMarker, _i : longint = 0;
   var _tmpMarkerName : string;
   var _c : comp = 0h;

   if _fltMC <> coAllSelect {
      delete Pick where ((cgPick_MC == Pick.wList));
      _tmpMarkerName :=   iGetKau.GetMarkerName(cgKau_KatMc);
      _tmpMarker := InitMarker(_tmpMarkerName, 8, 10, 100, true);
       _i := 0;
      while getmarker(_tmpMarker, _i, _c)
      {
         Pick.wList := cgPick_MC;
         Pick.crec  := _c;
        Insert current Pick;
        _i++;
      }
      DoneMarker(_tmpMarker, _tmpMarkerName);
   }

   if _fltPodr <> coAllSelect {
      delete Pick where ((cgPick_Sklad == Pick.wList));
      _tmpMarkerName :=   iGetKau.GetMarkerName(cgKau_KatPodr);
      _tmpMarker := InitMarker(_tmpMarkerName, 8, 10, 100, true);
       _i := 0;
      while getmarker(_tmpMarker, _i, _c)
      {
         Pick.wList := cgPick_Sklad;
         Pick.crec  := _c;
        Insert current Pick;
        _i++;
      }
      DoneMarker(_tmpMarker, _tmpMarkerName);
   }

   iSaldoFun.Store_Run_New_Ex(
                            _fltDate,
                            true, //складские остатки
                            false, //производственные
                            False,
                            False,
                            if(_fltMC   <> coAllSelect , -2, 0h), //-2, //МЦ
                            if(_fltPodr <> coAllSelect , -2, 0h), //склад
                            0h, //МОЛ
                            0h, //группам партий и партиям
                            False, // выгружать остатки по МТР
                            0, 0,  // фильтр по ЦУ и по объекту
                            True,  // группировать по складам
                            True,  // группировать по МОЛ
                            True,  // группировать по партиям
                            False  // bIncZeroKol
                           );
        StartNewVisual(vtIndicatorVisual ,vfTimer,'Просмотр остатков',RecordsInTable(tnTmpSaldo1));
         _loop TmpSaldo1   {
             nextvisual;
              if getfirst tMC where ((TmpSaldo1.cMC == tMC.cMC
                                and TmpSaldo1.cPOdr == tMC.cPOdr
                               )) <> tsOK {
                  Insert tMC set
                   tMC.cMC   := TmpSaldo1.cMC
                 , tMC.cPOdr := TmpSaldo1.cPOdr
                 ;
                 if getfirst fastfirstrow katmc where ((tMC.cmc == katmc.nrec)) = tsOK {
                        tMC.barkod := katmc.barkod;
                        tMC.mcname := katmc.name;
                   if getfirst fastfirstrow kated where ((katmc.cEd == kated.nrec)) = tsOK {
                       tmc.kated := kated.name
                   }
                 }
                 if getfirst fastfirstrow katpodr where ((tMC.cpodr == katpodr.nrec)) = tsOK {
                      tMC.podr := katpodr.name
                   }
                   update current tMC;
               }
            update current tMC set tMC.kol := tMC.kol + TmpSaldo1.kol;
         }
  delete Pick where Pick.wList = cgPick_MC;
if VisualizationActive then stopvisual;
}

function CreateExcel (FExcelName : string) : boolean;
{
  setvisualheader('Инициализация EXCEL');
    result := true;

    DeleteFile(FExcelName);

    if (not xlCreateExcel(FExcelName, true))
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit;
    }

    if (not xlIsExcelValid)
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit
    }
  var xlCount : word;
  xlCount := 0;
   Do
   {
    xlGetSheetsCount(xlCount);
    xlDeleteSheet(xlCount);
   } while xlCount > 1

    xlSetActiveSheet(1);
    xlSetSheetName(1, 'Остатка на '+datetostr(_fltDate,'DD/MM/YYYY'));

}
Procedure MyPrintMatrixToExcel;
{
 if nrow = 500 then
  {
   SetVisualheader('Формирование отчета'+
            ''#13'' + 'Выгружено строк ' + string(nrowReal));
   xlWritematrixToExcel(nrowReal,1);
   xlclearMatrix;
   nrowReal := nrowReal + nrow ;
   nrow := 0;
  }
}
procedure printreport; {
 if not createexcel(GenerateNewFile + '.xlsx') then exit;
  xlCreateMatrix(500,10);
  nrowreal := 1;
   Nrow := column := 1;

   Nrow := 1;
   xlStWriteToMatrix(nrow, 1, ' Отчет по остаткам ТМЦ на ' + datetostr(_fltDate,'DD/MM/YYYY'));
   Nrow++;
   Nrow++;
   xlStWriteToMatrix(nrow, 1, 'Баркод');
   xlsetcolumnwidth(15,1,1,1,1);
   xlStWriteToMatrix(nrow, 2, 'Наименование');
   xlsetcolumnwidth(115,1,2,1,2);
   xlStWriteToMatrix(nrow, 3, 'Склад');
   xlStWriteToMatrix(nrow, 4, 'Кол-во');
   xlStWriteToMatrix(nrow, 5, 'ед.изм.');
 _loop tMc ordered by tMc.barkod {
//     mylog('_loop tKatMarshStruct mcName = ' + tKatMarshStruct.mcName);

   MyPrintMatrixToExcel;
   Nrow++;
   xlStWriteToMatrix(nrow, 1, chr(39) + tmc.barkod);
   xlStWriteToMatrix(nrow, 2, chr(39) + tmc.mcname);
   xlstWriteToMatrix(nrow, 3, chr(39) + tmc.podr);
   xldoWriteToMatrix(nrow, 4, tmc.kol);
   xlstWriteToMatrix(nrow, 5, chr(39) + tmc.kated);
 }

 xlWritematrixToExcel(nrowReal,1);
  setvisualheader('"Разлиновка" отчета');
  xlFrameCells(63, 2, 1, 1, 3, 1, nrow+nrowreal-1, 5);
  xlSetNumberFormat('@',1,2,nrow+nrowreal-1,3);
  xlSetNumberFormat('# ##0,00',1,4,nrow+nrowreal-1, 4);
  xlSaveWorkBook(1);
  xlKillExcel;

}


handleevent
cminit: {

   ReadMyDSK(_fltDate, #__InterfaceName__ + '_fltDate', true);
   set _fltMC := coAllSelect;
   set _fltPodr := coAllSelect;

  if _fltDate = to_date(0,0,0) then _fltDate := cur_date;
  set _fltDate := _fltDate;
}
cmOk : {
  StartNewVisual(vtRotateVisual ,vfTimer,'Сбор данных по МК',0);
  enableLog;
  fill_tMc;
  filltmpsaldo1;
  if getfirst tmc <> tsOK {
if VisualizationActive then stopvisual;
    message('По заданным фильтрам нет ТМЦ', error);
    stop; abort; exit;
   }
  printreport;
  getlogfile;
if VisualizationActive then stopvisual;
 closeinterface(-1);
}
cmpick: {
    case curfield of
     #_fltMC  : {
       var cKau : comp = 0h;
       set _fltMC := 'Выбрано ' + iGetKau.GetCodeKau(cgiPickMult, cgKau_KatMc, cKau);
     }
     #_fltPodr: {
       var ckau : comp = 0h;
       set _fltPodr := 'Выбрано ' + iGetKau.GetCodeKau(cgiPickMult, cgKau_KatPodr, cKau);
     }
    end;
    rereadrecord;
}
cmdelonprotect: {
    case curfield of
     #_fltMC  : {
       set _fltMC := coAllSelect;
     }
     #_fltPodr: {
       set _fltPodr := coAllSelect;
     }
    end;
    rereadrecord;
}
end;
end.
