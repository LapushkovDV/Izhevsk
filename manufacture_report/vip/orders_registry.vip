#include orders_registry.vih
#component "M_MnPlan"

Interface orders_registry 'Реестр заказов';

table struct tDateNameColumn (
    DateColumn : date
  , NameColumn : string
)
with index (
 ind0 = DateColumn
)
;
table struct tDateColumnsNpp (
   npp        : longint
 , NameColumn : string
)
with index (
   ind0 = npp
 , ind1 = NameColumn
)
;
table struct tMC (
    nRec      : comp
  , cMc       : comp
  , MCName    : string
  , MCCode    : string
  , cOrg      : comp
  , OrgName   : string
  , cSklad    : comp
  , SkladName : string
  , edizm     : string
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = cMc + cOrg + cSklad
)
;
table struct tMCClaim (
    nRec        : comp
  , cTmc        : comp
  , date_name   : string
  , ZakazNumber : string
  , claimCount  : double
)
with index (
    ind0 = nRec(Unique, Surrogate)
  , ind1 = ctMc + date_name + ZakazNumber
  , ind2 = date_name
)
;
table struct tMCClaimZakazAvto (
    cTmcClaim       : comp
  , ZakazNumberAvto : string
  , ZakazCount      : double
)
with index (
 ind0 = cTmcClaim + ZakazNumberAvto
)
;
table struct tBROrg (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;
table struct tBRMC (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;
table struct tkodplan (
   nrec : comp
 , name : string
 , code : string
)
with index (
 ind0 = nrec
)
;

create view
 var
   _cMnPlan : comp;
   _dateB
 , _dateE : date;
    mid
 , fMarkermc
 , fMarkerOrg
 , fMarkerkodplan    : longint;
   _fmc
 , _forg
 , _fkodplan : string;

   column0 : word = 0;

  _needmacros : boolean = false;

   pMarkerMC: IMarker(marker) new;
   pMarkerOrg: IMarker(marker) new;
   pMarkerkodplan: IMarker(marker) new;

from
   MnPlan
 , SpMnPlan
 , SpMnPl
 , KatMC
 , ValSpMnP
 , KatOrg
 , KatPodr
 , attrnam AN_MC
 , attrval AV_MC
 , spkau KodPlanPostavk
 , indent
 , claim
 , SpObjAcc
 , ObjAcct
 , KatZak

 , tDateColumnsNpp
 , tDateNameColumn
 , tMC

 , tBROrg
 , tBRMC
 , tkodplan
 , tMCClaim
 , tMCClaimZakazAvto

where ((         _cMnPlan == MnPlan.Nrec
          and MnPlan.Nrec == SpMnPlan.cMnPlan
        and SpMnPlan.Nrec == SpMnPl.cSpMnPlan
          and SpMnPl.Nrec == ValSpMnP.cSpMnPl

        and SpMnPlan.cIzd == KatMC.Nrec
      and SpMnPlan.cOtpEd == KatOtpEd.Nrec
     and SpMnPlan.CANVAL2 == KatOrg.nrec
     and SpMnPlan.CANVAL3 == KatPodr.nrec

     and                  coKatMc == AN_MC.wtable
     and 'Код Плановика поставки' == AN_MC.NAME
     and             AN_MC.wtable == AV_MC.wtable
     and               katmc.nrec == AV_MC.cRec
     and               AN_MC.nrec == AV_MC.cAttrnam
     and              AV_MC.vComp == KodPlanPostavk.nrec
  ))
;

function CheckMC(_cmc : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkermc) = 0 then exit;
  if not SearchMarker(fMarkermc, _cmc, mid) then result := false;
}

function CheckOrg(_corg : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkerOrg) = 0 then exit;
  if not SearchMarker(fMarkerOrg, _corg, mid) then result := false;
}

function Checkkodplanovika(_ckodplan : comp) : boolean; cacheable;{
  result := true;
  if getmarkercount(fMarkerkodplan) = 0 then exit;
  if not SearchMarker(fMarkerkodplan, _ckodplan, mid) then result := false;
}

window wintBRMC 'Выбор номенклатуры', cyan;
browse tBRMC;
 table tBRMC;
 recMarker = pMarkerMC{tBRMC.nrec}; // по умолчанию итак nrec юзается...
fields
 tBRMC.name  : [10],protect, nopickbutton;
 tBRMC.code  : [5], protect, nopickbutton;
end;
end;
windowevent wintBRMC ;
 cminit: {
  pMarkerMC.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBRMC <> tsOK {
      _Try
      {
         SQL
           select distinct
               KatMC.nrec   as nrec
             , KatMC.name   as name
             , katmc.barkod as code
           From spmnplan
           join KatMC on KatMC.Nrec = SpMnPlan.cIzd
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBRMC;
      }
      _Except
      else
      {
      }

    }
  if getfirst tBRMC = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBRMC, cmDefault)
 }
end;

window wintBROrg 'Выбор поставщика';
browse tBROrg;
 table tBROrg;
 recMarker =pMarkerOrg{tBROrg.nrec}; // по умолчанию итак nrec юзается...
fields
 tBROrg.name  :[10], protect, nopickbutton;
 tBROrg.code  :[5],  protect, nopickbutton;
end;
end;
windowevent wintBROrg;
 cminit: {
  pMarkerOrg.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tBROrg <> tsOK {
      _Try
      {
         SQL
           select distinct
               KatOrg.nrec as nrec
             , KatOrg.name as name
             , KatOrg.code as code
           From spmnplan
           join KatOrg on SpMnPlan.CANVAL2 = KatOrg.nrec
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tBROrg;
      }
      _Except
      else
      {
      }

   }
  if getfirst tBROrg = tsOK {}
 }
 cmdefault: {
   closewindowex(wintBROrg, cmDefault)
 }
end;

window wintkodplan 'Выбор плановика поставки';
browse tkodplan;
 table tkodplan;
 recMarker = pMarkerkodplan{tkodplan.nrec}; // по умолчанию итак nrec юзается...
fields
 tkodplan.name  :[10], protect, nopickbutton;
 tkodplan.code  :[5],  protect, nopickbutton;
end;
end;
windowevent wintkodplan;
 cminit: {
  pMarkerkodplan.Caption   := ('Отмечено [%d] записей.'); // для заголовка
  if getfirst tkodplan <> tsOK {
      _Try
      {
         SQL
           select distinct
               spkau.nrec as nrec
             , spkau.name as name
             , spkau.code as code
           From spmnplan
           join KatMC on KatMC.Nrec = SpMnPlan.cIzd
           join attrnam AN_MC on AN_MC.wtable = :(coKatMc) and AN_MC.NAME = 'Код Плановика поставки'
           join attrval AV_MC on AV_MC.wtable = AN_MC.wtable
                               and AV_MC.cRec = katmc.nrec
                           and AV_MC.cAttrnam = AN_MC.nrec
           join spkau on spkau.nrec = AV_MC.vComp
         where SpMnPlan.cMnPlan = :(_cMnPlan)
         into tkodplan;
      }
      _Except
      else {
      }
    }
  if getfirst tkodplan = tsOK {}
 }
 cmdefault: {
   closewindowex(wintkodplan, cmDefault)
 }
end;

window winSetParam 'Параметры отчета';
Screen scrSetParam;
  Fields
    _dateB    : NoProtect, {Font={BackColor=if(_dateB = date(0,0,0),ColorNeed,0)}};
    _dateE    : NoProtect, {Font={BackColor=if(_dateE = date(0,0,0),ColorNeed,0)}};
    _fmc      : Pickbutton, Protect;
    _forg     : Pickbutton, Protect;
    _fkodplan : Pickbutton, Protect;
  buttons
    cmOK,,,;
    cmCancel,,,;
<<'Внешняя потребность на основании плана снабжения'

Период с .@@@@@@@@@@ по .@@@@@@@@@@
   Фильтры
          `номенклатура`.@@@@@@@@@@@@@@@@@@@@@@
             `поставщик`.@@@@@@@@@@@@@@@@@@@@@@
     `плановик поставки`.@@@@@@@@@@@@@@@@@@@@@@

  <.Сформировать.>        <. Отмена .>

>>
end;
end;
windowevent winSetParam ;
cminit:{
  _fmc      := '--все--';
  _forg     := '--все--';
  _fkodplan := '--все--';

  fMarkermc      := InitMarker('demand_report_fMarkermc', 8, 10, 100, true);
  clearmarker(fMarkermc);
  fMarkerOrg     := InitMarker('demand_report_fMarkerOrg', 8, 10, 100, true);
  clearmarker(fMarkerOrg);
  fMarkerkodplan := InitMarker('demand_report_fMarkerkodplan', 8, 10, 100, true);
  clearmarker(fMarkerkodplan);

}
 cmOK: {
   if _dateB = date(0,0,0) or _dateE = date(0,0,0) {
     message('отчет не может быть сформирован по пустой дате',error);
     stop; abort; exit;
   }
   closewindowex(winSetParam, cmDefault)
 }
end;

function CreateExcel (FExcelName : string) : boolean;
{
  setvisualheader('Инициализация EXCEL');
    result := true;

    DeleteFile(FExcelName);

    if (not xlCreateExcel(FExcelName, true))
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit;
    }

    if (not xlIsExcelValid)
    {
      message('ОШИБКА! Не удалось инициализировать сессию Excel', Error);
      xlKillExcel;
      result := false;
      exit
    }
  var xlCount : word;
  xlCount := 0;
   Do
   {
    xlGetSheetsCount(xlCount);
    xlDeleteSheet(xlCount);
   } while xlCount > 1

    xlSetActiveSheet(1);
    xlSetSheetName(1, 'Потребность вненей поставки_'+UserName);

}
Procedure MyPrintMatrixToExcel(var nrow, nrowReal : longint);
{
 if nrow = 500 then
  {
   SetVisualheader('Формирование отчета'+
            ''#13'' + 'Выгружено строк ' + string(nrowReal));
   xlWritematrixToExcel(nrowReal,1+column0);
   xlclearMatrix;
   nrowReal := nrowReal + nrow-1;
   nrow := 1;
  }
}

function getnameColumnByDate(_date : date) : string; cacheable;{
// первые 4 месяца по дням, потом по неделям, а с 10 месяца по месяцам
  var _BegDateWeeks  : date = add_months(to_date(01, month(_dateB), year(_dateB)), 4);
  var _BegDateMonths : date = add_months(to_date(01, month(_dateB), year(_dateB)), 9);

  if _date < _BegDateWeeks {
    result := datetostr(_date,'YY.MM.DD');
    exit;
  }
  if _date < _BegDateMonths {
    result := 'КН'+String((CalcDaysBetweenDates(_BegDateWeeks, _date, false) -1) div 7  + 16);
    exit;
  }
 result := 'М'+String(months_between(_BegDateMonths, _date)+10);
}

procedure fill_tDateNameColumn;{
 delete all tDateColumnsNpp;
 delete all tDateNameColumn;

 if _dateB > _dateE exit;

 var _date : date = _dateB;
  do {
      insert tDateNameColumn set
           tDateNameColumn.DateColumn := _date
         , tDateNameColumn.NameColumn := getnameColumnByDate(_date)
       ;
        if getfirst tDateColumnsNpp where ((getnameColumnByDate(_date) == tDateColumnsNpp.NameColumn)) <> tsOK {
           insert tDateColumnsNpp set
             tDateColumnsNpp.npp        := recordsintable(tntDateColumnsNpp) + 9 + 1
           , tDateColumnsNpp.NameColumn := getnameColumnByDate(_date)
         ;
        }
    _date := Add_Day(_date,1);
  } while _date < _dateE
}

function getcolumnnpp(_date : date) : longint; cacheable; {
  result := 0;
  if getfirst tDateNameColumn where ((_date == tDateNameColumn.DateColumn)) = tsOK
  if getfirst tDateColumnsNpp where ((tDateNameColumn.NameColumn == tDateColumnsNpp.NameColumn)) = tsOK
  result := tDateColumnsNpp.npp;
}


Procedure PrintReport_Matrix; {
  var column_count : longint = 0;
  if not CreateExcel(GetStringParameter('Files','TmpFilesDirectory',0)+'OrdersRegistry_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.xlsx')
    then {Stop; Abort; exit;}


 setvisualheader('Печать заголовка');

 column_count := 8;
 xlCreateMatrix(500,column_count);

 var Nrow0, Nrow, column, nrowreal : longint;
 nrowreal := 1;
 Nrow := column := 1;
 column := 1;
 XlSetColumnWidth(0,1,1,1,1);
 Nrow0 := Nrow;
 xlStWriteToMatrix(nrow, column,'Номенклатура');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Код поставщика');
 XlSetColumnWidth(30,1,column+column0,1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Склад внешней поставки');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'ЕИ');
 column++;
 XlSetColumnWidth(8,1,column+column0,1,column+column0);
 xlStWriteToMatrix(nrow, column,'Дата');
 column++;
 xlStWriteToMatrix(nrow, column,'Номер заказа');
 XlSetColumnWidth(20,1,column+column0,1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Заказ на автотранспорт');
 XlSetColumnWidth(10,1,column+column0,1,column+column0);
 column++;
 xlStWriteToMatrix(nrow, column,'Количество');
 XlSetColumnWidth(15,1,column+column0,1,column+column0);
 xlSetFontStyle(1,1,1,nrow,column_count+column0);
 xlAlignCells(xlCenter,nrow-1,1,nrow,column_count+column0);
 Nrow++;
 setvisualheader('Печать отчета');
 _loop tMCClaim ordered by tMCClaim.date_name {

   if getfirst tMC where ((tMCClaim.ctmc == tmc.nrec)) = tsOK {}

     if not nextvisual {
      if VisualizationActive then stopvisual;
      xlKillExcel;
      exit;
    }

    if tmcclaim.claimCount <> 0 then {  //  если не все распределено или "лишкаря" распределили
       MyPrintMatrixToExcel(Nrow,NrowReal);
       xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
       xlStWriteToMatrix(nrow, 2, chr(39) + tMC.OrgName);
       xlStWriteToMatrix(nrow, 3, chr(39) + tMC.SkladName);
       xlStWriteToMatrix(nrow, 4, tmc.edizm);
       xlStWriteToMatrix(nrow, 5, tmcclaim.date_name);
       xlStWriteToMatrix(nrow, 6, chr(39) + tmcclaim.ZakazNumber);
       xlStWriteToMatrix(nrow, 7, '');
       xldoWriteToMatrix(nrow, 8, tmcclaim.claimCount);
       Nrow++;
    }

   _loop tMCClaimZakazAvto where ((tMCClaim.nrec == tMCClaimZakazAvto.cTmcClaim)) {
       MyPrintMatrixToExcel(Nrow,NrowReal);
       xlStWriteToMatrix(nrow, 1, chr(39) + tMC.MCCode);
       xlStWriteToMatrix(nrow, 2, chr(39) + tMC.OrgName);
       xlStWriteToMatrix(nrow, 3, chr(39) + tMC.SkladName);
       xlStWriteToMatrix(nrow, 4, tmc.edizm);
       xlStWriteToMatrix(nrow, 5, tmcclaim.date_name);
       xlStWriteToMatrix(nrow, 6, chr(39) + tmcclaim.ZakazNumber);
       xlStWriteToMatrix(nrow, 7, chr(39) + tMCClaimZakazAvto.ZakazNumberAvto);
       xlDoWriteToMatrix(nrow, 8, tMCClaimZakazAvto.ZakazCount);
       Nrow++;
     }
 }

 xlWriteMatrixToExcel(NrowReal,1+column0);

 xlwraptext(1, 1, nrow+nrowreal-2, 17);
 setvisualheader('"Разлиновка" отчета');
 xlFrameCells(63, 2, 1, 1, Nrow0, 1, nrow+nrowreal-2, column_count+column0);

 xlSetNumberFormat('# ##0,00',3,8,nrow+nrowreal-2, column_count+column0);
// message('column+column0='+column+column0);
// xlSetNumberFormat('# ##0',3,_column_qoute,nrow+nrowreal-2, _column_qoute);

 var _filemacros : string = GetStringParameter('Files','TmpFilesDirectory',0)+'DemandReport_Macros_'+UserName + '_'+datetostr(_dateB, 'YYYYMMDD') + '-'+datetostr(_dateE, 'YYYYMMDD')+'_'+TimeToStr(Cur_Time,'HHMMSS')+'.bas';
   logstrtofile(_filemacros,shortstrtowin('Sub CreatePivot()'));
   logstrtofile(_filemacros,shortstrtowin('      Columns("A:H").Select'));
   logstrtofile(_filemacros,shortstrtowin('      Range("H1").Activate '));
   logstrtofile(_filemacros,shortstrtowin('      Sheets.Add           '));
   logstrtofile(_filemacros,shortstrtowin('      ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:= _'));
   logstrtofile(_filemacros,shortstrtowin('          "Лист1!R1C1:R1048576C8", Version:=6).CreatePivotTable TableDestination:= _'));
   logstrtofile(_filemacros,shortstrtowin('          "Лист2!R3C1", TableName:="Сводная таблица1", DefaultVersion:=6            '));
   logstrtofile(_filemacros,shortstrtowin('      Sheets("Лист2").Select                                                        '));
   logstrtofile(_filemacros,shortstrtowin('      Cells(3, 1).Select                                                            '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields( _               '));
   logstrtofile(_filemacros,shortstrtowin('          "Заказ на автотранспорт")                                                 '));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlRowField                                                 '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 1                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields("Номер заказа")  '));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlRowField                                                 '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 2                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields("Дата")          '));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlColumnField                                              '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 1                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      ActiveSheet.PivotTables("Сводная таблица1").AddDataField ActiveSheet. _       '));
   logstrtofile(_filemacros,shortstrtowin('          PivotTables("Сводная таблица1").PivotFields("Количество"), _              '));
   logstrtofile(_filemacros,shortstrtowin('          "Количество по полю Количество", xlCount                                  '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields( _               '));
   logstrtofile(_filemacros,shortstrtowin('          "Количество по полю Количество")                                          '));
   logstrtofile(_filemacros,shortstrtowin('          .Caption = "Сумма по полю Количество"                                     '));
   logstrtofile(_filemacros,shortstrtowin('          .Function = xlSum                                                         '));
   logstrtofile(_filemacros,shortstrtowin('          .NumberFormat = "# ##0"                                                   '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields("Номенклатура")  '));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlPageField                                                '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 1                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields("Код поставщика")'));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlPageField                                                '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 1                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      With ActiveSheet.PivotTables("Сводная таблица1").PivotFields( _               '));
   logstrtofile(_filemacros,shortstrtowin('          "Склад внешней поставки")                                                 '));
   logstrtofile(_filemacros,shortstrtowin('          .Orientation = xlPageField                                                '));
   logstrtofile(_filemacros,shortstrtowin('          .Position = 1                                                             '));
   logstrtofile(_filemacros,shortstrtowin('      End With                                                                      '));
   logstrtofile(_filemacros,shortstrtowin('      Range("A11").Select                                                           '));
   logstrtofile(_filemacros,shortstrtowin('      ActiveSheet.PivotTables("Сводная таблица1").PivotFields( _                    '));
   logstrtofile(_filemacros,shortstrtowin('          "Заказ на автотранспорт").PivotItems("(blank)").ShowDetail = False        '));
   logstrtofile(_filemacros,shortstrtowin('      Range("A11").Select                                                           '));
   logstrtofile(_filemacros,shortstrtowin('      ActiveSheet.PivotTables("Сводная таблица1").PivotFields( _                    '));
   logstrtofile(_filemacros,shortstrtowin('          "Заказ на автотранспорт").PivotItems("(blank)").ShowDetail = True         '));
   logstrtofile(_filemacros,shortstrtowin('  End Sub                                                                           '));

   xlImportModule(_filemacros);
   xlRunMacro('CreatePivot');

 xlKillExcel;
}

procedure fill_tReportValues; {
 var _kolvo : longint;
 _loop SpMnPlan {
   _kolvo++;
   if _kolvo mod 137 = 0 {
     setvisualheader('Сбор и группировка данных'+
     +''#13'' + 'Строк обработано ' + string(_kolvo));
   }
    if not nextvisual {
      if VisualizationActive then stopvisual;
      exit;
    }

   if not CheckMC(katmc.nrec) continue;
   if not CheckOrg(katorg.nrec) continue;
   if getmarkercount(fMarkerkodplan) != 0 {// надо проверить фильтр
     if getfirst AN_MC <> tsOK continue;
     if getfirst AV_MC <> tsOK continue;
     if getfirst KodPlanPostavk <> tsOK continue;
     if not Checkkodplanovika(KodPlanPostavk.nrec) continue;
   }
     if getfirst tMc where ((               KatMC.nrec == tMc.cMc
         and   if(isvalidall(tnkatorg), katorg.nrec, 0h) == tMc.cOrg
         and if(isvalidall(tnkatpodr), katpodr.nrec, 0h) == tMc.cSklad
     )) <> tsOK {
       insert tMc set
          tMc.cMc         := KatMC.nrec
        , tMc.MCName      := KatMC.name
        , tMc.MCCode      := KatMC.barkod
        , tMc.edizm       := katotped.abbr
        , tMc.cOrg        := if(isvalidall(tnkatorg),katorg.nrec,0h)
        , tMc.OrgName     := if(isvalidall(tnkatorg),katorg.code,'')
        , tMc.cSklad      := if(isvalidall(tnkatpodr),katpodr.nrec,0h)
        , tMc.SkladName   := if(isvalidall(tnkatpodr),katpodr.kod,'')
       ;

         _loop Indent where (( 1 == Indent.itis
                    and tMc.cOrg == Indent.cPerform
                           and 0 == Indent.iam (noindex)
                      and _dateB <<= Indent.dPlan (noindex)
                      and _dateE >>= Indent.dPlan (noindex)
                  and tMc.cSklad == Indent.cOrder (noindex)
                            )) {
                 _loop claim where ((Indent.nrec == Claim.cIndent
                                           and 1 == Claim.prmc
                                     and tMc.cMc == Claim.cmcusl)) {

                     var _date_name : string = getnameColumnByDate(indent.dPlan);

                     if getfirst tMCClaim where (( tMC.nrec == tMCClaim.cTmc
                                             and _date_name == tMCClaim.date_name
                                             and claim.name == tMCClaim.ZakazNumber
                                                 )) <> tsOK {
                          insert tMCClaim set
                             tMCClaim.cTmc        :=  tMC.nrec
                           , tMCClaim.date_name   := _date_name
                           , tMCClaim.ZakazNumber := claim.name
                           , tMCClaim.claimCount  := 0
                          ;
                         }
                     update current tMCClaim set tMCClaim.claimCount := tMCClaim.claimCount + claim.kol;

                     _loop SpObjAcc where (( 13 == SpObjAcc.typepos
                                 and claim.nrec == SpObjAcc.cPos
                                          and 0 == SpObjAcc.typeHier (noindex) )) {
                         if getfirst ObjAcct where ((SpObjAcc.cObjAcct == ObjAcct.nrec
                                                             and 112 == ObjAcct.TypeOwn (noindex)
                                                  )) = tsOK {
                          if getfirst KatZak where ((ObjAcct.cowner == KatZak.nrec)) = tsOK {
                            if getfirst tMCClaimZakazAvto where ((tMCClaim.nrec == tMCClaimZakazAvto.cTmcClaim
                                                             and  KatZak.NomZak == tMCClaimZakazAvto.ZakazNumberAvto
                                                                )) <> tsOK {
                                 insert tMCClaimZakazAvto set
                                    tMCClaimZakazAvto.cTmcClaim       := tMCClaim.nrec
                                  , tMCClaimZakazAvto.ZakazNumberAvto := KatZak.NomZak
                                ;
                               }
                             update current tMCClaimZakazAvto set tMCClaimZakazAvto.ZakazCount := tMCClaimZakazAvto.ZakazCount + SpObjAcc.kolcpos;
                             update current tMCClaim set tMCClaim.claimCount := tMCClaim.claimCount - SpObjAcc.kolcpos;
                           }
                         }
                     }
               }
          }


     }
   }

}


procedure printreport(__cMnPlan : comp; _TypeReport : string = 'EXCEL'); {
 set _cMnPlan := __cMnPlan;
 if getfirst MnPlan <> tsOK exit;
 set _dateB := MNPLAN.startdate;
 set _dateE := MNPLAN.enddate;
 if RunWindowModal(winSetParam) != cmDefault exit;
 StartNewVisual(vtRotateVisual, vfBreak+vfTimer,'Формирование отчета' , 1);

 fill_tDateNameColumn;

 if _TypeReport = 'EXCEL' then {
         fill_tReportValues;
         PrintReport_Matrix;
   }
if VisualizationActive then stopvisual;
}


handleevent
cminit:{
}
cmOnVipUnload:{
  DoneMarker(fMarkermc,'');
  DoneMarker(fMarkerOrg,'');
  DoneMarker(fMarkerkodplan,'');
}
cmpick:{
  case curfield of
  #_fmc      : {
      if runwindowmodal(wintBRMC) = cmDefault {
        pMarkerMC.ExportTo(fMarkermc);
        _fmc := 'Выбрано '+string(getmarkercount(fMarkermc));
      }
    }
  #_forg     : {
      if runwindowmodal(wintBROrg) = cmDefault {
        pMarkerOrg.ExportTo(fMarkerOrg);
        _forg := 'Выбрано '+string(getmarkercount(fMarkerOrg));
      }

    }
  #_fkodplan : {
      if runwindowmodal(wintkodplan) = cmDefault {
        pMarkerkodplan.ExportTo(fMarkerkodplan);
        _fkodplan := 'Выбрано '+string(getmarkercount(fMarkerkodplan));
      }
    }
  end;
  rereadrecord;
}
cmdelonprotect:{
  case curfield of
  #_fmc      : {
      _fmc      := '--все--';
      clearmarker(fMarkermc);
    }
  #_forg     : {
      _forg     := '--все--';
      clearmarker(fMarkerOrg);
    }
  #_fkodplan : {
      _fkodplan := '--все--';
      clearmarker(fMarkerkodplan);
    }
  end;
  rereadrecord;
}
end;
end.
